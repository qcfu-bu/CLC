Recursive definition of pstep_diamond is ill-formed.
In environment
pstep_diamond : ∀ m m1 m2 : term, pstep m m1 → pstep m m2 → ∃ m' : term, pstep m1 m' ∧ pstep m2 m'
pstep_diamond' :
∀ ls ls1 ls2 : terms, pstep' ls ls1 → pstep' ls ls2 → ∃ ls' : terms, pstep' ls1 ls' ∧ pstep' ls2 ls'
m : term
m1 : term
m2 : term
p : pstep m m1
F : pstep <=2 (λ H H0 : term, ∀ m2 : term, pstep H m2 → ∃ m' : term, pstep H0 m' ∧ pstep m2 m')
t : term
t0 : term
p0 : pstep t t0
m0 : term
m' : term
Q : term
Q' : term
Fs : terms
Fs' : terms
p1 : pstep m0 m'
p2 : pstep Q Q'
p3 : pstep' Fs Fs'
m3 : term
p4 : pstep (Case m0 Q Fs) m3
i : nat
m4 : term
ms : terms
ms' : terms
Q0 : term
Fs0 : terms
Fs'0 : terms
F0 : term
F' : term
H : iget i Fs0 F0
H0 : iget i Fs'0 F'
H1 : pstep' ms ms'
H2 : pstep' Fs0 Fs'0
H3 : pstep F0 F'
H4 : Case (spine (Constr i m4) ms) Q0 Fs0 = Case m0 Q Fs
H5 : spine F' ms' = m3
H6 : Q0 = Q
H7 : Fs0 = Fs
H8 : spine F' ms' = m3
H9 : iget i Fs F0
H10 : iget i Fs'0 F'
H11 : pstep' ms ms'
H12 : pstep' Fs Fs'0
H13 : pstep F0 F'
p5 : pstep (spine (Constr i m4) ms) m'
ih1 : ∀ m2 : term, pstep (spine (Constr i m4) ms) m2 → ∃ m'0 : term, pstep m' m'0 ∧ pstep m2 m'0
h' : term
__top_assumption_ : ∃ ls' : terms, m' = spine h' ls' ∧ pstep (Constr i m4) h' ∧ pstep' ms ls'
ls'0 : terms
__top_assumption_0 : m' = spine h' ls'0 ∧ pstep (Constr i m4) h' ∧ pstep' ms ls'0
__top_assumption_1 : m' = spine h' ls'0
__top_assumption_2 : pstep (Constr i m4) h' ∧ pstep' ms ls'0
p6 : pstep (Constr i m4) h'
p7 : pstep' ms ls'0
i0 : nat
m5 : term
m'0 : term
H14 : pstep m5 m'0
H15 : Constr i0 m5 = Constr i m4
H16 : Constr i0 m'0 = h'
H17 : m5 = m4
H18 : Constr i m'0 = h'
H19 : pstep m4 m'0
Recursive call to pstep_diamond' has principal argument equal to "H11" instead of
one of the following variables: "p1" "p2" "p3" "p5".
Recursive definition is:
"λ (m m1 m2 : term) (p : pstep m m1),
   (λ (_evar_0_ : ∀ x : var,
                    (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m')
                      (Var x) (Var x)) (_evar_0_0 : ∀ (srt : sort) (l : option nat),
                                                      (λ H H0 : term,
                                                         ∀ m3 : term,
                                                           pstep H m3
                                                           → ∃ m' : term, pstep H0 m' ∧ pstep m3 m')
                                                        (Sort srt l) (Sort srt l)) 
      (_evar_0_1 : ∀ n n' : term,
                     pstep n n'
                     → (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m') n
                         n'
                       → (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m')
                           (Lam n) (Lam n')) (_evar_0_2 : ∀ m0 m' n n' : term,
                                                            pstep m0 m'
                                                            → (λ H H0 : term,
                                                                 ∀ m3 : term,
                                                                   pstep H m3
                                                                   → ∃ m'0 : term,
                                                                       pstep H0 m'0 ∧ pstep m3 m'0) m0 m'
                                                              → pstep n n'
                                                                → (λ H H0 : term,
                                                                     ∀ m3 : term,
                                                                       pstep H m3
                                                                       → ∃ m'0 : term,
                                                                           pstep H0 m'0 ∧ pstep m3 m'0) n
                                                                    n'
                                                                  → (λ H H0 : term,
                                                                       ∀ m3 : term,
                                                                         pstep H m3
                                                                         → ∃ m'0 : term,
                                                                             pstep H0 m'0 ∧ pstep m3 m'0)
                                                                      (App m0 n) 
                                                                      (App m' n')) 
      (_evar_0_3 : ∀ m0 m' n n' : term,
                     pstep m0 m'
                     → (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0)
                         m0 m'
                       → pstep n n'
                         → (λ H H0 : term,
                              ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0) n n'
                           → (λ H H0 : term,
                                ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0)
                               (App (Lam m0) n) m'.[n'/]) (_evar_0_4 : ∀ (A A' : term) 
                                                                         (s : sort) 
                                                                         (B B' : term),
                                                                         pstep A A'
                                                                         → (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m') A
                                                                             A'
                                                                           → pstep B B'
                                                                             → 
                                                                             (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m') B
                                                                             B'
                                                                             → 
                                                                             (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m')
                                                                             (Prod A B s) 
                                                                             (Prod A' B' s)) 
      (_evar_0_5 : ∀ (A A' : term) (s : sort) (B B' : term),
                     pstep A A'
                     → (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m') A
                         A'
                       → pstep B B'
                         → (λ H H0 : term,
                              ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m') B B'
                           → (λ H H0 : term,
                                ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m')
                               (Lolli A B s) (Lolli A' B' s)) (_evar_0_6 : ∀ (A A' : term) 
                                                                             (s : sort) 
                                                                             (Cs Cs' : terms),
                                                                             pstep A A'
                                                                             → 
                                                                             (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m') A
                                                                             A'
                                                                             → 
                                                                             pstep' Cs Cs'
                                                                             → 
                                                                             (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m')
                                                                             (Ind A s Cs) 
                                                                             (Ind A' s Cs')) 
      (_evar_0_7 : ∀ (i : nat) (m0 m' : term),
                     pstep m0 m'
                     → (λ H H0 : term, ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0)
                         m0 m'
                       → (λ H H0 : term,
                            ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0)
                           (Constr i m0) (Constr i m')) (_evar_0_8 : ∀ (m0 m' Q Q' : term) 
                                                                       (Fs Fs' : terms),
                                                                       pstep m0 m'
                                                                       → (λ H H0 : term,
                                                                            ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m'0 : term,
                                                                             pstep H0 m'0 ∧ pstep m3 m'0)
                                                                           m0 m'
                                                                         → pstep Q Q'
                                                                           → (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m'0 : term,
                                                                             pstep H0 m'0 ∧ pstep m3 m'0)
                                                                             Q Q'
                                                                             → 
                                                                             pstep' Fs Fs'
                                                                             → 
                                                                             (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m'0 : term,
                                                                             pstep H0 m'0 ∧ pstep m3 m'0)
                                                                             (Case m0 Q Fs)
                                                                             (Case m' Q' Fs')) 
      (_evar_0_9 : ∀ (i : nat) (m0 : term) (ms ms' : terms) (Q : term) (Fs Fs' : terms) (F F' : term),
                     iget i Fs F
                     → iget i Fs' F'
                       → pstep' ms ms'
                         → pstep' Fs Fs'
                           → pstep F F'
                             → (λ H H0 : term,
                                  ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m') F F'
                               → (λ H H0 : term,
                                    ∀ m3 : term, pstep H m3 → ∃ m' : term, pstep H0 m' ∧ pstep m3 m')
                                   (Case (spine (Constr i m0) ms) Q Fs) (spine F' ms')) 
      (_evar_0_10 : ∀ (m0 m' Q Q' : term) (Fs Fs' : terms),
                      pstep m0 m'
                      → (λ H H0 : term,
                           ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0) m0 m'
                        → pstep Q Q'
                          → (λ H H0 : term,
                               ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0) Q Q'
                            → pstep' Fs Fs'
                              → (λ H H0 : term,
                                   ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0)
                                  (DCase m0 Q Fs) (DCase m' Q' Fs')) (_evar_0_11 : 
                                                                      ∀ (i : nat) 
                                                                        (m0 : term) 
                                                                        (ms ms' : terms) 
                                                                        (Q : term) 
                                                                        (Fs Fs' : terms) 
                                                                        (F F' : term),
                                                                        iget i Fs F
                                                                        → iget i Fs' F'
                                                                          → pstep' ms ms'
                                                                            → 
                                                                            pstep' Fs Fs'
                                                                            → 
                                                                            pstep F F'
                                                                            → 
                                                                            (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m') F
                                                                             F'
                                                                            → 
                                                                            (λ H H0 : term,
                                                                             ∀ m3 : term,
                                                                             pstep H m3
                                                                             → 
                                                                             ∃ m' : term,
                                                                             pstep H0 m' ∧ pstep m3 m')
                                                                             (DCase
                                                                             (spine (Constr i m0) ms) Q Fs)
                                                                             (spine F' ms')) 
      (_evar_0_12 : ∀ m0 m' : term,
                      pstep m0 m'
                      → (λ H H0 : term,
                           ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0) m0 m'
                        → (λ H H0 : term,
                             ∀ m3 : term, pstep H m3 → ∃ m'0 : term, pstep H0 m'0 ∧ pstep m3 m'0) 
                            (Fix m0) (Fix m')) (_evar_0_13 : ∀ m0 m' : term,
                                                               pstep m0 m'
                                                               → (λ H H0 : term,
                                                                    ∀ m3 : term,
                                                                      pstep H m3
                                                                      → ∃ m'0 : term,
                                                                          pstep H0 m'0 ∧ pstep m3 m'0) m0
                                                                   m'
                                                                 → (λ H H0 : term,
                                                                      ∀ m3 : term,
                                                                        pstep H m3
                                                                        → ∃ m'0 : term,
                                                                            pstep H0 m'0 ∧ pstep m3 m'0)
                                                                     (Fix m0) m'.[
                                                                     Fix m'/]),
      pstep_ind _evar_0_ _evar_0_0 _evar_0_1 _evar_0_2 _evar_0_3 _evar_0_4 _evar_0_5 _evar_0_6 _evar_0_7
        _evar_0_8 _evar_0_9 _evar_0_10 _evar_0_11 _evar_0_12 _evar_0_13 p)
     (λ (x : var) (m3 : term) (p0 : pstep (Var x) m3),
        let H : Var x = Var x → m3 = m3 → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m' :=
          match
            p0 in (pstep t t0) return (t = Var x → t0 = m3 → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m')
          with
          | pstep_Var x0 =>
              λ (H : Var x0 = Var x) (H0 : Var x0 = m3),
                (λ H1 : Var x0 = Var x,
                   let H2 : x0 = x := f_equal (λ e : term, match e with
                                                           | Var x1 => x1
                                                           | _ => x0
                                                           end) H1 in
                   (λ H3 : x0 = x,
                      let H4 : x0 = x := H3 in
                      eq_ind_r (λ v : var, Var v = m3 → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m')
                        (λ H5 : Var x = m3,
                           let H6 : Var x = m3 := H5 in
                           eq_ind (Var x) (λ t : term, ∃ m' : term, pstep (Var x) m' ∧ pstep t m')
                             (ex_intro (λ m' : term, pstep (Var x) m' ∧ pstep (Var x) m') 
                                (Var x) (conj (pstep_Var x) (pstep_Var x))) m3 H6) H4) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Var x) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Var x,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Var x) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H2) H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Var x) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Var x,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Var x) H2 in
                   False_ind (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m0 m' n n' H H0 =>
              λ (H1 : App m0 n = Var x) (H2 : App m' n' = m3),
                (λ H3 : App m0 n = Var x,
                   let H4 : False :=
                     eq_ind (App m0 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Var x) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Beta m0 m' n n' H H0 =>
              λ (H1 : App (Lam m0) n = Var x) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m0) n = Var x,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Var x) H3 in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Var x) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Var x,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Var x) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H4) H1 H2 H
                  H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Var x) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Var x,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Var x) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H4) H1 H2 H
                  H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Var x) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Var x,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Var x) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H4) H1
                  H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Var x) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Var x,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Var x) H2 in
                   False_ind
                     (Constr i m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Var x) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Var x,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Var x) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Var x) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Var x,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Var x) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H7)
                  H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Var x) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Var x,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Var x) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Var x) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Var x,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Var x) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m' : term, pstep (Var x) m' ∧ pstep m3 m') H7)
                  H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Var x) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Var x,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Var x) H2 in
                   False_ind (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Var x) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Var x,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Var x) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Var x) m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          end in
        H (erefl (Var x)) (erefl m3))
     (λ (srt : sort) (l : option nat) (m3 : term) (p0 : pstep (Sort srt l) m3),
        let H : Sort srt l = Sort srt l → m3 = m3 → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m' :=
          match
            p0 in (pstep t t0)
            return (t = Sort srt l → t0 = m3 → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Sort srt l) (H0 : Var x = m3),
                (λ H1 : Var x = Sort srt l,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Sort srt l) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt0 l0 =>
              λ (H : Sort srt0 l0 = Sort srt l) (H0 : Sort srt0 l0 = m3),
                (λ H1 : Sort srt0 l0 = Sort srt l,
                   let H2 : l0 = l :=
                     f_equal (λ e : term, match e with
                                          | Sort _ l1 => l1
                                          | _ => l0
                                          end) H1 in
                   (let H3 : srt0 = srt :=
                      f_equal (λ e : term, match e with
                                           | Sort s _ => s
                                           | _ => srt0
                                           end) H1 in
                    (λ H4 : srt0 = srt,
                       let H5 : srt0 = srt := H4 in
                       eq_ind_r
                         (λ s : sort,
                            l0 = l → Sort s l0 = m3 → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m')
                         (λ H6 : l0 = l,
                            let H7 : l0 = l := H6 in
                            eq_ind_r
                              (λ o : option nat,
                                 Sort srt o = m3 → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m')
                              (λ H8 : Sort srt l = m3,
                                 let H9 : Sort srt l = m3 := H8 in
                                 eq_ind (Sort srt l)
                                   (λ t : term, ∃ m' : term, pstep (Sort srt l) m' ∧ pstep t m')
                                   (ex_intro (λ m' : term, pstep (Sort srt l) m' ∧ pstep (Sort srt l) m')
                                      (Sort srt l) (conj (pstep_Sort srt l) (pstep_Sort srt l))) m3 H9) H7)
                         H5) H3) H2) H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Sort srt l) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Sort srt l,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Sort srt l) H2 in
                   False_ind (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m')
                     H3) H0 H1 H
          | @pstep_App m0 m' n n' H H0 =>
              λ (H1 : App m0 n = Sort srt l) (H2 : App m' n' = m3),
                (λ H3 : App m0 n = Sort srt l,
                   let H4 : False :=
                     eq_ind (App m0 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Sort srt l) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Beta m0 m' n n' H H0 =>
              λ (H1 : App (Lam m0) n = Sort srt l) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m0) n = Sort srt l,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Sort srt l) H3 in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Sort srt l) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Sort srt l,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Sort srt l) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H4) H1
                  H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Sort srt l) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Sort srt l,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Sort srt l) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H4) H1
                  H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Sort srt l) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Sort srt l,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Sort srt l) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Sort srt l) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Sort srt l,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Sort srt l) H2 in
                   False_ind
                     (Constr i m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Sort srt l) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Sort srt l,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Sort srt l) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0)
                     H5) H2 H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Sort srt l) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Sort srt l,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Sort srt l) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H7) H4 H5 H
                  H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Sort srt l) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Sort srt l,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Sort srt l) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0)
                     H5) H2 H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Sort srt l) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Sort srt l,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Sort srt l) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Sort srt l) m' ∧ pstep m3 m') H7) H4 H5 H
                  H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Sort srt l) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Sort srt l,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Sort srt l) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Sort srt l) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Sort srt l,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Sort srt l) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Sort srt l) m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (Sort srt l)) (erefl m3))
     (λ (n n' : term) (_ : pstep n n') (ih : ∀ m3 : term,
                                               pstep n m3 → ∃ m' : term, pstep n' m' ∧ pstep m3 m') 
        (m3 : term) (p2 : pstep (Lam n) m3),
        let H : Lam n = Lam n → m3 = m3 → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m' :=
          match
            p2 in (pstep t t0) return (t = Lam n → t0 = m3 → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Lam n) (H0 : Var x = m3),
                (λ H1 : Var x = Lam n,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Lam n) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Lam n) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Lam n,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Lam n) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m') H2) H H0
          | @pstep_Lam n0 n'0 H =>
              λ (H0 : Lam n0 = Lam n) (H1 : Lam n'0 = m3),
                (λ H2 : Lam n0 = Lam n,
                   let H3 : n0 = n := f_equal (λ e : term, match e with
                                                           | Lam m0 => m0
                                                           | _ => n0
                                                           end) H2 in
                   (λ H4 : n0 = n,
                      let H5 : n0 = n := H4 in
                      eq_ind_r
                        (λ t : term,
                           Lam n'0 = m3 → pstep t n'0 → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m')
                        (λ H6 : Lam n'0 = m3,
                           let H7 : Lam n'0 = m3 := H6 in
                           eq_ind (Lam n'0)
                             (λ t : term, pstep n n'0 → ∃ m' : term, pstep (Lam n') m' ∧ pstep t m')
                             [eta λ _view_subject_ : pstep n n'0,
                                    (λ __top_assumption_ : ∃ m' : term, pstep n' m' ∧ pstep n'0 m',
                                       (λ _evar_0_ : ∀ (x : term) (p0 : (λ m' : term,
                                                                           pstep n' m' ∧ pstep n'0 m') x),
                                                       (λ _ : ∃ m' : term, pstep n' m' ∧ pstep n'0 m',
                                                          ∃ m' : term,
                                                            pstep (Lam n') m' ∧ pstep (Lam n'0) m')
                                                         (ex_intro
                                                            (λ m' : term, pstep n' m' ∧ pstep n'0 m') x p0),
                                          match
                                            __top_assumption_ as e
                                            return
                                              ((λ _ : ∃ m' : term, pstep n' m' ∧ pstep n'0 m',
                                                  ∃ m' : term, pstep (Lam n') m' ∧ pstep (Lam n'0) m') e)
                                          with
                                          | @ex_intro _ _ x x0 => _evar_0_ x x0
                                          end)
                                         (λ (m' : term) (__top_assumption_0 : pstep n' m' ∧ pstep n'0 m'),
                                            (λ _evar_0_ : ∀ (a : pstep n' m') (b : pstep n'0 m'),
                                                            (λ _ : pstep n' m' ∧ pstep n'0 m',
                                                               ∃ m'0 : term,
                                                                 pstep (Lam n') m'0 ∧ pstep (Lam n'0) m'0)
                                                              (conj a b),
                                               match
                                                 __top_assumption_0 as a
                                                 return
                                                   ((λ _ : pstep n' m' ∧ pstep n'0 m',
                                                       ∃ m'0 : term,
                                                         pstep (Lam n') m'0 ∧ pstep (Lam n'0) m'0) a)
                                               with
                                               | conj x x0 => _evar_0_ x x0
                                               end)
                                              (λ (p3 : pstep n' m') (p4 : pstep n'0 m'),
                                                 ex_intro
                                                   (λ m'0 : term, pstep (Lam n') m'0 ∧ pstep (Lam n'0) m'0)
                                                   (Lam m') (conj (pstep_Lam p3) (pstep_Lam p4)))))
                                      (ih n'0 _view_subject_)] m3 H7) H5) H3) H0 H1 H
          | @pstep_App m0 m' n0 n'0 H H0 =>
              λ (H1 : App m0 n0 = Lam n) (H2 : App m' n'0 = m3),
                (λ H3 : App m0 n0 = Lam n,
                   let H4 : False :=
                     eq_ind (App m0 n0) (λ e : term, match e with
                                                     | App _ _ => True
                                                     | _ => False
                                                     end) I (Lam n) H3 in
                   False_ind
                     (App m' n'0 = m3
                      → pstep m0 m' → pstep n0 n'0 → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Beta m0 m' n0 n'0 H H0 =>
              λ (H1 : App (Lam m0) n0 = Lam n) (H2 : m'.[n'0/] = m3),
                (λ H3 : App (Lam m0) n0 = Lam n,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n0)
                       (λ e : term, match e with
                                    | App _ _ => True
                                    | _ => False
                                    end) I (Lam n) H3 in
                   False_ind
                     (m'.[n'0/] = m3
                      → pstep m0 m' → pstep n0 n'0 → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Lam n) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Lam n,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Lam n) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m') H4) H1 H2
                  H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Lam n) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Lam n,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Lam n) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m') H4) H1 H2
                  H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Lam n) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Lam n,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Lam n) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m') H4) H1
                  H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Lam n) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Lam n,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Lam n) H2 in
                   False_ind
                     (Constr i m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Lam n) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Lam n,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Lam n) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Lam n) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Lam n,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Lam n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m')
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Lam n) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Lam n,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Lam n) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Lam n) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Lam n,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Lam n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m' : term, pstep (Lam n') m' ∧ pstep m3 m')
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Lam n) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Lam n,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Lam n) H2 in
                   False_ind (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Lam n) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Lam n,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Lam n) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Lam n') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          end in
        H (erefl (Lam n)) (erefl m3))
     (λ (m0 m' n n' : term) (p1 : pstep m0 m') (ih1 : ∀ m3 : term,
                                                        pstep m0 m3
                                                        → ∃ m'0 : term, pstep m' m'0 ∧ pstep m3 m'0) 
        (_ : pstep n n') (ih2 : ∀ m3 : term, pstep n m3 → ∃ m'0 : term, pstep n' m'0 ∧ pstep m3 m'0) 
        (m3 : term) (p3 : pstep (App m0 n) m3),
        let H : App m0 n = App m0 n → m3 = m3 → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0 :=
          match
            p3 in (pstep t t0)
            return (t = App m0 n → t0 = m3 → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = App m0 n) (H0 : Var x = m3),
                (λ H1 : Var x = App m0 n,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (App m0 n) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = App m0 n) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = App m0 n,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (App m0 n) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H2) H
                  H0
          | @pstep_Lam n0 n'0 H =>
              λ (H0 : Lam n0 = App m0 n) (H1 : Lam n'0 = m3),
                (λ H2 : Lam n0 = App m0 n,
                   let H3 : False :=
                     eq_ind (Lam n0) (λ e : term, match e with
                                                  | Lam _ => True
                                                  | _ => False
                                                  end) I (App m0 n) H2 in
                   False_ind
                     (Lam n'0 = m3 → pstep n0 n'0 → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_App m4 m'0 n0 n'0 H H0 =>
              λ (H1 : App m4 n0 = App m0 n) (H2 : App m'0 n'0 = m3),
                (λ H3 : App m4 n0 = App m0 n,
                   let H4 : n0 = n := f_equal (λ e : term, match e with
                                                           | App _ n1 => n1
                                                           | _ => n0
                                                           end) H3 in
                   (let H5 : m4 = m0 :=
                      f_equal (λ e : term, match e with
                                           | App m5 _ => m5
                                           | _ => m4
                                           end) H3 in
                    (λ H6 : m4 = m0,
                       let H7 : m4 = m0 := H6 in
                       eq_ind_r
                         (λ t : term,
                            n0 = n
                            → App m'0 n'0 = m3
                              → pstep t m'0
                                → pstep n0 n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                         (λ H8 : n0 = n,
                            let H9 : n0 = n := H8 in
                            eq_ind_r
                              (λ t : term,
                                 App m'0 n'0 = m3
                                 → pstep m0 m'0
                                   → pstep t n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                              (λ H10 : App m'0 n'0 = m3,
                                 let H11 : App m'0 n'0 = m3 := H10 in
                                 eq_ind (App m'0 n'0)
                                   (λ t : term,
                                      pstep m0 m'0
                                      → pstep n n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep t m'1)
                                   (λ (H12 : pstep m0 m'0) (H13 : pstep n n'0),
                                      (λ _view_subject_ : pstep m0 m'0,
                                         (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                            (λ _evar_0_ : ∀ (x : term) (p0 : ... x),
                                                            (..., ...) (ex_intro ... x p0),
                                               match __top_assumption_ as e return (... e) with
                                               | @ex_intro _ _ x x0 => _evar_0_ x x0
                                               end)
                                              (λ (m'1 : term) (__top_assumption_0 : 
                                                               pstep m' m'1 ∧ 
                                                               pstep m'0 m'1),
                                                 (λ _evar_0_ : ..., ...,
                                                    match ... ... with
                                                    | ... => _evar_0_ x x0
                                                    end)
                                                   (λ (p4 : pstep m' m'1) (p5 : pstep m'0 m'1),
                                                      (..., ...) H13))) (ih1 m'0 _view_subject_)) H12) m3
                                   H11) H9) H7) H5) H4) H1 H2 H H0
          | @pstep_Beta m4 m'0 n0 n'0 H H0 =>
              λ (H1 : App (Lam m4) n0 = App m0 n) (H2 : m'0.[n'0/] = m3),
                (λ H3 : App (Lam m4) n0 = App m0 n,
                   let H4 : n0 = n := f_equal (λ e : term, match e with
                                                           | App _ n1 => n1
                                                           | _ => n0
                                                           end) H3 in
                   (let H5 : Lam m4 = m0 :=
                      f_equal (λ e : term, match e with
                                           | App m5 _ => m5
                                           | _ => Lam m4
                                           end) H3 in
                    (λ H6 : Lam m4 = m0,
                       let H7 : Lam m4 = m0 := H6 in
                       eq_ind (Lam m4)
                         (λ _ : term,
                            n0 = n
                            → m'0.[n'0/] = m3
                              → pstep m4 m'0
                                → pstep n0 n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                         (λ H8 : n0 = n,
                            let H9 : n0 = n := H8 in
                            eq_ind_r
                              (λ t : term,
                                 m'0.[n'0/] = m3
                                 → pstep m4 m'0
                                   → pstep t n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                              (λ H10 : m'0.[n'0/] = m3,
                                 let H11 : m'0.[n'0/] = m3 := H10 in
                                 eq_ind m'0.[n'0/]
                                   (λ t : term,
                                      pstep m4 m'0
                                      → pstep n n'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep t m'1)
                                   (λ (H12 : pstep m4 m'0) (H13 : pstep n n'0),
                                      eq_ind (Lam m4)
                                        (λ m5 : term,
                                           pstep m5 m'
                                           → (∀ m6 : term,
                                                pstep m5 m6 → ∃ m'1 : term, pstep m' m'1 ∧ pstep m6 m'1)
                                             → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m'0.[n'0/] m'1)
                                        (λ (p4 : pstep (Lam m4) m') (ih3 : ∀ m5 : term,
                                                                             pstep (Lam m4) m5
                                                                             → 
                                                                             ∃ m'1 : term,
                                                                             pstep m' m'1 ∧ pstep m5 m'1),
                                           let H14 :
                                             Lam m4 = Lam m4
                                             → m' = m'
                                               → ∃ m'1 : term,
                                                   pstep (App m' n') m'1 ∧ pstep m'0.[n'0/] m'1 :=
                                             match
                                               p4 in (pstep t t0)
                                               return
                                                 (t = Lam m4
                                                  → t0 = m'
                                                    → ∃ m'1 : term, pstep ... m'1 ∧ pstep m'0.[n'0/] m'1)
                                             with
                                             | pstep_Var x =>
                                                 λ (H14 : Var x = Lam m4) (H15 : Var x = m'),
                                                   (λ H16 : Var x = Lam m4,
                                                      let H17 : False := eq_ind (...) (...) I (...) H16 in
                                                      False_ind (... → ...) H17) H14 H15
                                             | pstep_Sort srt l =>
                                                 λ (H14 : Sort srt l = Lam m4) (H15 : Sort srt l = m'),
                                                   (λ H16 : Sort srt l = Lam m4,
                                                      let H17 : False := eq_ind (...) (...) I (...) H16 in
                                                      False_ind (... → ...) H17) H14 H15
                                             | @pstep_Lam n1 n'1 H14 =>
                                                 λ (H15 : Lam n1 = Lam m4) (H16 : Lam n'1 = m'),
                                                   (λ H17 : Lam n1 = Lam m4,
                                                      let H18 : n1 = m4 := f_equal (...) H17 in
                                                      (..., ...) H18) H15 H16 H14
                                             | @pstep_App m5 m'1 n1 n'1 H14 H15 =>
                                                 λ (H16 : App m5 n1 = Lam m4) (H17 : App m'1 n'1 = m'),
                                                   (λ H18 : App m5 n1 = Lam m4,
                                                      let H19 : False := eq_ind (...) (...) I (...) H18 in
                                                      False_ind (... → ...) H19) H16 H17 H14 H15
                                             | @pstep_Beta m5 m'1 n1 n'1 H14 H15 =>
                                                 λ (H16 : App (Lam m5) n1 = Lam m4) 
                                                   (H17 : m'1.[n'1/] = m'),
                                                   (λ H18 : App ... n1 = Lam m4,
                                                      let H19 : False := eq_ind (...) (...) I (...) H18 in
                                                      False_ind (... → ...) H19) H16 H17 H14 H15
                                             | @pstep_Prod A A' s B B' H14 H15 =>
                                                 λ (H16 : Prod A B s = Lam m4) (H17 : Prod A' B' s = m'),
                                                   (λ H18 : Prod A B s = Lam m4,
                                                      let H19 : False := eq_ind (...) (...) I (...) H18 in
                                                      False_ind (... → ...) H19) H16 H17 H14 H15
                                             | @pstep_Lolli A A' s B B' H14 H15 =>
                                                 λ (H16 : Lolli A B s = Lam m4) (H17 : Lolli A' B' s = m'),
                                                   (λ H18 : Lolli A B s = Lam m4,
                                                      let H19 : False := eq_ind (...) (...) I (...) H18 in
                                                      False_ind (... → ...) H19) H16 H17 H14 H15
                                             | @pstep_Ind A A' s Cs Cs' H14 H15 =>
                                                 λ (H16 : Ind A s Cs = Lam m4) (H17 : Ind A' s Cs' = m'),
                                                   (λ H18 : Ind A s Cs = Lam m4,
                                                      let H19 : False := eq_ind (...) (...) I (...) H18 in
                                                      False_ind (... → ...) H19) H16 H17 H14 H15
                                             | @pstep_Constr i m5 m'1 H14 =>
                                                 λ (H15 : Constr i m5 = Lam m4) (H16 : Constr i m'1 = m'),
                                                   (λ H17 : Constr i m5 = Lam m4,
                                                      let H18 : False := eq_ind (...) (...) I (...) H17 in
                                                      False_ind (... → ...) H18) H15 H16 H14
                                             | @pstep_Case m5 m'1 Q Q' Fs Fs' H14 H15 H16 =>
                                                 λ (H17 : Case m5 Q Fs = Lam m4) 
                                                   (H18 : Case m'1 Q' Fs' = m'),
                                                   (λ H19 : Case m5 Q Fs = Lam m4,
                                                      let H20 : False := eq_ind (...) (...) I (...) H19 in
                                                      False_ind (... → ...) H20) H17 H18 H14 H15 H16
                                             | @pstep_CaseIota i m5 ms ms' Q Fs Fs' F F' H14 H15 H16 H17
                                               H18 =>
                                                 λ (H19 : Case (spine (...) ms) Q Fs = Lam m4) 
                                                   (H20 : spine F' ms' = m'),
                                                   (λ H21 : Case ... Q Fs = Lam m4,
                                                      let H22 : False := eq_ind (...) (...) I (...) H21 in
                                                      False_ind (... → ...) H22) H19 H20 H14 H15 H16 H17
                                                     H18
                                             | @pstep_DCase m5 m'1 Q Q' Fs Fs' H14 H15 H16 =>
                                                 λ (H17 : DCase m5 Q Fs = Lam m4) 
                                                   (H18 : DCase m'1 Q' Fs' = m'),
                                                   (λ H19 : DCase m5 Q Fs = Lam m4,
                                                      let H20 : False := eq_ind (...) (...) I (...) H19 in
                                                      False_ind (... → ...) H20) H17 H18 H14 H15 H16
                                             | @pstep_DCaseIota i m5 ms ms' Q Fs Fs' F F' H14 H15 H16 H17
                                               H18 =>
                                                 λ (H19 : DCase (spine (...) ms) Q Fs = Lam m4) 
                                                   (H20 : spine F' ms' = m'),
                                                   (λ H21 : DCase ... Q Fs = Lam m4,
                                                      let H22 : False := eq_ind (...) (...) I (...) H21 in
                                                      False_ind (... → ...) H22) H19 H20 H14 H15 H16 H17
                                                     H18
                                             | @pstep_Fix m5 m'1 H14 =>
                                                 λ (H15 : Fix m5 = Lam m4) (H16 : Fix m'1 = m'),
                                                   (λ H17 : Fix m5 = Lam m4,
                                                      let H18 : False := eq_ind (...) (...) I (...) H17 in
                                                      False_ind (... → ...) H18) H15 H16 H14
                                             | @pstep_FixIota m5 m'1 H14 =>
                                                 λ (H15 : Fix m5 = Lam m4) (H16 : m'1.[Fix m'1/] = m'),
                                                   (λ H17 : Fix m5 = Lam m4,
                                                      let H18 : False := eq_ind (...) (...) I (...) H17 in
                                                      False_ind (... → ...) H18) H15 H16 H14
                                             end in
                                           H14 (erefl (Lam m4)) (erefl m')) m0 H6 p1 ih1) m3 H11) H9) m0
                         H7) H5) H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = App m0 n) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = App m0 n,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (App m0 n) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = App m0 n) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = App m0 n,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (App m0 n) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = App m0 n) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = App m0 n,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (App m0 n) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = App m0 n) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = App m0 n,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (App m0 n) H2 in
                   False_ind
                     (Constr i m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1) H3) H0 H1 H
          | @pstep_Case m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m4 Q Fs = App m0 n) (H3 : Case m'0 Q' Fs' = m3),
                (λ H4 : Case m4 Q Fs = App m0 n,
                   let H5 : False :=
                     eq_ind (Case m4 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (App m0 n) H4 in
                   False_ind
                     (Case m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                     H5) H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q Fs = App m0 n) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q Fs = App m0 n,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (App m0 n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m4 Q Fs = App m0 n) (H3 : DCase m'0 Q' Fs' = m3),
                (λ H4 : DCase m4 Q Fs = App m0 n,
                   let H5 : False :=
                     eq_ind (DCase m4 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (App m0 n) H4 in
                   False_ind
                     (DCase m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1)
                     H5) H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q Fs = App m0 n) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q Fs = App m0 n,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (App m0 n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep (App m' n') m'0 ∧ pstep m3 m'0) H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = App m0 n) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = App m0 n,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (App m0 n) H2 in
                   False_ind
                     (Fix m'0 = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1) H3)
                  H0 H1 H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = App m0 n) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = App m0 n,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (App m0 n) H2 in
                   False_ind
                     (m'0.[Fix m'0/] = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (App m' n') m'1 ∧ pstep m3 m'1) H3) H0 H1 H
          end in
        H (erefl (App m0 n)) (erefl m3))
     (λ (m0 m' n n' : term) (_ : pstep m0 m') (ih1 : ∀ m3 : term,
                                                       pstep m0 m3
                                                       → ∃ m'0 : term, pstep m' m'0 ∧ pstep m3 m'0) 
        (_ : pstep n n') (ih2 : ∀ m3 : term, pstep n m3 → ∃ m'0 : term, pstep n' m'0 ∧ pstep m3 m'0) 
        (m3 : term) (p3 : pstep (App (Lam m0) n) m3),
        let H :
          App (Lam m0) n = App (Lam m0) n → m3 = m3 → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0 :=
          match
            p3 in (pstep t t0)
            return (t = App (Lam m0) n → t0 = m3 → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = App (Lam m0) n) (H0 : Var x = m3),
                (λ H1 : Var x = App (Lam m0) n,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (App (Lam m0) n) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = App (Lam m0) n) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = App (Lam m0) n,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (App (Lam m0) n) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H2) H H0
          | @pstep_Lam n0 n'0 H =>
              λ (H0 : Lam n0 = App (Lam m0) n) (H1 : Lam n'0 = m3),
                (λ H2 : Lam n0 = App (Lam m0) n,
                   let H3 : False :=
                     eq_ind (Lam n0) (λ e : term, match e with
                                                  | Lam _ => True
                                                  | _ => False
                                                  end) I (App (Lam m0) n) H2 in
                   False_ind
                     (Lam n'0 = m3 → pstep n0 n'0 → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_App m4 m'0 n0 n'0 H H0 =>
              λ (H1 : App m4 n0 = App (Lam m0) n) (H2 : App m'0 n'0 = m3),
                (λ H3 : App m4 n0 = App (Lam m0) n,
                   let H4 : n0 = n := f_equal (λ e : term, match e with
                                                           | App _ n1 => n1
                                                           | _ => n0
                                                           end) H3 in
                   (let H5 : m4 = Lam m0 :=
                      f_equal (λ e : term, match e with
                                           | App m5 _ => m5
                                           | _ => m4
                                           end) H3 in
                    (λ H6 : m4 = Lam m0,
                       let H7 : m4 = Lam m0 := H6 in
                       eq_ind_r
                         (λ t : term,
                            n0 = n
                            → App m'0 n'0 = m3
                              → pstep t m'0
                                → pstep n0 n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                         (λ H8 : n0 = n,
                            let H9 : n0 = n := H8 in
                            eq_ind_r
                              (λ t : term,
                                 App m'0 n'0 = m3
                                 → pstep (Lam m0) m'0
                                   → pstep t n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                              (λ H10 : App m'0 n'0 = m3,
                                 let H11 : App m'0 n'0 = m3 := H10 in
                                 eq_ind (App m'0 n'0)
                                   (λ t : term,
                                      pstep (Lam m0) m'0
                                      → pstep n n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep t m'1)
                                   (λ (H12 : pstep (Lam m0) m'0) (H13 : pstep n n'0),
                                      let H14 :
                                        Lam m0 = Lam m0
                                        → m'0 = m'0
                                          → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep (App m'0 n'0) m'1 :=
                                        match
                                          H12 in (pstep t t0)
                                          return
                                            (t = Lam m0
                                             → t0 = m'0
                                               → ∃ m'1 : term,
                                                   pstep m'.[n'/] m'1 ∧ pstep (App m'0 n'0) m'1)
                                        with
                                        | pstep_Var x =>
                                            λ (H14 : Var x = Lam m0) (H15 : Var x = m'0),
                                              (λ H16 : Var x = Lam m0,
                                                 let H17 : False :=
                                                   eq_ind (Var x)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H16 in
                                                 False_ind
                                                   (Var x = m'0
                                                    → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep ... m'1)
                                                   H17) H14 H15
                                        | pstep_Sort srt l =>
                                            λ (H14 : Sort srt l = Lam m0) (H15 : Sort srt l = m'0),
                                              (λ H16 : Sort srt l = Lam m0,
                                                 let H17 : False :=
                                                   eq_ind (Sort srt l)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H16 in
                                                 False_ind
                                                   (Sort srt l = m'0
                                                    → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep ... m'1)
                                                   H17) H14 H15
                                        | @pstep_Lam n1 n'1 H14 =>
                                            λ (H15 : Lam n1 = Lam m0) (H16 : Lam n'1 = m'0),
                                              (λ H17 : Lam n1 = Lam m0,
                                                 let H18 : n1 = m0 :=
                                                   f_equal
                                                     (λ e : term, match ... with
                                                                  | ... m5
                                                                  | ... n1
                                                                  end) H17 in
                                                 (λ H19 : n1 = m0,
                                                    let H20 : n1 = m0 := H19 in eq_ind_r (...) (...) H20)
                                                   H18) H15 H16 H14
                                        | @pstep_App m5 m'1 n1 n'1 H14 H15 =>
                                            λ (H16 : App m5 n1 = Lam m0) (H17 : App m'1 n'1 = m'0),
                                              (λ H18 : App m5 n1 = Lam m0,
                                                 let H19 : False :=
                                                   eq_ind (App m5 n1)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H18 in
                                                 False_ind
                                                   (App m'1 n'1 = m'0
                                                    → pstep m5 m'1 → pstep n1 n'1 → ..., ...) H19) H16 H17
                                                H14 H15
                                        | @pstep_Beta m5 m'1 n1 n'1 H14 H15 =>
                                            λ (H16 : App (Lam m5) n1 = Lam m0) (H17 : m'1.[n'1/] = m'0),
                                              (λ H18 : App (Lam m5) n1 = Lam m0,
                                                 let H19 : False :=
                                                   eq_ind (App (Lam m5) n1)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H18 in
                                                 False_ind
                                                   (m'1.[n'1/] = m'0
                                                    → pstep m5 m'1 → pstep n1 n'1 → ..., ...) H19) H16 H17
                                                H14 H15
                                        | @pstep_Prod A A' s B B' H14 H15 =>
                                            λ (H16 : Prod A B s = Lam m0) (H17 : Prod A' B' s = m'0),
                                              (λ H18 : Prod A B s = Lam m0,
                                                 let H19 : False :=
                                                   eq_ind (Prod A B s)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H18 in
                                                 False_ind
                                                   (Prod A' B' s = m'0
                                                    → pstep A A' → pstep B B' → ..., ...) H19) H16 H17 H14
                                                H15
                                        | @pstep_Lolli A A' s B B' H14 H15 =>
                                            λ (H16 : Lolli A B s = Lam m0) (H17 : Lolli A' B' s = m'0),
                                              (λ H18 : Lolli A B s = Lam m0,
                                                 let H19 : False :=
                                                   eq_ind (Lolli A B s)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H18 in
                                                 False_ind
                                                   (Lolli A' B' s = m'0
                                                    → pstep A A' → pstep B B' → ..., ...) H19) H16 H17 H14
                                                H15
                                        | @pstep_Ind A A' s Cs Cs' H14 H15 =>
                                            λ (H16 : Ind A s Cs = Lam m0) (H17 : Ind A' s Cs' = m'0),
                                              (λ H18 : Ind A s Cs = Lam m0,
                                                 let H19 : False :=
                                                   eq_ind (Ind A s Cs)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H18 in
                                                 False_ind
                                                   (Ind A' s Cs' = m'0
                                                    → pstep A A' → pstep' Cs Cs' → ..., ...) H19) H16 H17
                                                H14 H15
                                        | @pstep_Constr i m5 m'1 H14 =>
                                            λ (H15 : Constr i m5 = Lam m0) (H16 : Constr i m'1 = m'0),
                                              (λ H17 : Constr i m5 = Lam m0,
                                                 let H18 : False :=
                                                   eq_ind (Constr i m5)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H17 in
                                                 False_ind
                                                   (Constr i m'1 = m'0 → pstep m5 m'1 → ∃ ..., ... ∧ ...)
                                                   H18) H15 H16 H14
                                        | @pstep_Case m5 m'1 Q Q' Fs Fs' H14 H15 H16 =>
                                            λ (H17 : Case m5 Q Fs = Lam m0) (H18 : Case m'1 Q' Fs' = m'0),
                                              (λ H19 : Case m5 Q Fs = Lam m0,
                                                 let H20 : False :=
                                                   eq_ind (Case m5 Q Fs)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H19 in
                                                 False_ind
                                                   (Case m'1 Q' Fs' = m'0
                                                    → pstep m5 m'1 → pstep Q Q' → ... → ...) H20) H17 H18
                                                H14 H15 H16
                                        | @pstep_CaseIota i m5 ms ms' Q Fs Fs' F F' H14 H15 H16 H17 H18 =>
                                            λ (H19 : Case (spine (Constr i m5) ms) Q Fs = Lam m0) 
                                              (H20 : spine F' ms' = m'0),
                                              (λ H21 : Case (spine (...) ms) Q Fs = Lam m0,
                                                 let H22 : False :=
                                                   eq_ind (Case (spine ... ms) Q Fs)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H21 in
                                                 False_ind
                                                   (spine F' ms' = m'0
                                                    → iget i Fs F → iget i Fs' F' → ... → ...) H22) H19
                                                H20 H14 H15 H16 H17 H18
                                        | @pstep_DCase m5 m'1 Q Q' Fs Fs' H14 H15 H16 =>
                                            λ (H17 : DCase m5 Q Fs = Lam m0) (H18 : 
                                                                             DCase m'1 Q' Fs' = m'0),
                                              (λ H19 : DCase m5 Q Fs = Lam m0,
                                                 let H20 : False :=
                                                   eq_ind (DCase m5 Q Fs)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H19 in
                                                 False_ind
                                                   (DCase m'1 Q' Fs' = m'0
                                                    → pstep m5 m'1 → pstep Q Q' → ... → ...) H20) H17 H18
                                                H14 H15 H16
                                        | @pstep_DCaseIota i m5 ms ms' Q Fs Fs' F F' H14 H15 H16 H17 H18 =>
                                            λ (H19 : DCase (spine (Constr i m5) ms) Q Fs = Lam m0) 
                                              (H20 : spine F' ms' = m'0),
                                              (λ H21 : DCase (spine (...) ms) Q Fs = Lam m0,
                                                 let H22 : False :=
                                                   eq_ind (DCase (spine ... ms) Q Fs)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H21 in
                                                 False_ind
                                                   (spine F' ms' = m'0
                                                    → iget i Fs F → iget i Fs' F' → ... → ...) H22) H19
                                                H20 H14 H15 H16 H17 H18
                                        | @pstep_Fix m5 m'1 H14 =>
                                            λ (H15 : Fix m5 = Lam m0) (H16 : Fix m'1 = m'0),
                                              (λ H17 : Fix m5 = Lam m0,
                                                 let H18 : False :=
                                                   eq_ind (Fix m5)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H17 in
                                                 False_ind
                                                   (Fix m'1 = m'0 → pstep m5 m'1 → ∃ ..., ... ∧ ...) H18)
                                                H15 H16 H14
                                        | @pstep_FixIota m5 m'1 H14 =>
                                            λ (H15 : Fix m5 = Lam m0) (H16 : m'1.[Fix m'1/] = m'0),
                                              (λ H17 : Fix m5 = Lam m0,
                                                 let H18 : False :=
                                                   eq_ind (Fix m5)
                                                     (λ e : term,
                                                        match ... with
                                                        | ... True
                                                        | ... False
                                                        end) I (Lam m0) H17 in
                                                 False_ind
                                                   (m'1.[Fix m'1/] = m'0 → pstep m5 m'1 → ∃ ..., ... ∧ ...)
                                                   H18) H15 H16 H14
                                        end in
                                      H14 (erefl (Lam m0)) (erefl m'0)) m3 H11) H9) H7) H5) H4) H1 H2 H H0
          | @pstep_Beta m4 m'0 n0 n'0 H H0 =>
              λ (H1 : App (Lam m4) n0 = App (Lam m0) n) (H2 : m'0.[n'0/] = m3),
                (λ H3 : App (Lam m4) n0 = App (Lam m0) n,
                   let H4 : n0 = n := f_equal (λ e : term, match e with
                                                           | App _ n1 => n1
                                                           | _ => n0
                                                           end) H3 in
                   (let H5 : m4 = m0 :=
                      f_equal
                        (λ e : term,
                           match e with
                           | App m5 _ => match m5 with
                                         | Lam m6 => m6
                                         | _ => m4
                                         end
                           | _ => m4
                           end) H3 in
                    (λ H6 : m4 = m0,
                       let H7 : m4 = m0 := H6 in
                       eq_ind_r
                         (λ t : term,
                            n0 = n
                            → m'0.[n'0/] = m3
                              → pstep t m'0
                                → pstep n0 n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                         (λ H8 : n0 = n,
                            let H9 : n0 = n := H8 in
                            eq_ind_r
                              (λ t : term,
                                 m'0.[n'0/] = m3
                                 → pstep m0 m'0
                                   → pstep t n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                              (λ H10 : m'0.[n'0/] = m3,
                                 let H11 : m'0.[n'0/] = m3 := H10 in
                                 eq_ind m'0.[n'0/]
                                   (λ t : term,
                                      pstep m0 m'0
                                      → pstep n n'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep t m'1)
                                   (λ (H12 : pstep m0 m'0) (H13 : pstep n n'0),
                                      (λ _view_subject_ : pstep m0 m'0,
                                         (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                            (λ _evar_0_ : ∀ (x : term) (p0 : ... x),
                                                            (..., ...) (ex_intro ... x p0),
                                               match __top_assumption_ as e return (... e) with
                                               | @ex_intro _ _ x x0 => _evar_0_ x x0
                                               end)
                                              (λ (m'1 : term) (__top_assumption_0 : 
                                                               pstep m' m'1 ∧ 
                                                               pstep m'0 m'1),
                                                 (λ _evar_0_ : ..., ...,
                                                    match ... ... with
                                                    | ... => _evar_0_ x x0
                                                    end)
                                                   (λ (p4 : pstep m' m'1) (p5 : pstep m'0 m'1),
                                                      (..., ...) H13))) (ih1 m'0 _view_subject_)) H12) m3
                                   H11) H9) H7) H5) H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = App (Lam m0) n) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = App (Lam m0) n,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (App (Lam m0) n) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = App (Lam m0) n) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = App (Lam m0) n,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (App (Lam m0) n) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = App (Lam m0) n) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = App (Lam m0) n,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (App (Lam m0) n) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = App (Lam m0) n) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = App (Lam m0) n,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (App (Lam m0) n) H2 in
                   False_ind
                     (Constr i m'0 = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                     H3) H0 H1 H
          | @pstep_Case m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m4 Q Fs = App (Lam m0) n) (H3 : Case m'0 Q' Fs' = m3),
                (λ H4 : Case m4 Q Fs = App (Lam m0) n,
                   let H5 : False :=
                     eq_ind (Case m4 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (App (Lam m0) n) H4 in
                   False_ind
                     (Case m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q Fs = App (Lam m0) n) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q Fs = App (Lam m0) n,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (App (Lam m0) n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0)
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m4 Q Fs = App (Lam m0) n) (H3 : DCase m'0 Q' Fs' = m3),
                (λ H4 : DCase m4 Q Fs = App (Lam m0) n,
                   let H5 : False :=
                     eq_ind (DCase m4 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (App (Lam m0) n) H4 in
                   False_ind
                     (DCase m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q Fs = App (Lam m0) n) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q Fs = App (Lam m0) n,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (App (Lam m0) n) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m'0 : term, pstep m'.[n'/] m'0 ∧ pstep m3 m'0)
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = App (Lam m0) n) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = App (Lam m0) n,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (App (Lam m0) n) H2 in
                   False_ind
                     (Fix m'0 = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1) H3)
                  H0 H1 H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = App (Lam m0) n) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = App (Lam m0) n,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (App (Lam m0) n) H2 in
                   False_ind
                     (m'0.[Fix m'0/] = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep m'.[n'/] m'1 ∧ pstep m3 m'1)
                     H3) H0 H1 H
          end in
        H (erefl (App (Lam m0) n)) (erefl m3))
     (λ (A A' : term) (s : sort) (B B' : term) (_ : pstep A A') (ih1 : ∀ m3 : term,
                                                                         pstep A m3
                                                                         → ∃ m' : term,
                                                                             pstep A' m' ∧ pstep m3 m') 
        (_ : pstep B B') (ih2 : ∀ m3 : term, pstep B m3 → ∃ m' : term, pstep B' m' ∧ pstep m3 m') 
        (m3 : term) (p3 : pstep (Prod A B s) m3),
        let H : Prod A B s = Prod A B s → m3 = m3 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m' :=
          match
            p3 in (pstep t t0)
            return (t = Prod A B s → t0 = m3 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Prod A B s) (H0 : Var x = m3),
                (λ H1 : Var x = Prod A B s,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Prod A B s) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Prod A B s) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Prod A B s,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Prod A B s) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m') H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Prod A B s) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Prod A B s,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Prod A B s) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m0 m' n n' H H0 =>
              λ (H1 : App m0 n = Prod A B s) (H2 : App m' n' = m3),
                (λ H3 : App m0 n = Prod A B s,
                   let H4 : False :=
                     eq_ind (App m0 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Prod A B s) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Beta m0 m' n n' H H0 =>
              λ (H1 : App (Lam m0) n = Prod A B s) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m0) n = Prod A B s,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Prod A B s) H3 in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Prod A0 A'0 s0 B0 B'0 H H0 =>
              λ (H1 : Prod A0 B0 s0 = Prod A B s) (H2 : Prod A'0 B'0 s0 = m3),
                (λ H3 : Prod A0 B0 s0 = Prod A B s,
                   let H4 : s0 = s :=
                     f_equal (λ e : term, match e with
                                          | Prod _ _ s1 => s1
                                          | _ => s0
                                          end) H3 in
                   (let H5 : B0 = B :=
                      f_equal (λ e : term, match e with
                                           | Prod _ B1 _ => B1
                                           | _ => B0
                                           end) H3 in
                    (let H6 : A0 = A :=
                       f_equal (λ e : term, match e with
                                            | Prod A1 _ _ => A1
                                            | _ => A0
                                            end) H3 in
                     (λ H7 : A0 = A,
                        let H8 : A0 = A := H7 in
                        eq_ind_r
                          (λ t : term,
                             B0 = B
                             → s0 = s
                               → Prod A'0 B'0 s0 = m3
                                 → pstep t A'0
                                   → pstep B0 B'0 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
                          (λ H9 : B0 = B,
                             let H10 : B0 = B := H9 in
                             eq_ind_r
                               (λ t : term,
                                  s0 = s
                                  → Prod A'0 B'0 s0 = m3
                                    → pstep A A'0
                                      → pstep t B'0 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
                               (λ H11 : s0 = s,
                                  let H12 : s0 = s := H11 in
                                  eq_ind_r
                                    (λ s1 : sort,
                                       Prod A'0 B'0 s1 = m3
                                       → pstep A A'0
                                         → pstep B B'0
                                           → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
                                    (λ H13 : Prod A'0 B'0 s = m3,
                                       let H14 : Prod A'0 B'0 s = m3 := H13 in
                                       eq_ind (Prod A'0 B'0 s)
                                         (λ t : term,
                                            pstep A A'0
                                            → pstep B B'0
                                              → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep t m')
                                         (λ (H15 : pstep A A'0) (H16 : pstep B B'0),
                                            (λ _view_subject_ : pstep A A'0,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (ih1 A'0 _view_subject_)) H15) m3 H14) H12) H10) H8) H6)
                      H5) H4) H1 H2 H H0
          | @pstep_Lolli A0 A'0 s0 B0 B'0 H H0 =>
              λ (H1 : Lolli A0 B0 s0 = Prod A B s) (H2 : Lolli A'0 B'0 s0 = m3),
                (λ H3 : Lolli A0 B0 s0 = Prod A B s,
                   let H4 : False :=
                     eq_ind (Lolli A0 B0 s0)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Prod A B s) H3 in
                   False_ind
                     (Lolli A'0 B'0 s0 = m3
                      → pstep A0 A'0 → pstep B0 B'0 → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Ind A0 A'0 s0 Cs Cs' H H0 =>
              λ (H1 : Ind A0 s0 Cs = Prod A B s) (H2 : Ind A'0 s0 Cs' = m3),
                (λ H3 : Ind A0 s0 Cs = Prod A B s,
                   let H4 : False :=
                     eq_ind (Ind A0 s0 Cs) (λ e : term, match e with
                                                        | Ind _ _ _ => True
                                                        | _ => False
                                                        end) I (Prod A B s) H3 in
                   False_ind
                     (Ind A'0 s0 Cs' = m3
                      → pstep A0 A'0 → pstep' Cs Cs' → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Prod A B s) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Prod A B s,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Prod A B s) H2 in
                   False_ind
                     (Constr i m' = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Prod A B s) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Prod A B s,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Prod A B s) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Prod A B s) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Prod A B s,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Prod A B s) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m') H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Prod A B s) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Prod A B s,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Prod A B s) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Prod A B s) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Prod A B s,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Prod A B s) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Prod A' B' s) m' ∧ pstep m3 m') H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Prod A B s) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Prod A B s,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Prod A B s) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Prod A B s) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Prod A B s,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Prod A B s) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Prod A' B' s) m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (Prod A B s)) (erefl m3))
     (λ (A A' : term) (s : sort) (B B' : term) (_ : pstep A A') (ih1 : ∀ m3 : term,
                                                                         pstep A m3
                                                                         → ∃ m' : term,
                                                                             pstep A' m' ∧ pstep m3 m') 
        (_ : pstep B B') (ih2 : ∀ m3 : term, pstep B m3 → ∃ m' : term, pstep B' m' ∧ pstep m3 m') 
        (m3 : term) (p3 : pstep (Lolli A B s) m3),
        let H :
          Lolli A B s = Lolli A B s → m3 = m3 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m' :=
          match
            p3 in (pstep t t0)
            return (t = Lolli A B s → t0 = m3 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Lolli A B s) (H0 : Var x = m3),
                (λ H1 : Var x = Lolli A B s,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Lolli A B s) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Lolli A B s) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Lolli A B s,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Lolli A B s) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m') H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Lolli A B s) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Lolli A B s,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Lolli A B s) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m0 m' n n' H H0 =>
              λ (H1 : App m0 n = Lolli A B s) (H2 : App m' n' = m3),
                (λ H3 : App m0 n = Lolli A B s,
                   let H4 : False :=
                     eq_ind (App m0 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Lolli A B s) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Beta m0 m' n n' H H0 =>
              λ (H1 : App (Lam m0) n = Lolli A B s) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m0) n = Lolli A B s,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Lolli A B s) H3 in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Prod A0 A'0 s0 B0 B'0 H H0 =>
              λ (H1 : Prod A0 B0 s0 = Lolli A B s) (H2 : Prod A'0 B'0 s0 = m3),
                (λ H3 : Prod A0 B0 s0 = Lolli A B s,
                   let H4 : False :=
                     eq_ind (Prod A0 B0 s0)
                       (λ e : term, match e with
                                    | Prod _ _ _ => True
                                    | _ => False
                                    end) I (Lolli A B s) H3 in
                   False_ind
                     (Prod A'0 B'0 s0 = m3
                      → pstep A0 A'0 → pstep B0 B'0 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Lolli A0 A'0 s0 B0 B'0 H H0 =>
              λ (H1 : Lolli A0 B0 s0 = Lolli A B s) (H2 : Lolli A'0 B'0 s0 = m3),
                (λ H3 : Lolli A0 B0 s0 = Lolli A B s,
                   let H4 : s0 = s :=
                     f_equal (λ e : term, match e with
                                          | Lolli _ _ s1 => s1
                                          | _ => s0
                                          end) H3 in
                   (let H5 : B0 = B :=
                      f_equal (λ e : term, match e with
                                           | Lolli _ B1 _ => B1
                                           | _ => B0
                                           end) H3 in
                    (let H6 : A0 = A :=
                       f_equal (λ e : term, match e with
                                            | Lolli A1 _ _ => A1
                                            | _ => A0
                                            end) H3 in
                     (λ H7 : A0 = A,
                        let H8 : A0 = A := H7 in
                        eq_ind_r
                          (λ t : term,
                             B0 = B
                             → s0 = s
                               → Lolli A'0 B'0 s0 = m3
                                 → pstep t A'0
                                   → pstep B0 B'0 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
                          (λ H9 : B0 = B,
                             let H10 : B0 = B := H9 in
                             eq_ind_r
                               (λ t : term,
                                  s0 = s
                                  → Lolli A'0 B'0 s0 = m3
                                    → pstep A A'0
                                      → pstep t B'0 → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
                               (λ H11 : s0 = s,
                                  let H12 : s0 = s := H11 in
                                  eq_ind_r
                                    (λ s1 : sort,
                                       Lolli A'0 B'0 s1 = m3
                                       → pstep A A'0
                                         → pstep B B'0
                                           → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
                                    (λ H13 : Lolli A'0 B'0 s = m3,
                                       let H14 : Lolli A'0 B'0 s = m3 := H13 in
                                       eq_ind (Lolli A'0 B'0 s)
                                         (λ t : term,
                                            pstep A A'0
                                            → pstep B B'0
                                              → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep t m')
                                         (λ (H15 : pstep A A'0) (H16 : pstep B B'0),
                                            (λ _view_subject_ : pstep A A'0,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (ih1 A'0 _view_subject_)) H15) m3 H14) H12) H10) H8) H6)
                      H5) H4) H1 H2 H H0
          | @pstep_Ind A0 A'0 s0 Cs Cs' H H0 =>
              λ (H1 : Ind A0 s0 Cs = Lolli A B s) (H2 : Ind A'0 s0 Cs' = m3),
                (λ H3 : Ind A0 s0 Cs = Lolli A B s,
                   let H4 : False :=
                     eq_ind (Ind A0 s0 Cs) (λ e : term, match e with
                                                        | Ind _ _ _ => True
                                                        | _ => False
                                                        end) I (Lolli A B s) H3 in
                   False_ind
                     (Ind A'0 s0 Cs' = m3
                      → pstep A0 A'0 → pstep' Cs Cs' → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Lolli A B s) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Lolli A B s,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Lolli A B s) H2 in
                   False_ind
                     (Constr i m' = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Lolli A B s) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Lolli A B s,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Lolli A B s) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Lolli A B s) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Lolli A B s,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Lolli A B s) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m') H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Lolli A B s) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Lolli A B s,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Lolli A B s) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Lolli A B s) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Lolli A B s,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Lolli A B s) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Lolli A' B' s) m' ∧ pstep m3 m') H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Lolli A B s) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Lolli A B s,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Lolli A B s) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Lolli A B s) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Lolli A B s,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Lolli A B s) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Lolli A' B' s) m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (Lolli A B s)) (erefl m3))
     (λ (A A' : term) (s : sort) (Cs Cs' : terms) (_ : pstep A A') (ih : ∀ m3 : term,
                                                                           pstep A m3
                                                                           → ∃ m' : term,
                                                                             pstep A' m' ∧ pstep m3 m') 
        (p2 : pstep' Cs Cs') (m3 : term) (p3 : pstep (Ind A s Cs) m3),
        let H : Ind A s Cs = Ind A s Cs → m3 = m3 → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m' :=
          match
            p3 in (pstep t t0)
            return (t = Ind A s Cs → t0 = m3 → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Ind A s Cs) (H0 : Var x = m3),
                (λ H1 : Var x = Ind A s Cs,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Ind A s Cs) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Ind A s Cs) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Ind A s Cs,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Ind A s Cs) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Ind A s Cs) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Ind A s Cs,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Ind A s Cs) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m0 m' n n' H H0 =>
              λ (H1 : App m0 n = Ind A s Cs) (H2 : App m' n' = m3),
                (λ H3 : App m0 n = Ind A s Cs,
                   let H4 : False :=
                     eq_ind (App m0 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Ind A s Cs) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Beta m0 m' n n' H H0 =>
              λ (H1 : App (Lam m0) n = Ind A s Cs) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m0) n = Ind A s Cs,
                   let H4 : False :=
                     eq_ind (App (Lam m0) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Ind A s Cs) H3 in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m0 m' → pstep n n' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Prod A0 A'0 s0 B B' H H0 =>
              λ (H1 : Prod A0 B s0 = Ind A s Cs) (H2 : Prod A'0 B' s0 = m3),
                (λ H3 : Prod A0 B s0 = Ind A s Cs,
                   let H4 : False :=
                     eq_ind (Prod A0 B s0)
                       (λ e : term, match e with
                                    | Prod _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H3 in
                   False_ind
                     (Prod A'0 B' s0 = m3
                      → pstep A0 A'0 → pstep B B' → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Lolli A0 A'0 s0 B B' H H0 =>
              λ (H1 : Lolli A0 B s0 = Ind A s Cs) (H2 : Lolli A'0 B' s0 = m3),
                (λ H3 : Lolli A0 B s0 = Ind A s Cs,
                   let H4 : False :=
                     eq_ind (Lolli A0 B s0)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H3 in
                   False_ind
                     (Lolli A'0 B' s0 = m3
                      → pstep A0 A'0 → pstep B B' → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Ind A0 A'0 s0 Cs0 Cs'0 H H0 =>
              λ (H1 : Ind A0 s0 Cs0 = Ind A s Cs) (H2 : Ind A'0 s0 Cs'0 = m3),
                (λ H3 : Ind A0 s0 Cs0 = Ind A s Cs,
                   let H4 : Cs0 = Cs :=
                     f_equal (λ e : term, match e with
                                          | Ind _ _ Cs1 => Cs1
                                          | _ => Cs0
                                          end) H3 in
                   (let H5 : s0 = s :=
                      f_equal (λ e : term, match e with
                                           | Ind _ s1 _ => s1
                                           | _ => s0
                                           end) H3 in
                    (let H6 : A0 = A :=
                       f_equal (λ e : term, match e with
                                            | Ind A1 _ _ => A1
                                            | _ => A0
                                            end) H3 in
                     (λ H7 : A0 = A,
                        let H8 : A0 = A := H7 in
                        eq_ind_r
                          (λ t : term,
                             s0 = s
                             → Cs0 = Cs
                               → Ind A'0 s0 Cs'0 = m3
                                 → pstep t A'0
                                   → pstep' Cs0 Cs'0 → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m')
                          (λ H9 : s0 = s,
                             let H10 : s0 = s := H9 in
                             eq_ind_r
                               (λ s1 : sort,
                                  Cs0 = Cs
                                  → Ind A'0 s1 Cs'0 = m3
                                    → pstep A A'0
                                      → pstep' Cs0 Cs'0
                                        → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m')
                               (λ H11 : Cs0 = Cs,
                                  let H12 : Cs0 = Cs := H11 in
                                  eq_ind_r
                                    (λ t : terms,
                                       Ind A'0 s Cs'0 = m3
                                       → pstep A A'0
                                         → pstep' t Cs'0
                                           → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m')
                                    (λ H13 : Ind A'0 s Cs'0 = m3,
                                       let H14 : Ind A'0 s Cs'0 = m3 := H13 in
                                       eq_ind (Ind A'0 s Cs'0)
                                         (λ t : term,
                                            pstep A A'0
                                            → pstep' Cs Cs'0
                                              → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep t m')
                                         (λ (H15 : pstep A A'0) (H16 : pstep' Cs Cs'0),
                                            (λ _view_subject_ : pstep A A'0,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (ih A'0 _view_subject_)) H15) m3 H14) H12) H10) H8) H6)
                      H5) H4) H1 H2 H H0
          | @pstep_Constr i m0 m' H =>
              λ (H0 : Constr i m0 = Ind A s Cs) (H1 : Constr i m' = m3),
                (λ H2 : Constr i m0 = Ind A s Cs,
                   let H3 : False :=
                     eq_ind (Constr i m0) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Ind A s Cs) H2 in
                   False_ind
                     (Constr i m' = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          | @pstep_Case m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m0 Q Fs = Ind A s Cs) (H3 : Case m' Q' Fs' = m3),
                (λ H4 : Case m0 Q Fs = Ind A s Cs,
                   let H5 : False :=
                     eq_ind (Case m0 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H4 in
                   False_ind
                     (Case m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_CaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m0) ms) Q Fs = Ind A s Cs) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m0) ms) Q Fs = Ind A s Cs,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_DCase m0 m' Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m0 Q Fs = Ind A s Cs) (H3 : DCase m' Q' Fs' = m3),
                (λ H4 : DCase m0 Q Fs = Ind A s Cs,
                   let H5 : False :=
                     eq_ind (DCase m0 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H4 in
                   False_ind
                     (DCase m' Q' Fs' = m3
                      → pstep m0 m'
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0) H5) H2
                  H3 H H0 H1
          | @pstep_DCaseIota i m0 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m0) ms) Q Fs = Ind A s Cs) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m0) ms) Q Fs = Ind A s Cs,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m0) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Ind A s Cs) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m' : term, pstep (Ind A' s Cs') m' ∧ pstep m3 m') H7) H4 H5
                  H H0 H1 H2 H3
          | @pstep_Fix m0 m' H =>
              λ (H0 : Fix m0 = Ind A s Cs) (H1 : Fix m' = m3),
                (λ H2 : Fix m0 = Ind A s Cs,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Ind A s Cs) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m0 m' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m0 m' H =>
              λ (H0 : Fix m0 = Ind A s Cs) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m0 = Ind A s Cs,
                   let H3 : False :=
                     eq_ind (Fix m0) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Ind A s Cs) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m0 m' → ∃ m'0 : term, pstep (Ind A' s Cs') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (Ind A s Cs)) (erefl m3))
     (λ (i : nat) (m0 m' : term) (_ : pstep m0 m') (ih : ∀ m3 : term,
                                                           pstep m0 m3
                                                           → ∃ m'0 : term, pstep m' m'0 ∧ pstep m3 m'0) 
        (m3 : term) (p2 : pstep (Constr i m0) m3),
        let H :
          Constr i m0 = Constr i m0 → m3 = m3 → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0 :=
          match
            p2 in (pstep t t0)
            return (t = Constr i m0 → t0 = m3 → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = Constr i m0) (H0 : Var x = m3),
                (λ H1 : Var x = Constr i m0,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Constr i m0) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Constr i m0) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Constr i m0,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Constr i m0) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H2)
                  H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Constr i m0) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Constr i m0,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Constr i m0) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_App m4 m'0 n n' H H0 =>
              λ (H1 : App m4 n = Constr i m0) (H2 : App m'0 n' = m3),
                (λ H3 : App m4 n = Constr i m0,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Constr i m0) H3 in
                   False_ind
                     (App m'0 n' = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1)
                     H4) H1 H2 H H0
          | @pstep_Beta m4 m'0 n n' H H0 =>
              λ (H1 : App (Lam m4) n = Constr i m0) (H2 : m'0.[n'/] = m3),
                (λ H3 : App (Lam m4) n = Constr i m0,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Constr i m0) H3 in
                   False_ind
                     (m'0.[n'/] = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1)
                     H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Constr i m0) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Constr i m0,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Constr i m0) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Constr i m0) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Constr i m0,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Constr i m0) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Constr i m0) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Constr i m0,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Constr i m0) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Constr i0 m4 m'0 H =>
              λ (H0 : Constr i0 m4 = Constr i m0) (H1 : Constr i0 m'0 = m3),
                (λ H2 : Constr i0 m4 = Constr i m0,
                   let H3 : m4 = m0 :=
                     f_equal (λ e : term, match e with
                                          | Constr _ m5 => m5
                                          | _ => m4
                                          end) H2 in
                   (let H4 : i0 = i :=
                      f_equal (λ e : term, match e with
                                           | Constr i1 _ => i1
                                           | _ => i0
                                           end) H2 in
                    (λ H5 : i0 = i,
                       let H6 : i0 = i := H5 in
                       eq_ind_r
                         (λ n : nat,
                            m4 = m0
                            → Constr n m'0 = m3
                              → pstep m4 m'0 → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1)
                         (λ H7 : m4 = m0,
                            let H8 : m4 = m0 := H7 in
                            eq_ind_r
                              (λ t : term,
                                 Constr i m'0 = m3
                                 → pstep t m'0 → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1)
                              (λ H9 : Constr i m'0 = m3,
                                 let H10 : Constr i m'0 = m3 := H9 in
                                 eq_ind (Constr i m'0)
                                   (λ t : term,
                                      pstep m0 m'0 → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep t m'1)
                                   [eta λ _view_subject_ : pstep m0 m'0,
                                          (λ __top_assumption_ : ∃ m'1 : term,
                                                                   pstep m' m'1 ∧ pstep m'0 m'1,
                                             (λ _evar_0_ : ∀ (x : term) (p0 : 
                                                                         (λ m'1 : term,
                                                                            pstep m' m'1 ∧ pstep m'0 m'1)
                                                                           x),
                                                             (λ _ : ∃ ..., ... ∧ ...,
                                                                ∃ m'1 : term,
                                                                  pstep (...) m'1 ∧ pstep (...) m'1)
                                                               (ex_intro
                                                                  (λ m'1 : term,
                                                                     pstep m' m'1 ∧ pstep m'0 m'1) x p0),
                                                match
                                                  __top_assumption_ as e
                                                  return ((λ _ : ..., ∃ ..., ... ∧ ...) e)
                                                with
                                                | @ex_intro _ _ x x0 => _evar_0_ x x0
                                                end)
                                               (λ (m'1 : term) (__top_assumption_0 : 
                                                                pstep m' m'1 ∧ 
                                                                pstep m'0 m'1),
                                                  (λ _evar_0_ : ∀ (a : pstep m' m'1) (b : pstep m'0 m'1),
                                                                  (λ ..., ..., ...) (conj a b),
                                                     match __top_assumption_0 as a return ((...) a) with
                                                     | conj x x0 => _evar_0_ x x0
                                                     end)
                                                    (λ (p3 : pstep m' m'1) (p4 : pstep m'0 m'1),
                                                       ex_intro
                                                         (λ m'2 : term,
                                                            pstep (Constr i m') m'2
                                                            ∧ pstep (Constr i m'0) m'2) 
                                                         (Constr i m'1)
                                                         (conj (pstep_Constr i p3) (pstep_Constr i p4)))))
                                            (ih m'0 _view_subject_)] m3 H10) H8) H6) H4) H3) H0 H1 H
          | @pstep_Case m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m4 Q Fs = Constr i m0) (H3 : Case m'0 Q' Fs' = m3),
                (λ H4 : Case m4 Q Fs = Constr i m0,
                   let H5 : False :=
                     eq_ind (Case m4 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Constr i m0) H4 in
                   False_ind
                     (Case m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1) H5) H2
                  H3 H H0 H1
          | @pstep_CaseIota i0 m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i0 m4) ms) Q Fs = Constr i m0) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i0 m4) ms) Q Fs = Constr i m0,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i0 m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Constr i m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i0 Fs F
                        → iget i0 Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m4 Q Fs = Constr i m0) (H3 : DCase m'0 Q' Fs' = m3),
                (λ H4 : DCase m4 Q Fs = Constr i m0,
                   let H5 : False :=
                     eq_ind (DCase m4 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Constr i m0) H4 in
                   False_ind
                     (DCase m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q'
                          → pstep' Fs Fs' → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1) H5) H2
                  H3 H H0 H1
          | @pstep_DCaseIota i0 m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i0 m4) ms) Q Fs = Constr i m0) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i0 m4) ms) Q Fs = Constr i m0,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i0 m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Constr i m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i0 Fs F
                        → iget i0 Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep (Constr i m') m'0 ∧ pstep m3 m'0) H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = Constr i m0) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = Constr i m0,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Constr i m0) H2 in
                   False_ind
                     (Fix m'0 = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1)
                     H3) H0 H1 H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = Constr i m0) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = Constr i m0,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Constr i m0) H2 in
                   False_ind
                     (m'0.[Fix m'0/] = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (Constr i m') m'1 ∧ pstep m3 m'1) H3) H0 H1 H
          end in
        H (erefl (Constr i m0)) (erefl m3))
     (λ (m0 m' Q Q' : term) (Fs Fs' : terms) (p1 : pstep m0 m') (ih1 : ∀ m3 : term,
                                                                         pstep m0 m3
                                                                         → ∃ m'0 : term,
                                                                             pstep m' m'0 ∧ pstep m3 m'0) 
        (_ : pstep Q Q') (ih2 : ∀ m3 : term, pstep Q m3 → ∃ m'0 : term, pstep Q' m'0 ∧ pstep m3 m'0) 
        (p3 : pstep' Fs Fs') (m3 : term) (p4 : pstep (Case m0 Q Fs) m3),
        let H :
          Case m0 Q Fs = Case m0 Q Fs → m3 = m3 → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0 :=
          match
            p4 in (pstep t t0)
            return (t = Case m0 Q Fs → t0 = m3 → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = Case m0 Q Fs) (H0 : Var x = m3),
                (λ H1 : Var x = Case m0 Q Fs,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Case m0 Q Fs) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0) H2) H
                  H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Case m0 Q Fs) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Case m0 Q Fs,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Case m0 Q Fs) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H2) H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Case m0 Q Fs) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Case m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Case m0 Q Fs) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_App m4 m'0 n n' H H0 =>
              λ (H1 : App m4 n = Case m0 Q Fs) (H2 : App m'0 n' = m3),
                (λ H3 : App m4 n = Case m0 Q Fs,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Case m0 Q Fs) H3 in
                   False_ind
                     (App m'0 n' = m3
                      → pstep m4 m'0
                        → pstep n n' → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H4) H1 H2
                  H H0
          | @pstep_Beta m4 m'0 n n' H H0 =>
              λ (H1 : App (Lam m4) n = Case m0 Q Fs) (H2 : m'0.[n'/] = m3),
                (λ H3 : App (Lam m4) n = Case m0 Q Fs,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Case m0 Q Fs) H3 in
                   False_ind
                     (m'0.[n'/] = m3
                      → pstep m4 m'0
                        → pstep n n' → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H4) H1 H2
                  H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Case m0 Q Fs) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Case m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Case m0 Q Fs) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Case m0 Q Fs) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Case m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Case m0 Q Fs) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Case m0 Q Fs) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Case m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Case m0 Q Fs) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A'
                        → pstep' Cs Cs' → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = Case m0 Q Fs) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = Case m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Case m0 Q Fs) H2 in
                   False_ind
                     (Constr i m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          | @pstep_Case m4 m'0 Q0 Q'0 Fs0 Fs'0 H H0 H1 =>
              λ (H2 : Case m4 Q0 Fs0 = Case m0 Q Fs) (H3 : Case m'0 Q'0 Fs'0 = m3),
                (λ H4 : Case m4 Q0 Fs0 = Case m0 Q Fs,
                   let H5 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | Case _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H4 in
                   (let H6 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | Case _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H4 in
                    (let H7 : m4 = m0 :=
                       f_equal (λ e : term, match e with
                                            | Case m5 _ _ => m5
                                            | _ => m4
                                            end) H4 in
                     (λ H8 : m4 = m0,
                        let H9 : m4 = m0 := H8 in
                        eq_ind_r
                          (λ t : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → Case m'0 Q'0 Fs'0 = m3
                                 → pstep t m'0
                                   → pstep Q0 Q'0
                                     → pstep' Fs0 Fs'0
                                       → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1)
                          (λ H10 : Q0 = Q,
                             let H11 : Q0 = Q := H10 in
                             eq_ind_r
                               (λ t : term,
                                  Fs0 = Fs
                                  → Case m'0 Q'0 Fs'0 = m3
                                    → pstep m0 m'0
                                      → pstep t Q'0
                                        → pstep' Fs0 Fs'0
                                          → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1)
                               (λ H12 : Fs0 = Fs,
                                  let H13 : Fs0 = Fs := H12 in
                                  eq_ind_r
                                    (λ t : terms,
                                       Case m'0 Q'0 Fs'0 = m3
                                       → pstep m0 m'0
                                         → pstep Q Q'0
                                           → pstep' t Fs'0
                                             → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1)
                                    (λ H14 : Case m'0 Q'0 Fs'0 = m3,
                                       let H15 : Case m'0 Q'0 Fs'0 = m3 := H14 in
                                       eq_ind (Case m'0 Q'0 Fs'0)
                                         (λ t : term,
                                            pstep m0 m'0
                                            → pstep Q Q'0
                                              → pstep' Fs Fs'0
                                                → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep t m'1)
                                         (λ (H16 : pstep m0 m'0) (H17 : pstep Q Q'0) 
                                            (H18 : pstep' Fs Fs'0),
                                            (λ _view_subject_ : pstep m0 m'0,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (ih1 m'0 _view_subject_)) H16) m3 H15) H13) H11) H9) H7)
                      H6) H5) H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q0 Fs0 Fs'0 F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q0 Fs0 = Case m0 Q Fs) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q0 Fs0 = Case m0 Q Fs,
                   let H7 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | Case _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H6 in
                   (let H8 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | Case _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H6 in
                    (let H9 : spine (Constr i m4) ms = m0 :=
                       f_equal
                         (λ e : term,
                            match e with
                            | Case m5 _ _ => m5
                            | _ =>
                                (fix spine (h : term) (ls : terms) {struct ls} : term :=
                                   match ls with
                                   | Nil => h
                                   | Cons m5 ls0 => spine (App h m5) ls0
                                   end) (Constr i m4) ms
                            end) H6 in
                     (λ H10 : spine (Constr i m4) ms = m0,
                        let H11 : spine (Constr i m4) ms = m0 := H10 in
                        eq_ind (spine (Constr i m4) ms)
                          (λ _ : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → spine F' ms' = m3
                                 → iget i Fs0 F
                                   → iget i Fs'0 F'
                                     → pstep' ms ms'
                                       → pstep' Fs0 Fs'0
                                         → pstep F F'
                                           → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                          (λ H12 : Q0 = Q,
                             let H13 : Q0 = Q := H12 in
                             eq_ind_r
                               (λ _ : term,
                                  Fs0 = Fs
                                  → spine F' ms' = m3
                                    → iget i Fs0 F
                                      → iget i Fs'0 F'
                                        → pstep' ms ms'
                                          → pstep' Fs0 Fs'0
                                            → pstep F F'
                                              → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                               (λ H14 : Fs0 = Fs,
                                  let H15 : Fs0 = Fs := H14 in
                                  eq_ind_r
                                    (λ t : terms,
                                       spine F' ms' = m3
                                       → iget i t F
                                         → iget i Fs'0 F'
                                           → pstep' ms ms'
                                             → pstep' t Fs'0
                                               → pstep F F'
                                                 → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0)
                                    (λ H16 : spine F' ms' = m3,
                                       let H17 : spine F' ms' = m3 := H16 in
                                       eq_ind (spine F' ms')
                                         (λ t : term,
                                            iget i Fs F
                                            → iget i Fs'0 F'
                                              → pstep' ms ms'
                                                → pstep' Fs Fs'0
                                                  → pstep F F' → ∃ m'0 : term, pstep ... m'0 ∧ pstep t m'0)
                                         (λ (_ : iget i Fs F) (H19 : iget i Fs'0 F') 
                                            (H20 : pstep' ms ms') (H21 : pstep' Fs Fs'0) 
                                            (_ : pstep F F'),
                                            eq_ind (spine (Constr i m4) ms)
                                              (λ m5 : term,
                                                 pstep m5 m'
                                                 → (∀ ..., ... → ...)
                                                   → ∃ m'0 : term, pstep ... m'0 ∧ pstep ... m'0)
                                              (λ (p5 : pstep (spine ... ms) m') 
                                                 (_ : ∀ m5 : term, pstep ... m5 → ..., ...),
                                                 ssr_have (¬ (∃ ..., ... = ...))
                                                   (λ __top_assumption_ : ..., (...) (...))
                                                   (λ pf : ¬ ..., (...) p5)) m0 H10 p1 ih1) m3 H17) H15)
                               H13) m0 H11) H9) H8) H7) H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q0 Q'0 Fs0 Fs'0 H H0 H1 =>
              λ (H2 : DCase m4 Q0 Fs0 = Case m0 Q Fs) (H3 : DCase m'0 Q'0 Fs'0 = m3),
                (λ H4 : DCase m4 Q0 Fs0 = Case m0 Q Fs,
                   let H5 : False :=
                     eq_ind (DCase m4 Q0 Fs0)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Case m0 Q Fs) H4 in
                   False_ind
                     (DCase m'0 Q'0 Fs'0 = m3
                      → pstep m4 m'0
                        → pstep Q0 Q'0
                          → pstep' Fs0 Fs'0 → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q0 Fs0 Fs'0 F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q0 Fs0 = Case m0 Q Fs) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q0 Fs0 = Case m0 Q Fs,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m4) ms) Q0 Fs0)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Case m0 Q Fs) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs0 F
                        → iget i Fs'0 F'
                          → pstep' ms ms'
                            → pstep' Fs0 Fs'0
                              → pstep F F' → ∃ m'0 : term, pstep (Case m' Q' Fs') m'0 ∧ pstep m3 m'0) H7)
                  H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = Case m0 Q Fs) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = Case m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Case m0 Q Fs) H2 in
                   False_ind
                     (Fix m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = Case m0 Q Fs) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = Case m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Case m0 Q Fs) H2 in
                   False_ind
                     (m'0.[Fix m'0/] = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (Case m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          end in
        H (erefl (Case m0 Q Fs)) (erefl m3))
     (λ (i : nat) (m0 : term) (ms ms' : terms) (Q : term) (Fs Fs' : terms) (F F' : term) 
        (ig : iget i Fs F) (ig' : iget i Fs' F') (p1 : pstep' ms ms') (p2 : pstep' Fs Fs') 
        (_ : pstep F F') (ih : ∀ m3 : term, pstep F m3 → ∃ m' : term, pstep F' m' ∧ pstep m3 m') 
        (m3 : term) (p4 : pstep (Case (spine (Constr i m0) ms) Q Fs) m3),
        let H :
          Case (spine (Constr i m0) ms) Q Fs = Case (spine (Constr i m0) ms) Q Fs
          → m3 = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m' :=
          match
            p4 in (pstep t t0)
            return
              (t = Case (spine (Constr i m0) ms) Q Fs
               → t0 = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = Case (spine (Constr i m0) ms) Q Fs) (H0 : Var x = m3),
                (λ H1 : Var x = Case (spine (Constr i m0) ms) Q Fs,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Case (spine (Constr i m0) ms) Q Fs) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Case (spine (Constr i m0) ms) Q Fs) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Case (spine (Constr i m0) ms) Q Fs,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Case (spine (Constr i m0) ms) Q Fs) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Case (spine (Constr i m0) ms) Q Fs) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Case (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Case (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m4 m' n n' H H0 =>
              λ (H1 : App m4 n = Case (spine (Constr i m0) ms) Q Fs) (H2 : App m' n' = m3),
                (λ H3 : App m4 n = Case (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Case (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m4 m' → pstep n n' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Beta m4 m' n n' H H0 =>
              λ (H1 : App (Lam m4) n = Case (spine (Constr i m0) ms) Q Fs) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m4) n = Case (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Case (spine (Constr i m0) ms) Q Fs) H3
                     in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m4 m' → pstep n n' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Case (spine (Constr i m0) ms) Q Fs) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Case (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Case (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Case (spine (Constr i m0) ms) Q Fs) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Case (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Case (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Case (spine (Constr i m0) ms) Q Fs) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Case (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Case (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Constr i0 m4 m' H =>
              λ (H0 : Constr i0 m4 = Case (spine (Constr i m0) ms) Q Fs) (H1 : Constr i0 m' = m3),
                (λ H2 : Constr i0 m4 = Case (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Constr i0 m4)
                       (λ e : term, match e with
                                    | Constr _ _ => True
                                    | _ => False
                                    end) I (Case (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Constr i0 m' = m3
                      → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          | @pstep_Case m4 m' Q0 Q' Fs0 Fs'0 H H0 H1 =>
              λ (H2 : Case m4 Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs) (H3 : Case m' Q' Fs'0 = m3),
                (λ H4 : Case m4 Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs,
                   let H5 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | Case _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H4 in
                   (let H6 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | Case _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H4 in
                    (let H7 : m4 = spine (Constr i m0) ms :=
                       f_equal (λ e : term, match e with
                                            | Case m5 _ _ => m5
                                            | _ => m4
                                            end) H4 in
                     (λ H8 : m4 = spine (Constr i m0) ms,
                        let H9 : m4 = spine (Constr i m0) ms := H8 in
                        eq_ind_r
                          (λ t : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → Case m' Q' Fs'0 = m3
                                 → pstep t m'
                                   → pstep Q0 Q'
                                     → pstep' Fs0 Fs'0
                                       → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                          (λ H10 : Q0 = Q,
                             let H11 : Q0 = Q := H10 in
                             eq_ind_r
                               (λ t : term,
                                  Fs0 = Fs
                                  → Case m' Q' Fs'0 = m3
                                    → pstep (spine (Constr i m0) ms) m'
                                      → pstep t Q'
                                        → pstep' Fs0 Fs'0
                                          → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                               (λ H12 : Fs0 = Fs,
                                  let H13 : Fs0 = Fs := H12 in
                                  eq_ind_r
                                    (λ t : terms,
                                       Case m' Q' Fs'0 = m3
                                       → pstep (spine (Constr i m0) ms) m'
                                         → pstep Q Q'
                                           → pstep' t Fs'0
                                             → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                                    (λ H14 : Case m' Q' Fs'0 = m3,
                                       let H15 : Case m' Q' Fs'0 = m3 := H14 in
                                       eq_ind (Case m' Q' Fs'0)
                                         (λ t : term,
                                            pstep (spine (Constr i m0) ms) m'
                                            → pstep Q Q'
                                              → pstep' Fs Fs'0
                                                → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep t m'0)
                                         (λ (H16 : pstep (spine (Constr i m0) ms) m') 
                                            (_ : pstep Q Q') (H18 : pstep' Fs Fs'0),
                                            ssr_have (¬ (∃ m5 : term, Constr i m0 = Lam m5))
                                              (λ __top_assumption_ : ∃ m5 : term, Constr i m0 = Lam m5,
                                                 (λ _evar_0_ : ..., match ... with
                                                                    | ... ...
                                                                    end)
                                                   (λ (m5 : term) (e : ...),
                                                      let H19 : False := ... in False_ind False H19))
                                              (λ pf : ¬ (∃ ..., ... = ...),
                                                 (λ _view_subject_ : ..., (...) (...)) H16)) m3 H15) H13)
                               H11) H9) H7) H6) H5) H2 H3 H H0 H1
          | @pstep_CaseIota i0 m4 ms0 ms'0 Q0 Fs0 Fs'0 F0 F'0 H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i0 m4) ms0) Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs) 
                (H5 : spine F'0 ms'0 = m3),
                (λ H6 : Case (spine (Constr i0 m4) ms0) Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs,
                   let H7 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | Case _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H6 in
                   (let H8 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | Case _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H6 in
                    (let H9 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms :=
                       f_equal
                         (λ e : term,
                            match e with
                            | Case m5 _ _ => m5
                            | _ =>
                                (fix spine (h : term) (ls : terms) {struct ls} : term :=
                                   match ls with
                                   | Nil => h
                                   | Cons m5 ls0 => spine (App h m5) ls0
                                   end) (Constr i0 m4) ms0
                            end) H6 in
                     (λ H10 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms,
                        let H11 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms := H10 in
                        eq_ind (spine (Constr i0 m4) ms0)
                          (λ _ : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → spine F'0 ms'0 = m3
                                 → iget i0 Fs0 F0
                                   → iget i0 Fs'0 F'0
                                     → pstep' ms0 ms'0
                                       → pstep' Fs0 Fs'0
                                         → pstep F0 F'0
                                           → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                          (λ H12 : Q0 = Q,
                             let H13 : Q0 = Q := H12 in
                             eq_ind_r
                               (λ _ : term,
                                  Fs0 = Fs
                                  → spine F'0 ms'0 = m3
                                    → iget i0 Fs0 F0
                                      → iget i0 Fs'0 F'0
                                        → pstep' ms0 ms'0
                                          → pstep' Fs0 Fs'0
                                            → pstep F0 F'0
                                              → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                               (λ H14 : Fs0 = Fs,
                                  let H15 : Fs0 = Fs := H14 in
                                  eq_ind_r
                                    (λ t : terms,
                                       spine F'0 ms'0 = m3
                                       → iget i0 t F0
                                         → iget i0 Fs'0 F'0
                                           → pstep' ms0 ms'0
                                             → pstep' t Fs'0
                                               → pstep F0 F'0
                                                 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                                    (λ H16 : spine F'0 ms'0 = m3,
                                       let H17 : spine F'0 ms'0 = m3 := H16 in
                                       eq_ind (spine F'0 ms'0)
                                         (λ t : term,
                                            iget i0 Fs F0
                                            → iget i0 Fs'0 F'0
                                              → pstep' ms0 ms'0
                                                → pstep' Fs Fs'0
                                                  → pstep F0 F'0 → ∃ m' : term, pstep ... m' ∧ pstep t m')
                                         (λ (H18 : iget i0 Fs F0) (H19 : iget i0 Fs'0 F'0) 
                                            (H20 : pstep' ms0 ms'0) (H21 : pstep' Fs Fs'0) 
                                            (_ : pstep F0 F'0),
                                            (λ _view_subject_ : spine (...) ms0 = spine (...) ms,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (spine_Constr _view_subject_)) H10) m3 H17) H15) H13)
                          (spine (Constr i m0) ms) H11) H9) H8) H7) H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m' Q0 Q' Fs0 Fs'0 H H0 H1 =>
              λ (H2 : DCase m4 Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs) (H3 : DCase m' Q' Fs'0 = m3),
                (λ H4 : DCase m4 Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs,
                   let H5 : False :=
                     eq_ind (DCase m4 Q0 Fs0)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Case (spine (Constr i m0) ms) Q Fs) H4 in
                   False_ind
                     (DCase m' Q' Fs'0 = m3
                      → pstep m4 m'
                        → pstep Q0 Q'
                          → pstep' Fs0 Fs'0 → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i0 m4 ms0 ms'0 Q0 Fs0 Fs'0 F0 F'0 H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i0 m4) ms0) Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs) 
                (H5 : spine F'0 ms'0 = m3),
                (λ H6 : DCase (spine (Constr i0 m4) ms0) Q0 Fs0 = Case (spine (Constr i m0) ms) Q Fs,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i0 m4) ms0) Q0 Fs0)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Case (spine (Constr i m0) ms) Q Fs) H6 in
                   False_ind
                     (spine F'0 ms'0 = m3
                      → iget i0 Fs0 F0
                        → iget i0 Fs'0 F'0
                          → pstep' ms0 ms'0
                            → pstep' Fs0 Fs'0
                              → pstep F0 F'0 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m' H =>
              λ (H0 : Fix m4 = Case (spine (Constr i m0) ms) Q Fs) (H1 : Fix m' = m3),
                (λ H2 : Fix m4 = Case (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Case (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m4 m' H =>
              λ (H0 : Fix m4 = Case (spine (Constr i m0) ms) Q Fs) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m4 = Case (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (Case (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (Case (spine (Constr i m0) ms) Q Fs)) (erefl m3))
     (λ (m0 m' Q Q' : term) (Fs Fs' : terms) (p1 : pstep m0 m') (ih1 : ∀ m3 : term,
                                                                         pstep m0 m3
                                                                         → ∃ m'0 : term,
                                                                             pstep m' m'0 ∧ pstep m3 m'0) 
        (_ : pstep Q Q') (ih2 : ∀ m3 : term, pstep Q m3 → ∃ m'0 : term, pstep Q' m'0 ∧ pstep m3 m'0) 
        (p3 : pstep' Fs Fs') (m3 : term) (p4 : pstep (DCase m0 Q Fs) m3),
        let H :
          DCase m0 Q Fs = DCase m0 Q Fs
          → m3 = m3 → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0 :=
          match
            p4 in (pstep t t0)
            return
              (t = DCase m0 Q Fs → t0 = m3 → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = DCase m0 Q Fs) (H0 : Var x = m3),
                (λ H1 : Var x = DCase m0 Q Fs,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (DCase m0 Q Fs) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0) H2) H
                  H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = DCase m0 Q Fs) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = DCase m0 Q Fs,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (DCase m0 Q Fs) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H2) H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = DCase m0 Q Fs) (H1 : Lam n' = m3),
                (λ H2 : Lam n = DCase m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (DCase m0 Q Fs) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_App m4 m'0 n n' H H0 =>
              λ (H1 : App m4 n = DCase m0 Q Fs) (H2 : App m'0 n' = m3),
                (λ H3 : App m4 n = DCase m0 Q Fs,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (DCase m0 Q Fs) H3 in
                   False_ind
                     (App m'0 n' = m3
                      → pstep m4 m'0
                        → pstep n n' → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H4) H1 H2
                  H H0
          | @pstep_Beta m4 m'0 n n' H H0 =>
              λ (H1 : App (Lam m4) n = DCase m0 Q Fs) (H2 : m'0.[n'/] = m3),
                (λ H3 : App (Lam m4) n = DCase m0 Q Fs,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (DCase m0 Q Fs) H3 in
                   False_ind
                     (m'0.[n'/] = m3
                      → pstep m4 m'0
                        → pstep n n' → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H4) H1 H2
                  H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = DCase m0 Q Fs) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = DCase m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (DCase m0 Q Fs) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = DCase m0 Q Fs) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = DCase m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (DCase m0 Q Fs) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = DCase m0 Q Fs) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = DCase m0 Q Fs,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (DCase m0 Q Fs) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A'
                        → pstep' Cs Cs' → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = DCase m0 Q Fs) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = DCase m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (DCase m0 Q Fs) H2 in
                   False_ind
                     (Constr i m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          | @pstep_Case m4 m'0 Q0 Q'0 Fs0 Fs'0 H H0 H1 =>
              λ (H2 : Case m4 Q0 Fs0 = DCase m0 Q Fs) (H3 : Case m'0 Q'0 Fs'0 = m3),
                (λ H4 : Case m4 Q0 Fs0 = DCase m0 Q Fs,
                   let H5 : False :=
                     eq_ind (Case m4 Q0 Fs0)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (DCase m0 Q Fs) H4 in
                   False_ind
                     (Case m'0 Q'0 Fs'0 = m3
                      → pstep m4 m'0
                        → pstep Q0 Q'0
                          → pstep' Fs0 Fs'0 → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q0 Fs0 Fs'0 F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q0 Fs0 = DCase m0 Q Fs) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q0 Fs0 = DCase m0 Q Fs,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m4) ms) Q0 Fs0)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (DCase m0 Q Fs) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs0 F
                        → iget i Fs'0 F'
                          → pstep' ms ms'
                            → pstep' Fs0 Fs'0
                              → pstep F F' → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0) H7)
                  H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q0 Q'0 Fs0 Fs'0 H H0 H1 =>
              λ (H2 : DCase m4 Q0 Fs0 = DCase m0 Q Fs) (H3 : DCase m'0 Q'0 Fs'0 = m3),
                (λ H4 : DCase m4 Q0 Fs0 = DCase m0 Q Fs,
                   let H5 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | DCase _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H4 in
                   (let H6 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | DCase _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H4 in
                    (let H7 : m4 = m0 :=
                       f_equal (λ e : term, match e with
                                            | DCase m5 _ _ => m5
                                            | _ => m4
                                            end) H4 in
                     (λ H8 : m4 = m0,
                        let H9 : m4 = m0 := H8 in
                        eq_ind_r
                          (λ t : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → DCase m'0 Q'0 Fs'0 = m3
                                 → pstep t m'0
                                   → pstep Q0 Q'0
                                     → pstep' Fs0 Fs'0
                                       → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1)
                          (λ H10 : Q0 = Q,
                             let H11 : Q0 = Q := H10 in
                             eq_ind_r
                               (λ t : term,
                                  Fs0 = Fs
                                  → DCase m'0 Q'0 Fs'0 = m3
                                    → pstep m0 m'0
                                      → pstep t Q'0
                                        → pstep' Fs0 Fs'0
                                          → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1)
                               (λ H12 : Fs0 = Fs,
                                  let H13 : Fs0 = Fs := H12 in
                                  eq_ind_r
                                    (λ t : terms,
                                       DCase m'0 Q'0 Fs'0 = m3
                                       → pstep m0 m'0
                                         → pstep Q Q'0
                                           → pstep' t Fs'0
                                             → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1)
                                    (λ H14 : DCase m'0 Q'0 Fs'0 = m3,
                                       let H15 : DCase m'0 Q'0 Fs'0 = m3 := H14 in
                                       eq_ind (DCase m'0 Q'0 Fs'0)
                                         (λ t : term,
                                            pstep m0 m'0
                                            → pstep Q Q'0
                                              → pstep' Fs Fs'0
                                                → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep t m'1)
                                         (λ (H16 : pstep m0 m'0) (H17 : pstep Q Q'0) 
                                            (H18 : pstep' Fs Fs'0),
                                            (λ _view_subject_ : pstep m0 m'0,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (ih1 m'0 _view_subject_)) H16) m3 H15) H13) H11) H9) H7)
                      H6) H5) H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q0 Fs0 Fs'0 F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q0 Fs0 = DCase m0 Q Fs) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q0 Fs0 = DCase m0 Q Fs,
                   let H7 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | DCase _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H6 in
                   (let H8 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | DCase _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H6 in
                    (let H9 : spine (Constr i m4) ms = m0 :=
                       f_equal
                         (λ e : term,
                            match e with
                            | DCase m5 _ _ => m5
                            | _ =>
                                (fix spine (h : term) (ls : terms) {struct ls} : term :=
                                   match ls with
                                   | Nil => h
                                   | Cons m5 ls0 => spine (App h m5) ls0
                                   end) (Constr i m4) ms
                            end) H6 in
                     (λ H10 : spine (Constr i m4) ms = m0,
                        let H11 : spine (Constr i m4) ms = m0 := H10 in
                        eq_ind (spine (Constr i m4) ms)
                          (λ _ : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → spine F' ms' = m3
                                 → iget i Fs0 F
                                   → iget i Fs'0 F'
                                     → pstep' ms ms'
                                       → pstep' Fs0 Fs'0
                                         → pstep F F'
                                           → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                          (λ H12 : Q0 = Q,
                             let H13 : Q0 = Q := H12 in
                             eq_ind_r
                               (λ _ : term,
                                  Fs0 = Fs
                                  → spine F' ms' = m3
                                    → iget i Fs0 F
                                      → iget i Fs'0 F'
                                        → pstep' ms ms'
                                          → pstep' Fs0 Fs'0
                                            → pstep F F'
                                              → ∃ m'0 : term, pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                               (λ H14 : Fs0 = Fs,
                                  let H15 : Fs0 = Fs := H14 in
                                  eq_ind_r
                                    (λ t : terms,
                                       spine F' ms' = m3
                                       → iget i t F
                                         → iget i Fs'0 F'
                                           → pstep' ms ms'
                                             → pstep' t Fs'0
                                               → pstep F F'
                                                 → ∃ m'0 : term,
                                                     pstep (DCase m' Q' Fs') m'0 ∧ pstep m3 m'0)
                                    (λ H16 : spine F' ms' = m3,
                                       let H17 : spine F' ms' = m3 := H16 in
                                       eq_ind (spine F' ms')
                                         (λ t : term,
                                            iget i Fs F
                                            → iget i Fs'0 F'
                                              → pstep' ms ms'
                                                → pstep' Fs Fs'0
                                                  → pstep F F' → ∃ m'0 : term, pstep ... m'0 ∧ pstep t m'0)
                                         (λ (_ : iget i Fs F) (H19 : iget i Fs'0 F') 
                                            (H20 : pstep' ms ms') (H21 : pstep' Fs Fs'0) 
                                            (_ : pstep F F'),
                                            eq_ind (spine (Constr i m4) ms)
                                              (λ m5 : term,
                                                 pstep m5 m'
                                                 → (∀ ..., ... → ...)
                                                   → ∃ m'0 : term, pstep ... m'0 ∧ pstep ... m'0)
                                              (λ (p5 : pstep (spine ... ms) m') 
                                                 (_ : ∀ m5 : term, pstep ... m5 → ..., ...),
                                                 ssr_have (¬ (∃ ..., ... = ...))
                                                   (λ __top_assumption_ : ..., (...) (...))
                                                   (λ pf : ¬ ..., (...) p5)) m0 H10 p1 ih1) m3 H17) H15)
                               H13) m0 H11) H9) H8) H7) H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = DCase m0 Q Fs) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = DCase m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (DCase m0 Q Fs) H2 in
                   False_ind
                     (Fix m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = DCase m0 Q Fs) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = DCase m0 Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (DCase m0 Q Fs) H2 in
                   False_ind
                     (m'0.[Fix m'0/] = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep (DCase m' Q' Fs') m'1 ∧ pstep m3 m'1) H3) H0 H1
                  H
          end in
        H (erefl (DCase m0 Q Fs)) (erefl m3))
     (λ (i : nat) (m0 : term) (ms ms' : terms) (Q : term) (Fs Fs' : terms) (F F' : term) 
        (ig : iget i Fs F) (ig' : iget i Fs' F') (p1 : pstep' ms ms') (p2 : pstep' Fs Fs') 
        (_ : pstep F F') (ih : ∀ m3 : term, pstep F m3 → ∃ m' : term, pstep F' m' ∧ pstep m3 m') 
        (m3 : term) (p4 : pstep (DCase (spine (Constr i m0) ms) Q Fs) m3),
        let H :
          DCase (spine (Constr i m0) ms) Q Fs = DCase (spine (Constr i m0) ms) Q Fs
          → m3 = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m' :=
          match
            p4 in (pstep t t0)
            return
              (t = DCase (spine (Constr i m0) ms) Q Fs
               → t0 = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
          with
          | pstep_Var x =>
              λ (H : Var x = DCase (spine (Constr i m0) ms) Q Fs) (H0 : Var x = m3),
                (λ H1 : Var x = DCase (spine (Constr i m0) ms) Q Fs,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (DCase (spine (Constr i m0) ms) Q Fs) H1 in
                   False_ind (Var x = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = DCase (spine (Constr i m0) ms) Q Fs) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = DCase (spine (Constr i m0) ms) Q Fs,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (DCase (spine (Constr i m0) ms) Q Fs) H1 in
                   False_ind (Sort srt l = m3 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = DCase (spine (Constr i m0) ms) Q Fs) (H1 : Lam n' = m3),
                (λ H2 : Lam n = DCase (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (DCase (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H3)
                  H0 H1 H
          | @pstep_App m4 m' n n' H H0 =>
              λ (H1 : App m4 n = DCase (spine (Constr i m0) ms) Q Fs) (H2 : App m' n' = m3),
                (λ H3 : App m4 n = DCase (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (DCase (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (App m' n' = m3
                      → pstep m4 m' → pstep n n' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Beta m4 m' n n' H H0 =>
              λ (H1 : App (Lam m4) n = DCase (spine (Constr i m0) ms) Q Fs) (H2 : m'.[n'/] = m3),
                (λ H3 : App (Lam m4) n = DCase (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (DCase (spine (Constr i m0) ms) Q Fs) H3
                     in
                   False_ind
                     (m'.[n'/] = m3
                      → pstep m4 m' → pstep n n' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = DCase (spine (Constr i m0) ms) Q Fs) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = DCase (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (DCase (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = DCase (spine (Constr i m0) ms) Q Fs) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = DCase (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (DCase (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H4)
                  H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = DCase (spine (Constr i m0) ms) Q Fs) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = DCase (spine (Constr i m0) ms) Q Fs,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (DCase (spine (Constr i m0) ms) Q Fs) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                     H4) H1 H2 H H0
          | @pstep_Constr i0 m4 m' H =>
              λ (H0 : Constr i0 m4 = DCase (spine (Constr i m0) ms) Q Fs) (H1 : Constr i0 m' = m3),
                (λ H2 : Constr i0 m4 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Constr i0 m4)
                       (λ e : term, match e with
                                    | Constr _ _ => True
                                    | _ => False
                                    end) I (DCase (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Constr i0 m' = m3
                      → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          | @pstep_Case m4 m' Q0 Q' Fs0 Fs'0 H H0 H1 =>
              λ (H2 : Case m4 Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs) (H3 : Case m' Q' Fs'0 = m3),
                (λ H4 : Case m4 Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H5 : False :=
                     eq_ind (Case m4 Q0 Fs0)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (DCase (spine (Constr i m0) ms) Q Fs) H4 in
                   False_ind
                     (Case m' Q' Fs'0 = m3
                      → pstep m4 m'
                        → pstep Q0 Q'
                          → pstep' Fs0 Fs'0 → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i0 m4 ms0 ms'0 Q0 Fs0 Fs'0 F0 F'0 H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i0 m4) ms0) Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs) 
                (H5 : spine F'0 ms'0 = m3),
                (λ H6 : Case (spine (Constr i0 m4) ms0) Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i0 m4) ms0) Q0 Fs0)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (DCase (spine (Constr i m0) ms) Q Fs) H6 in
                   False_ind
                     (spine F'0 ms'0 = m3
                      → iget i0 Fs0 F0
                        → iget i0 Fs'0 F'0
                          → pstep' ms0 ms'0
                            → pstep' Fs0 Fs'0
                              → pstep F0 F'0 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m') H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m' Q0 Q' Fs0 Fs'0 H H0 H1 =>
              λ (H2 : DCase m4 Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs) (H3 : DCase m' Q' Fs'0 = m3),
                (λ H4 : DCase m4 Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H5 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | DCase _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H4 in
                   (let H6 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | DCase _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H4 in
                    (let H7 : m4 = spine (Constr i m0) ms :=
                       f_equal (λ e : term, match e with
                                            | DCase m5 _ _ => m5
                                            | _ => m4
                                            end) H4 in
                     (λ H8 : m4 = spine (Constr i m0) ms,
                        let H9 : m4 = spine (Constr i m0) ms := H8 in
                        eq_ind_r
                          (λ t : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → DCase m' Q' Fs'0 = m3
                                 → pstep t m'
                                   → pstep Q0 Q'
                                     → pstep' Fs0 Fs'0
                                       → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                          (λ H10 : Q0 = Q,
                             let H11 : Q0 = Q := H10 in
                             eq_ind_r
                               (λ t : term,
                                  Fs0 = Fs
                                  → DCase m' Q' Fs'0 = m3
                                    → pstep (spine (Constr i m0) ms) m'
                                      → pstep t Q'
                                        → pstep' Fs0 Fs'0
                                          → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                               (λ H12 : Fs0 = Fs,
                                  let H13 : Fs0 = Fs := H12 in
                                  eq_ind_r
                                    (λ t : terms,
                                       DCase m' Q' Fs'0 = m3
                                       → pstep (spine (Constr i m0) ms) m'
                                         → pstep Q Q'
                                           → pstep' t Fs'0
                                             → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                                    (λ H14 : DCase m' Q' Fs'0 = m3,
                                       let H15 : DCase m' Q' Fs'0 = m3 := H14 in
                                       eq_ind (DCase m' Q' Fs'0)
                                         (λ t : term,
                                            pstep (spine (Constr i m0) ms) m'
                                            → pstep Q Q'
                                              → pstep' Fs Fs'0
                                                → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep t m'0)
                                         (λ (H16 : pstep (spine (Constr i m0) ms) m') 
                                            (_ : pstep Q Q') (H18 : pstep' Fs Fs'0),
                                            ssr_have (¬ (∃ m5 : term, Constr i m0 = Lam m5))
                                              (λ __top_assumption_ : ∃ m5 : term, Constr i m0 = Lam m5,
                                                 (λ _evar_0_ : ..., match ... with
                                                                    | ... ...
                                                                    end)
                                                   (λ (m5 : term) (e : ...),
                                                      let H19 : False := ... in False_ind False H19))
                                              (λ pf : ¬ (∃ ..., ... = ...),
                                                 (λ _view_subject_ : ..., (...) (...)) H16)) m3 H15) H13)
                               H11) H9) H7) H6) H5) H2 H3 H H0 H1
          | @pstep_DCaseIota i0 m4 ms0 ms'0 Q0 Fs0 Fs'0 F0 F'0 H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i0 m4) ms0) Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs) 
                (H5 : spine F'0 ms'0 = m3),
                (λ H6 : DCase (spine (Constr i0 m4) ms0) Q0 Fs0 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H7 : Fs0 = Fs :=
                     f_equal (λ e : term, match e with
                                          | DCase _ _ Fs1 => Fs1
                                          | _ => Fs0
                                          end) H6 in
                   (let H8 : Q0 = Q :=
                      f_equal (λ e : term, match e with
                                           | DCase _ Q1 _ => Q1
                                           | _ => Q0
                                           end) H6 in
                    (let H9 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms :=
                       f_equal
                         (λ e : term,
                            match e with
                            | DCase m5 _ _ => m5
                            | _ =>
                                (fix spine (h : term) (ls : terms) {struct ls} : term :=
                                   match ls with
                                   | Nil => h
                                   | Cons m5 ls0 => spine (App h m5) ls0
                                   end) (Constr i0 m4) ms0
                            end) H6 in
                     (λ H10 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms,
                        let H11 : spine (Constr i0 m4) ms0 = spine (Constr i m0) ms := H10 in
                        eq_ind (spine (Constr i0 m4) ms0)
                          (λ _ : term,
                             Q0 = Q
                             → Fs0 = Fs
                               → spine F'0 ms'0 = m3
                                 → iget i0 Fs0 F0
                                   → iget i0 Fs'0 F'0
                                     → pstep' ms0 ms'0
                                       → pstep' Fs0 Fs'0
                                         → pstep F0 F'0
                                           → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                          (λ H12 : Q0 = Q,
                             let H13 : Q0 = Q := H12 in
                             eq_ind_r
                               (λ _ : term,
                                  Fs0 = Fs
                                  → spine F'0 ms'0 = m3
                                    → iget i0 Fs0 F0
                                      → iget i0 Fs'0 F'0
                                        → pstep' ms0 ms'0
                                          → pstep' Fs0 Fs'0
                                            → pstep F0 F'0
                                              → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                               (λ H14 : Fs0 = Fs,
                                  let H15 : Fs0 = Fs := H14 in
                                  eq_ind_r
                                    (λ t : terms,
                                       spine F'0 ms'0 = m3
                                       → iget i0 t F0
                                         → iget i0 Fs'0 F'0
                                           → pstep' ms0 ms'0
                                             → pstep' t Fs'0
                                               → pstep F0 F'0
                                                 → ∃ m' : term, pstep (spine F' ms') m' ∧ pstep m3 m')
                                    (λ H16 : spine F'0 ms'0 = m3,
                                       let H17 : spine F'0 ms'0 = m3 := H16 in
                                       eq_ind (spine F'0 ms'0)
                                         (λ t : term,
                                            iget i0 Fs F0
                                            → iget i0 Fs'0 F'0
                                              → pstep' ms0 ms'0
                                                → pstep' Fs Fs'0
                                                  → pstep F0 F'0 → ∃ m' : term, pstep ... m' ∧ pstep t m')
                                         (λ (H18 : iget i0 Fs F0) (H19 : iget i0 Fs'0 F'0) 
                                            (H20 : pstep' ms0 ms'0) (H21 : pstep' Fs Fs'0) 
                                            (_ : pstep F0 F'0),
                                            (λ _view_subject_ : spine (...) ms0 = spine (...) ms,
                                               (λ __top_assumption_ : ..., (...) (...))
                                                 (spine_Constr _view_subject_)) H10) m3 H17) H15) H13)
                          (spine (Constr i m0) ms) H11) H9) H8) H7) H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m' H =>
              λ (H0 : Fix m4 = DCase (spine (Constr i m0) ms) Q Fs) (H1 : Fix m' = m3),
                (λ H2 : Fix m4 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (DCase (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (Fix m' = m3 → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_FixIota m4 m' H =>
              λ (H0 : Fix m4 = DCase (spine (Constr i m0) ms) Q Fs) (H1 : m'.[Fix m'/] = m3),
                (λ H2 : Fix m4 = DCase (spine (Constr i m0) ms) Q Fs,
                   let H3 : False :=
                     eq_ind (Fix m4) (λ e : term, match e with
                                                  | Fix _ => True
                                                  | _ => False
                                                  end) I (DCase (spine (Constr i m0) ms) Q Fs) H2 in
                   False_ind
                     (m'.[Fix m'/] = m3
                      → pstep m4 m' → ∃ m'0 : term, pstep (spine F' ms') m'0 ∧ pstep m3 m'0) H3) H0 H1 H
          end in
        H (erefl (DCase (spine (Constr i m0) ms) Q Fs)) (erefl m3))
     (λ (m0 m' : term) (_ : pstep m0 m') (ih : ∀ m3 : term,
                                                 pstep m0 m3 → ∃ m'0 : term, pstep m' m'0 ∧ pstep m3 m'0) 
        (m3 : term) (p2 : pstep (Fix m0) m3),
        let H : Fix m0 = Fix m0 → m3 = m3 → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0 :=
          match
            p2 in (pstep t t0)
            return (t = Fix m0 → t0 = m3 → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = Fix m0) (H0 : Var x = m3),
                (λ H1 : Var x = Fix m0,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Fix m0) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Fix m0) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Fix m0,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0) H2) H H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Fix m0) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Fix m0,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Fix m0) H2 in
                   False_ind (Lam n' = m3 → pstep n n' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0)
                     H3) H0 H1 H
          | @pstep_App m4 m'0 n n' H H0 =>
              λ (H1 : App m4 n = Fix m0) (H2 : App m'0 n' = m3),
                (λ H3 : App m4 n = Fix m0,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Fix m0) H3 in
                   False_ind
                     (App m'0 n' = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1) H4)
                  H1 H2 H H0
          | @pstep_Beta m4 m'0 n n' H H0 =>
              λ (H1 : App (Lam m4) n = Fix m0) (H2 : m'0.[n'/] = m3),
                (λ H3 : App (Lam m4) n = Fix m0,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Fix m0) H3 in
                   False_ind
                     (m'0.[n'/] = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1) H4)
                  H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Fix m0) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Fix m0,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Fix m0) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Fix m0,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0) H4) H1
                  H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Fix m0) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Fix m0,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = Fix m0) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = Fix m0,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Fix m0) H2 in
                   False_ind
                     (Constr i m'0 = m3 → pstep m4 m'0 → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1)
                     H3) H0 H1 H
          | @pstep_Case m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m4 Q Fs = Fix m0) (H3 : Case m'0 Q' Fs' = m3),
                (λ H4 : Case m4 Q Fs = Fix m0,
                   let H5 : False :=
                     eq_ind (Case m4 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H4 in
                   False_ind
                     (Case m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q Fs = Fix m0) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q Fs = Fix m0,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0)
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m4 Q Fs = Fix m0) (H3 : DCase m'0 Q' Fs' = m3),
                (λ H4 : DCase m4 Q Fs = Fix m0,
                   let H5 : False :=
                     eq_ind (DCase m4 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H4 in
                   False_ind
                     (DCase m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1) H5)
                  H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q Fs = Fix m0) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q Fs = Fix m0,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs' → pstep F F' → ∃ m'0 : term, pstep (Fix m') m'0 ∧ pstep m3 m'0)
                     H7) H4 H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = Fix m0) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = Fix m0,
                   let H3 : m4 = m0 := f_equal (λ e : term, match e with
                                                            | Fix m5 => m5
                                                            | _ => m4
                                                            end) H2 in
                   (λ H4 : m4 = m0,
                      let H5 : m4 = m0 := H4 in
                      eq_ind_r
                        (λ t : term,
                           Fix m'0 = m3 → pstep t m'0 → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1)
                        (λ H6 : Fix m'0 = m3,
                           let H7 : Fix m'0 = m3 := H6 in
                           eq_ind (Fix m'0)
                             (λ t : term, pstep m0 m'0 → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep t m'1)
                             [eta λ _view_subject_ : pstep m0 m'0,
                                    (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                       (λ _evar_0_ : ∀ (x : term) (p0 : (λ m'1 : term,
                                                                           pstep m' m'1 ∧ pstep m'0 m'1) x),
                                                       (λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                          ∃ m'1 : term,
                                                            pstep (Fix m') m'1 ∧ pstep (Fix m'0) m'1)
                                                         (ex_intro
                                                            (λ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1) x
                                                            p0),
                                          match
                                            __top_assumption_ as e
                                            return
                                              ((λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                  ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep (Fix m'0) m'1)
                                                 e)
                                          with
                                          | @ex_intro _ _ x x0 => _evar_0_ x x0
                                          end)
                                         (λ (m5 : term) (__top_assumption_0 : pstep m' m5 ∧ pstep m'0 m5),
                                            (λ _evar_0_ : ∀ (a : pstep m' m5) (b : pstep m'0 m5),
                                                            (λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                               ∃ m'1 : term,
                                                                 pstep (Fix m') m'1 ∧ pstep (Fix m'0) m'1)
                                                              (conj a b),
                                               match
                                                 __top_assumption_0 as a
                                                 return
                                                   ((λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                       ∃ m'1 : term,
                                                         pstep (Fix m') m'1 ∧ pstep (Fix m'0) m'1) a)
                                               with
                                               | conj x x0 => _evar_0_ x x0
                                               end)
                                              (λ (p3 : pstep m' m5) (p4 : pstep m'0 m5),
                                                 ex_intro
                                                   (λ m'1 : term, pstep (Fix m') m'1 ∧ pstep (Fix m'0) m'1)
                                                   (Fix m5) (conj (pstep_Fix p3) (pstep_Fix p4)))))
                                      (ih m'0 _view_subject_)] m3 H7) H5) H3) H0 H1 H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = Fix m0) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = Fix m0,
                   let H3 : m4 = m0 := f_equal (λ e : term, match e with
                                                            | Fix m5 => m5
                                                            | _ => m4
                                                            end) H2 in
                   (λ H4 : m4 = m0,
                      let H5 : m4 = m0 := H4 in
                      eq_ind_r
                        (λ t : term,
                           m'0.[Fix m'0/] = m3
                           → pstep t m'0 → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep m3 m'1)
                        (λ H6 : m'0.[Fix m'0/] = m3,
                           let H7 : m'0.[Fix m'0/] = m3 := H6 in
                           eq_ind m'0.[Fix m'0/]
                             (λ t : term, pstep m0 m'0 → ∃ m'1 : term, pstep (Fix m') m'1 ∧ pstep t m'1)
                             [eta λ _view_subject_ : pstep m0 m'0,
                                    (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                       (λ _evar_0_ : ∀ (x : term) (p0 : (λ m'1 : term,
                                                                           pstep m' m'1 ∧ pstep m'0 m'1) x),
                                                       (λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                          ∃ m'1 : term,
                                                            pstep (Fix m') m'1 ∧ pstep m'0.[Fix m'0/] m'1)
                                                         (ex_intro
                                                            (λ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1) x
                                                            p0),
                                          match
                                            __top_assumption_ as e
                                            return
                                              ((λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                  ∃ m'1 : term,
                                                    pstep (Fix m') m'1 ∧ pstep m'0.[Fix m'0/] m'1) e)
                                          with
                                          | @ex_intro _ _ x x0 => _evar_0_ x x0
                                          end)
                                         (λ (m5 : term) (__top_assumption_0 : pstep m' m5 ∧ pstep m'0 m5),
                                            (λ _evar_0_ : ∀ (a : pstep m' m5) (b : pstep m'0 m5),
                                                            (λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                               ∃ m'1 : term,
                                                                 pstep (Fix m') m'1
                                                                 ∧ pstep m'0.[Fix m'0/] m'1) 
                                                              (conj a b),
                                               match
                                                 __top_assumption_0 as a
                                                 return
                                                   ((λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                       ∃ m'1 : term,
                                                         pstep (Fix m') m'1 ∧ pstep m'0.[Fix m'0/] m'1) a)
                                               with
                                               | conj x x0 => _evar_0_ x x0
                                               end)
                                              (λ (p3 : pstep m' m5) (p4 : pstep m'0 m5),
                                                 ex_intro
                                                   (λ m'1 : term,
                                                      pstep (Fix m') m'1 ∧ pstep m'0.[Fix m'0/] m'1)
                                                   m5.[Fix m5/]
                                                   (conj (pstep_FixIota p3)
                                                      (pstep_compat_Beta p4 (pstep_Fix p4))))))
                                      (ih m'0 _view_subject_)] m3 H7) H5) H3) H0 H1 H
          end in
        H (erefl (Fix m0)) (erefl m3))
     (λ (m0 m' : term) (_ : pstep m0 m') (ih : ∀ m3 : term,
                                                 pstep m0 m3 → ∃ m'0 : term, pstep m' m'0 ∧ pstep m3 m'0) 
        (m3 : term) (p2 : pstep (Fix m0) m3),
        let H : Fix m0 = Fix m0 → m3 = m3 → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0 :=
          match
            p2 in (pstep t t0)
            return (t = Fix m0 → t0 = m3 → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0)
          with
          | pstep_Var x =>
              λ (H : Var x = Fix m0) (H0 : Var x = m3),
                (λ H1 : Var x = Fix m0,
                   let H2 : False :=
                     eq_ind (Var x) (λ e : term, match e with
                                                 | Var _ => True
                                                 | _ => False
                                                 end) I (Fix m0) H1 in
                   False_ind (Var x = m3 → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H2) H H0
          | pstep_Sort srt l =>
              λ (H : Sort srt l = Fix m0) (H0 : Sort srt l = m3),
                (λ H1 : Sort srt l = Fix m0,
                   let H2 : False :=
                     eq_ind (Sort srt l) (λ e : term, match e with
                                                      | Sort _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H1 in
                   False_ind (Sort srt l = m3 → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H2) H
                  H0
          | @pstep_Lam n n' H =>
              λ (H0 : Lam n = Fix m0) (H1 : Lam n' = m3),
                (λ H2 : Lam n = Fix m0,
                   let H3 : False :=
                     eq_ind (Lam n) (λ e : term, match e with
                                                 | Lam _ => True
                                                 | _ => False
                                                 end) I (Fix m0) H2 in
                   False_ind
                     (Lam n' = m3 → pstep n n' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H3)
                  H0 H1 H
          | @pstep_App m4 m'0 n n' H H0 =>
              λ (H1 : App m4 n = Fix m0) (H2 : App m'0 n' = m3),
                (λ H3 : App m4 n = Fix m0,
                   let H4 : False :=
                     eq_ind (App m4 n) (λ e : term, match e with
                                                    | App _ _ => True
                                                    | _ => False
                                                    end) I (Fix m0) H3 in
                   False_ind
                     (App m'0 n' = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                     H4) H1 H2 H H0
          | @pstep_Beta m4 m'0 n n' H H0 =>
              λ (H1 : App (Lam m4) n = Fix m0) (H2 : m'0.[n'/] = m3),
                (λ H3 : App (Lam m4) n = Fix m0,
                   let H4 : False :=
                     eq_ind (App (Lam m4) n) (λ e : term, match e with
                                                          | App _ _ => True
                                                          | _ => False
                                                          end) I (Fix m0) H3 in
                   False_ind
                     (m'0.[n'/] = m3
                      → pstep m4 m'0 → pstep n n' → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                     H4) H1 H2 H H0
          | @pstep_Prod A A' s B B' H H0 =>
              λ (H1 : Prod A B s = Fix m0) (H2 : Prod A' B' s = m3),
                (λ H3 : Prod A B s = Fix m0,
                   let H4 : False :=
                     eq_ind (Prod A B s) (λ e : term, match e with
                                                      | Prod _ _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H3 in
                   False_ind
                     (Prod A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Lolli A A' s B B' H H0 =>
              λ (H1 : Lolli A B s = Fix m0) (H2 : Lolli A' B' s = m3),
                (λ H3 : Lolli A B s = Fix m0,
                   let H4 : False :=
                     eq_ind (Lolli A B s)
                       (λ e : term, match e with
                                    | Lolli _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H3 in
                   False_ind
                     (Lolli A' B' s = m3
                      → pstep A A' → pstep B B' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H4)
                  H1 H2 H H0
          | @pstep_Ind A A' s Cs Cs' H H0 =>
              λ (H1 : Ind A s Cs = Fix m0) (H2 : Ind A' s Cs' = m3),
                (λ H3 : Ind A s Cs = Fix m0,
                   let H4 : False :=
                     eq_ind (Ind A s Cs) (λ e : term, match e with
                                                      | Ind _ _ _ => True
                                                      | _ => False
                                                      end) I (Fix m0) H3 in
                   False_ind
                     (Ind A' s Cs' = m3
                      → pstep A A' → pstep' Cs Cs' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0)
                     H4) H1 H2 H H0
          | @pstep_Constr i m4 m'0 H =>
              λ (H0 : Constr i m4 = Fix m0) (H1 : Constr i m'0 = m3),
                (λ H2 : Constr i m4 = Fix m0,
                   let H3 : False :=
                     eq_ind (Constr i m4) (λ e : term, match e with
                                                       | Constr _ _ => True
                                                       | _ => False
                                                       end) I (Fix m0) H2 in
                   False_ind
                     (Constr i m'0 = m3
                      → pstep m4 m'0 → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1) H3) H0 H1 H
          | @pstep_Case m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : Case m4 Q Fs = Fix m0) (H3 : Case m'0 Q' Fs' = m3),
                (λ H4 : Case m4 Q Fs = Fix m0,
                   let H5 : False :=
                     eq_ind (Case m4 Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H4 in
                   False_ind
                     (Case m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                     H5) H2 H3 H H0 H1
          | @pstep_CaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : Case (spine (Constr i m4) ms) Q Fs = Fix m0) (H5 : spine F' ms' = m3),
                (λ H6 : Case (spine (Constr i m4) ms) Q Fs = Fix m0,
                   let H7 : False :=
                     eq_ind (Case (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | Case _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_DCase m4 m'0 Q Q' Fs Fs' H H0 H1 =>
              λ (H2 : DCase m4 Q Fs = Fix m0) (H3 : DCase m'0 Q' Fs' = m3),
                (λ H4 : DCase m4 Q Fs = Fix m0,
                   let H5 : False :=
                     eq_ind (DCase m4 Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H4 in
                   False_ind
                     (DCase m'0 Q' Fs' = m3
                      → pstep m4 m'0
                        → pstep Q Q' → pstep' Fs Fs' → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                     H5) H2 H3 H H0 H1
          | @pstep_DCaseIota i m4 ms ms' Q Fs Fs' F F' H H0 H1 H2 H3 =>
              λ (H4 : DCase (spine (Constr i m4) ms) Q Fs = Fix m0) (H5 : spine F' ms' = m3),
                (λ H6 : DCase (spine (Constr i m4) ms) Q Fs = Fix m0,
                   let H7 : False :=
                     eq_ind (DCase (spine (Constr i m4) ms) Q Fs)
                       (λ e : term, match e with
                                    | DCase _ _ _ => True
                                    | _ => False
                                    end) I (Fix m0) H6 in
                   False_ind
                     (spine F' ms' = m3
                      → iget i Fs F
                        → iget i Fs' F'
                          → pstep' ms ms'
                            → pstep' Fs Fs'
                              → pstep F F' → ∃ m'0 : term, pstep m'.[Fix m'/] m'0 ∧ pstep m3 m'0) H7) H4
                  H5 H H0 H1 H2 H3
          | @pstep_Fix m4 m'0 H =>
              λ (H0 : Fix m4 = Fix m0) (H1 : Fix m'0 = m3),
                (λ H2 : Fix m4 = Fix m0,
                   let H3 : m4 = m0 := f_equal (λ e : term, match e with
                                                            | Fix m5 => m5
                                                            | _ => m4
                                                            end) H2 in
                   (λ H4 : m4 = m0,
                      let H5 : m4 = m0 := H4 in
                      eq_ind_r
                        (λ t : term,
                           Fix m'0 = m3
                           → pstep t m'0 → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                        (λ H6 : Fix m'0 = m3,
                           let H7 : Fix m'0 = m3 := H6 in
                           eq_ind (Fix m'0)
                             (λ t : term,
                                pstep m0 m'0 → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep t m'1)
                             [eta λ _view_subject_ : pstep m0 m'0,
                                    (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                       (λ _evar_0_ : ∀ (x : term) (p0 : (λ m'1 : term,
                                                                           pstep m' m'1 ∧ pstep m'0 m'1) x),
                                                       (λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                          ∃ m'1 : term,
                                                            pstep m'.[Fix m'/] m'1 ∧ pstep (Fix m'0) m'1)
                                                         (ex_intro
                                                            (λ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1) x
                                                            p0),
                                          match
                                            __top_assumption_ as e
                                            return
                                              ((λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                  ∃ m'1 : term,
                                                    pstep m'.[Fix m'/] m'1 ∧ pstep (Fix m'0) m'1) e)
                                          with
                                          | @ex_intro _ _ x x0 => _evar_0_ x x0
                                          end)
                                         (λ (m5 : term) (__top_assumption_0 : pstep m' m5 ∧ pstep m'0 m5),
                                            (λ _evar_0_ : ∀ (a : pstep m' m5) (b : pstep m'0 m5),
                                                            (λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                               ∃ m'1 : term,
                                                                 pstep m'.[Fix m'/] m'1
                                                                 ∧ pstep (Fix m'0) m'1) 
                                                              (conj a b),
                                               match
                                                 __top_assumption_0 as a
                                                 return
                                                   ((λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                       ∃ m'1 : term,
                                                         pstep m'.[Fix m'/] m'1 ∧ pstep (Fix m'0) m'1) a)
                                               with
                                               | conj x x0 => _evar_0_ x x0
                                               end)
                                              (λ (p3 : pstep m' m5) (p4 : pstep m'0 m5),
                                                 ex_intro
                                                   (λ m'1 : term,
                                                      pstep m'.[Fix m'/] m'1 ∧ pstep (Fix m'0) m'1)
                                                   m5.[Fix m5/]
                                                   (conj (pstep_compat_Beta p3 (pstep_Fix p3))
                                                      (pstep_FixIota p4))))) (ih m'0 _view_subject_)] m3
                             H7) H5) H3) H0 H1 H
          | @pstep_FixIota m4 m'0 H =>
              λ (H0 : Fix m4 = Fix m0) (H1 : m'0.[Fix m'0/] = m3),
                (λ H2 : Fix m4 = Fix m0,
                   let H3 : m4 = m0 := f_equal (λ e : term, match e with
                                                            | Fix m5 => m5
                                                            | _ => m4
                                                            end) H2 in
                   (λ H4 : m4 = m0,
                      let H5 : m4 = m0 := H4 in
                      eq_ind_r
                        (λ t : term,
                           m'0.[Fix m'0/] = m3
                           → pstep t m'0 → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep m3 m'1)
                        (λ H6 : m'0.[Fix m'0/] = m3,
                           let H7 : m'0.[Fix m'0/] = m3 := H6 in
                           eq_ind m'0.[Fix m'0/]
                             (λ t : term,
                                pstep m0 m'0 → ∃ m'1 : term, pstep m'.[Fix m'/] m'1 ∧ pstep t m'1)
                             [eta λ _view_subject_ : pstep m0 m'0,
                                    (λ __top_assumption_ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                       (λ _evar_0_ : ∀ (x : term) (p0 : (λ m'1 : term,
                                                                           pstep m' m'1 ∧ pstep m'0 m'1) x),
                                                       (λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                          ∃ m'1 : term,
                                                            pstep m'.[Fix m'/] m'1
                                                            ∧ pstep m'0.[Fix m'0/] m'1)
                                                         (ex_intro
                                                            (λ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1) x
                                                            p0),
                                          match
                                            __top_assumption_ as e
                                            return
                                              ((λ _ : ∃ m'1 : term, pstep m' m'1 ∧ pstep m'0 m'1,
                                                  ∃ m'1 : term,
                                                    pstep m'.[Fix m'/] m'1 ∧ pstep m'0.[Fix m'0/] m'1) e)
                                          with
                                          | @ex_intro _ _ x x0 => _evar_0_ x x0
                                          end)
                                         (λ (m5 : term) (__top_assumption_0 : pstep m' m5 ∧ pstep m'0 m5),
                                            (λ _evar_0_ : ∀ (a : pstep m' m5) (b : pstep m'0 m5),
                                                            (λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                               ∃ m'1 : term,
                                                                 pstep m'.[Fix m'/] m'1
                                                                 ∧ pstep m'0.[Fix m'0/] m'1) 
                                                              (conj a b),
                                               match
                                                 __top_assumption_0 as a
                                                 return
                                                   ((λ _ : pstep m' m5 ∧ pstep m'0 m5,
                                                       ∃ m'1 : term,
                                                         pstep m'.[Fix m'/] m'1 ∧ pstep m'0.[Fix m'0/] m'1)
                                                      a)
                                               with
                                               | conj x x0 => _evar_0_ x x0
                                               end)
                                              (λ (p3 : pstep m' m5) (p4 : pstep m'0 m5),
                                                 ex_intro
                                                   (λ m'1 : term,
                                                      pstep m'.[Fix m'/] m'1 ∧ pstep m'0.[Fix m'0/] m'1)
                                                   m5.[Fix m5/]
                                                   (conj (pstep_compat_Beta p3 (pstep_Fix p3))
                                                      (pstep_compat_Beta p4 (pstep_Fix p4))))))
                                      (ih m'0 _view_subject_)] m3 H7) H5) H3) H0 H1 H
          end in
        H (erefl (Fix m0)) (erefl m3)) m2".
No more subgoals.