* Concurrent Calculus of Linear Constructions

** Sort relations

*** Order
#+BEGIN_SRC
≤  U  L
U  T  T
L  F  T
#+END_SRC

*** Addition
#+BEGIN_SRC
⋅  U  L
U  U  L
L  L  L
#+END_SRC

** Core typing rules

#+BEGIN_SRC
Γ ▹ U
————————————————
Γ ⊢ s@i :U U@i+1


Γ ▹ U    Γ ⊢ A :U s@i    [Γ, x :s A] ⊢ B :U r@i
————————————————————————————————————————————————
Γ ⊢ Πt (x :s A :r B) :U t@i


Γ ▹ U
———————————————————
Γ, x :s A ⊢ x :s A


Γ ▹ t     [Γ] ⊢ Πt (x :s A :r B) :U t@i     Γ, x :s A ⊢ n :r B
———————————————————————————————————————————————————————————————
Γ ⊢ λt (x :s A).n :t Πt (x :s A :r B)


Γ2 ▹ s    Γ1 ⊢ m :t Πt (x :s A :r B)     Γ2 ⊢ n :s A
—————————————————————————————————————————————————————
Γ1 ∘ Γ2 ⊢ m n :r B[n/x]


Γ ⊢ m :s A     [Γ] ⊢ B :U s@i     A ⪯ B
————————————————————————————————————————
Γ ⊢ m :s B
#+END_SRC

** Data typing rules

#+BEGIN_SRC
Γ ▹ U
————————————————
Γ ⊢ unit :U U@0


Γ ▹ U
———————————————
Γ ⊢ () :U unit


Γ1 ⊢ m :U unit     Γ2 ⊢ n :s A
———————————————————————————————
Γ1 ∘ Γ2 ⊢ let () = m in n :s A


Γ ▹ U
————————————————
Γ ⊢ bool :U U@0


Γ ▹ U
————————————————
Γ ⊢ true :U bool


Γ ▹ U
————————————————
Γ ⊢ false :U bool


Γ1 ▹ s     Γ1 ⊢ m :U bool     [Γ2, x :s bool] ⊢ A :U t@i
Γ2 ⊢ n1 :t A[true/x]     Γ2 ⊢ n2 :t A[false/x]
——————————————————————————————————————————————————————————
Γ1 ∘ Γ2 ⊢ if m then n1 else n2 :t A[m/x]


Γ ▹ U     Γ ⊢ A :U s@i     [Γ, x :s A] ⊢ B :U r@i     s ⋅ r ≤ t
————————————————————————————————————————————————————————————————
Γ ⊢ Σt (x :s A :r B) :U t@i


Γ1 ▹ s     Γ2 ▹ r
[Γ1 ∘ Γ2] ⊢ Σt (x :s A :r B) :U t@i      Γ1 ⊢ m :s A      Γ2 ⊢ n :r B[m/x]
———————————————————————————————————————————————————————————————————————————
Γ1 ∘ Γ2 ⊢ ⟨m, n⟩t :t Σt (x :s A :r B)


Γ1 ⊢ m :t Σt (x :s A :r B)     Γ1 ▹ k     t ≤ k
[Γ2, z :k Σt (x :s A :r B)] ⊢ C :U q@i
Γ2, x :s A, y :r B ⊢ n :q C[⟨x, y⟩t/z]
————————————————————————————————————————————————
Γ1 ∘ Γ2 ⊢ let ⟨x, y⟩ = m in n :q C[m/z]
#+END_SRC

** Session typing rules
#+BEGIN_SRC
¬end! = end?
¬end? = end!
¬!(x :s A).B = ?(x :s A).¬B
¬?(x :s A).B = !(x :s A).¬B
¬if m then n1 else n2 = if m then ¬n1 else ¬n2
#+END_SRC

#+BEGIN_SRC
Γ ▹ U
————————————————
Γ ⊢ main :U L@0


Γ ▹ U
————————————————–——
Γ ⊢ proto i :U U@i


Γ ▹ U
————————————————————
Γ ⊢ end! :U proto i


Γ ▹ U
————————————————————
Γ ⊢ end? :U proto i


Γ ▹ U     Γ ⊢ A :U s@i     [Γ, x :s A] ⊢ B :U proto i
——————————————————————————————————————————————————————
Γ ⊢ !(x :s A).B :U proto i


Γ ▹ U     Γ ⊢ A :U s@i     [Γ, x :s A] ⊢ B :U proto i
——————————————————————————————————————————————————————
Γ ⊢ ?(x :s A).B :U proto i


Γ ▹ U     Γ ⊢ A :U proto i
———————————————————————————
Γ ⊢ ch A :U L@i


[Γ1] ⊢ ch A :U L@i     [Γ2] ⊢ ch B :U L@i    ¬A = B
Γ1 ⊢ m :L main     Γ2 ⊢ n :t Πt (x :L ch B :s C)
—————————————————————————————————————————————————————
Γ1 ∘ Γ2 ⊢ fork m n :L ΣL (x :L ch A :L main)


Γ ⊢ m :L ch !(x :s A).B
——————————————————————–———————————
Γ ⊢ send m :L ΠL (x :s A :L ch B)


Γ ⊢ m :L ch ?(x :s A).B
——————————————————————–———————————
Γ ⊢ recv m :L ΣL (x :s A :L ch B)


Γ ⊢ m :L ch end!
————————————————————
Γ ⊢ close m :U unit


Γ ⊢ m :L ch end?
———————————————————
Γ ⊢ wait m :U unit
#+END_SRC
