checking
t  := let Ptr := (fun A => (x : Nat * [x |-> A]) : Type -> Linear)
               in
               let nbox := (((alloc) Nat) 1 : (Ptr) Nat) in
               let main :=
                 (let (n, nbox) := ((get) Nat) nbox in
                  let _ := ((free) Nat) nbox in n : Nat)
               in main

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := [x |-> A]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
}
t  := fun A => (x : Nat * [x |-> A])
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := (fun A => (x : Nat * [x |-> A]) : Type -> Linear)
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := [x |-> A]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
}
t  := fun A => (x : Nat * [x |-> A])
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := (fun A => (x : Nat * [x |-> A]) : Type -> Linear)
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := alloc
ty := (A : Type) -> A -> (x : Nat * [x |-> A])
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (alloc) Nat
ty := Nat -> (x : Nat * [x |-> Nat])
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

check
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  := 1
ty := Nat
post_ctx := {
}

check
pre_ctx := {
}
t  := 1
ty := Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((alloc) Nat) 1
ty := (x : Nat * [x |-> Nat])
post_ctx := {
}

check
pre_ctx := {
}
t  := ((alloc) Nat) 1
ty := ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (((alloc) Nat) 1 : ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)
ty := ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  A :0 (Type)::w
}
t  := [x |-> A]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : Nat * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
}
t  := fun A => (x : Nat * [x |-> A])
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := (fun A => (x : Nat * [x |-> A]) : Type -> Linear)
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := get
ty := (A : Type) -> (x : Nat * [x |-> A]) -> (A * (x : Nat * [x |-> A]))
post_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := Nat
ty := Type
post_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := Nat
ty := Type
post_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := (get) Nat
ty := (x : Nat * [x |-> Nat]) -> (Nat * (x : Nat * [x |-> Nat]))
post_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := [x |-> Nat]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
}
t  := (x : Nat * [x |-> Nat])
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := [x |-> Nat]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
}
t  := (x : Nat * [x |-> Nat])
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := nbox
ty := ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := nbox
ty := (x : Nat * [x |-> Nat])
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := ((get) Nat) nbox
ty := (Nat * (x : Nat * [x |-> Nat]))
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  _ :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := [x |-> Nat]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := (x : Nat * [x |-> Nat])
ty := Linear
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := free
ty := (A : Type) -> (x : Nat * [x |-> A]) -> Unit
post_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := Nat
ty := Type
post_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := Nat
ty := Type
post_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := (free) Nat
ty := (x : Nat * [x |-> Nat]) -> Unit
post_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := [x |-> Nat]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (x : Nat * [x |-> Nat])
ty := Linear
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := [x |-> Nat]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (x : Nat * [x |-> Nat])
ty := Linear
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := nbox
ty := (x : Nat * [x |-> Nat])
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := nbox
ty := (x : Nat * [x |-> Nat])
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := ((free) Nat) nbox
ty := Unit
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Unit)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Unit)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := (n : Nat)
ty := Nat
post_ctx := {
  _ :0 (Unit)::w
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := let _ := ((free) Nat) nbox in (n : Nat)
ty := Nat
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := let _ := ((free) Nat) nbox in (n : Nat)
ty := Nat
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 ((x : Nat * [x |-> Nat]))::1
  n :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := (let _ := ((free) Nat) nbox in n : Nat)
ty := Nat
post_ctx := {
  nbox :1 ((x : Nat * [x |-> Nat]))::1
  n :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  :=
  let (n, nbox) := ((get) Nat) nbox in
  (let _ := ((free) Nat) nbox in n : Nat)
ty := let (n, nbox) := ((get) Nat) nbox in Nat
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

check
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  :=
  let (n, nbox) := ((get) Nat) nbox in
  (let _ := ((free) Nat) nbox in n : Nat)
ty := Nat
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  :=
  (let (n, nbox) := ((get) Nat) nbox in let _ := ((free) Nat) nbox in n : Nat)
ty := Nat
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  main :0 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  := main
ty := Nat
post_ctx := {
  main :1 (Nat)::w
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
  nbox :0 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}
t  :=
  let main :=
    (let (n, nbox) := ((get) Nat) nbox in let _ := ((free) Nat) nbox in n : Nat)
  in main
ty := Nat
post_ctx := {
  nbox :1 (((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)::1
}

infer
pre_ctx := {
}
t  :=
  let nbox :=
    (((alloc) Nat) 1 : ((fun A => (x : Nat * [x |-> A]) : Type -> Linear)) Nat)
  in
  let main :=
    (let (n, nbox) := ((get) Nat) nbox in let _ := ((free) Nat) nbox in n : Nat)
  in main
ty := Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let Ptr := (fun A => (x : Nat * [x |-> A]) : Type -> Linear) in
  let nbox := (((alloc) Nat) 1 : (Ptr) Nat) in
  let main :=
    (let (n, nbox) := ((get) Nat) nbox in let _ := ((free) Nat) nbox in n : Nat)
  in main
ty := Nat
post_ctx := {
}

complete
post_ctx := {
}
t  := let (n, nbox) := ((get) Nat) ((alloc) Nat) 1 in n
ty := Nat
