checking
t  := let add :=
                 (fun x =>
                    fun y =>
                      iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
               Nat -> Nat -> Nat) in ()

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 Nat::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 Nat::w
}

infer
pre_ctx := {
}
t  := Nat -> Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 Nat -> Nat::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 Nat -> Nat::w
}

infer
pre_ctx := {
}
t  := Nat -> Nat -> Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 Nat::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 Nat::w
}

infer
pre_ctx := {
}
t  := Nat -> Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 Nat -> Nat::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 Nat -> Nat::w
}

