checking
t  := let add :=
                 (fun x =>
                    fun y =>
                      iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
               Nat -> Nat -> Nat) in
               let stdin := ((open) 0 : Channel) in
               let stdout := ((open) 0 : Channel) in
               let readClose :=
                 (fun ch =>
                    let (n, ch) := (read) ch in
                    let _ := ((close) ch : unit) in n : Channel >> Nat)
               in
               let adversary :=
                 (fun f =>
                    fun x =>
                      let (x1, x2) := x in
                      let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : 
               Channel >> Nat -> (Channel * Channel) -> Nat) in
               let main := (((adversary) readClose) (stdin, stdout) : Nat) in
               main

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := Nat -> Nat -> Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) 0
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := y
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := y
ty := ((fun _ => Nat : Nat -> Type)) 0
post_ctx := {
  y :1 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  :=
  ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) _
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  :=
  ((fun _ => Nat : Nat -> Type)) _ -> ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) _
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := _
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := ((fun _ => Nat : Nat -> Type)) _
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := (x +1)
ty := ((fun _ => Nat : Nat -> Type)) (_ +1)
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun x => (x +1)
ty :=
  ((fun _ => Nat : Nat -> Type)) _ -> ((fun _ => Nat : Nat -> Type)) (_ +1)
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := fun _ => fun x => (x +1)
ty :=
  (x : Nat) ->
    ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :1 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :1 (Nat)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :1 (Nat)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
}
t  := iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :1 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat -> Nat
post_ctx := {
  x :1 (Nat)::w
}

check
pre_ctx := {
}
t  := fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat -> Nat -> Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
Nat -> Nat -> Nat)
ty := Nat -> Nat -> Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := Nat -> Nat -> Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := open
ty := Nat -> Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ((open) 0 : Channel)
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := open
ty := Nat -> Channel
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ((open) 0 : Channel)
ty := Channel
post_ctx := {
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel >> Nat
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := read
ty := Channel -> (Nat * Channel)
post_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (read) ch
ty := (Nat * Channel)
post_ctx := {
  ch :1 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}
t  := unit
ty := Type
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := close
ty := Channel -> unit
post_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (close) ch
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (close) ch
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := ((close) ch : unit)
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}
t  := unit
ty := Type
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  _ :0 (unit)::w
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (unit)::w
  ch :0 (Channel)::1
  n :1 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := let _ := ((close) ch : unit) in n
ty := Nat
post_ctx := {
  ch :1 (Channel)::1
  n :1 (Nat)::w
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := let (n, ch) := (read) ch in Nat
post_ctx := {
  ch :1 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := Nat
post_ctx := {
  ch :1 (Channel)::1
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

check
pre_ctx := {
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := Channel >> Nat
post_ctx := {
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  :=
  (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
Channel >> Nat)
ty := Channel >> Nat
post_ctx := {
  stdout :0 (Channel)::1
  stdin :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel >> Nat
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel >> Nat
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel >> Nat -> (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel >> Nat
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  x :0 ((Channel * Channel))::1
  add :0 (Nat -> Nat -> Nat)::w
}
t  := x
ty := (Channel * Channel)
post_ctx := {
  x :1 ((Channel * Channel))::1
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
}

