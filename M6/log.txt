checking
t  := let tyId := (fun A => fun x => x : (A : Type) -> A -> A) in
               let lnId := (fun A => fun x => x : (A : Linear) -> A -> A) in
               let add :=
                 (fun x =>
                    fun y =>
                      iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
               Nat -> Nat -> Nat) in
               let ch1 := ((open) 0 : Channel) in
               let ch2 := ((open) 0 : Channel) in
               let ch3 := ((open) 1 : Channel) in
               let readClose :=
                 (fun ch =>
                    let (n, ch) := (read) ch in
                    let _ := ((close) ch : unit) in n : Channel -> Nat)
               in
               let adversary :=
                 (fun f =>
                    fun x =>
                      let (x1, x2) := x in
                      let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : 
               Channel -> Nat -> (Channel * Channel) -> Nat) in
               let main :=
                 (let n := ((adversary) readClose) (ch1, ch2) in
                  let ch3 := (write) (n, ch3) in (close) ch3 : unit)
               in main

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  A :1 (Type)::w
}

infer
pre_ctx := {
  _ :0 (A)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  _ :0 (A)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Type)::w
}

infer
pre_ctx := {
}
t  := (A : Type) -> A -> A
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  A :1 (Type)::w
}

infer
pre_ctx := {
  _ :0 (A)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  _ :0 (A)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 (A)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 (A)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 (A)::w
  A :0 (Type)::w
}
t  := x
ty := A
post_ctx := {
  x :1 (A)::w
  A :0 (Type)::w
}

check
pre_ctx := {
  x :0 (A)::w
  A :0 (Type)::w
}
t  := x
ty := A
post_ctx := {
  x :1 (A)::w
  A :0 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := fun x => x
ty := A -> A
post_ctx := {
  A :0 (Type)::w
}

check
pre_ctx := {
}
t  := fun A => fun x => x
ty := (A : Type) -> A -> A
post_ctx := {
}

infer
pre_ctx := {
}
t  := (fun A => fun x => x : (A : Type) -> A -> A)
ty := (A : Type) -> A -> A
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  A :1 (Type)::w
}

infer
pre_ctx := {
  _ :0 (A)::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  _ :0 (A)::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Type)::w
}

infer
pre_ctx := {
}
t  := (A : Type) -> A -> A
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Linear
ty := Type
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (A : Linear) -> A -> A
ty := Type
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Linear
ty := Type
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (A)::1
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := A
post_ctx := {
  x :1 (A)::1
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (A)::1
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := A
post_ctx := {
  x :1 (A)::1
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun x => x
ty := A -> A
post_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun A => fun x => x
ty := (A : Linear) -> A -> A
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun A => fun x => x : (A : Linear) -> A -> A)
ty := (A : Linear) -> A -> A
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Linear
ty := Type
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A
ty := Linear
post_ctx := {
  A :1 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  A :0 (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := A -> A
ty := Type
post_ctx := {
  A :w (Linear)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (A : Linear) -> A -> A
ty := Type
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Nat -> Nat
ty := Type
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) 0
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := y
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := y
ty := ((fun _ => Nat : Nat -> Type)) 0
post_ctx := {
  y :1 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) x)::w
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) _
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  ((fun _ => Nat : Nat -> Type)) _ -> ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) _
ty := Type
post_ctx := {
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => Nat
ty := Nat -> Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (fun _ => Nat : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := _
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (_ +1)
ty := Nat
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :1 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((fun _ => Nat : Nat -> Type)) (_ +1)
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :w (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := ((fun _ => Nat : Nat -> Type)) _
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (x +1)
ty := ((fun _ => Nat : Nat -> Type)) (_ +1)
post_ctx := {
  x :1 (((fun _ => Nat : Nat -> Type)) _)::w
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun x => (x +1)
ty :=
  ((fun _ => Nat : Nat -> Type)) _ -> ((fun _ => Nat : Nat -> Type)) (_ +1)
post_ctx := {
  _ :0 (Nat)::w
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun _ => fun x => (x +1)
ty :=
  (x : Nat) ->
    ((fun _ => Nat : Nat -> Type)) x -> ((fun _ => Nat : Nat -> Type)) (x +1)
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :1 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := Nat
post_ctx := {
  y :0 (Nat)::w
  x :1 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :1 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  y :0 (Nat)::w
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat
post_ctx := {
  y :1 (Nat)::w
  x :1 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat -> Nat
post_ctx := {
  x :1 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x)
ty := Nat -> Nat -> Nat
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  (fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
Nat -> Nat -> Nat)
ty := Nat -> Nat -> Nat
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat -> Nat -> Nat
ty := Type
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := open
ty := Nat -> Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((open) 0 : Channel)
ty := Channel
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := open
ty := Nat -> Channel
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 0
ty := Channel
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((open) 0 : Channel)
ty := Channel
post_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := open
ty := Nat -> Channel
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 0
ty := Nat
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 1
ty := Nat
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := 1
ty := Nat
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 1
ty := Channel
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (open) 1
ty := Channel
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((open) 1 : Channel)
ty := Channel
post_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := read
ty := Channel -> (Nat * Channel)
post_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (read) ch
ty := (Nat * Channel)
post_ctx := {
  ch :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := unit
ty := Type
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := close
ty := Channel -> unit
post_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch
ty := Channel
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (close) ch
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (close) ch
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((close) ch : unit)
ty := unit
post_ctx := {
  ch :1 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := unit
ty := Type
post_ctx := {
  n :0 (Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (unit)::w
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (unit)::w
  ch :0 (Channel)::1
  n :1 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  n :0 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let _ := ((close) ch : unit) in n
ty := Nat
post_ctx := {
  ch :1 (Channel)::1
  n :1 (Nat)::w
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := let (n, ch) := (read) ch in Nat
post_ctx := {
  ch :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := Nat
post_ctx := {
  ch :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n
ty := Channel -> Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
Channel -> Nat)
ty := Channel -> Nat
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat -> (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x
ty := (Channel * Channel)
post_ctx := {
  x :1 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := f
ty := Channel -> Nat
post_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :1 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x1
ty := Channel
post_ctx := {
  x2 :0 (Channel)::1
  x1 :1 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x1
ty := Channel
post_ctx := {
  x2 :0 (Channel)::1
  x1 :1 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (f) x1
ty := Nat
post_ctx := {
  x2 :0 (Channel)::1
  x1 :1 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :1 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := f
ty := Channel -> Nat
post_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :1 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x2
ty := Channel
post_ctx := {
  n1 :0 (Nat)::w
  x2 :1 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := x2
ty := Channel
post_ctx := {
  n1 :0 (Nat)::w
  x2 :1 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (f) x2
ty := Nat
post_ctx := {
  n1 :0 (Nat)::w
  x2 :1 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :1 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := add
ty := Nat -> Nat -> Nat
post_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n1
ty := Nat
post_ctx := {
  n2 :0 (Nat)::w
  n1 :1 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n1
ty := Nat
post_ctx := {
  n2 :0 (Nat)::w
  n1 :1 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (add) n1
ty := Nat -> Nat
post_ctx := {
  n2 :0 (Nat)::w
  n1 :w (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n2
ty := Nat
post_ctx := {
  n2 :1 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n2
ty := Nat
post_ctx := {
  n2 :1 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n2 :0 (Nat)::w
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((add) n1) n2
ty := Nat
post_ctx := {
  n2 :w (Nat)::w
  n1 :w (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n1 :0 (Nat)::w
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let n2 := (f) x2 in ((add) n1) n2
ty := Nat
post_ctx := {
  n1 :w (Nat)::w
  x2 :1 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :1 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x2 :0 (Channel)::1
  x1 :0 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2
ty := Nat
post_ctx := {
  x2 :1 (Channel)::1
  x1 :1 (Channel)::1
  x :0 ((Channel * Channel))::1
  f :w (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let (x1, x2) := x in let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2
ty := let (x1, x2) := x in Nat
post_ctx := {
  x :1 ((Channel * Channel))::1
  f :w (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  x :0 ((Channel * Channel))::1
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let (x1, x2) := x in let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2
ty := Nat
post_ctx := {
  x :1 ((Channel * Channel))::1
  f :w (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  f :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  fun x =>
    let (x1, x2) := x in
    let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2
ty := (Channel * Channel) -> Nat
post_ctx := {
  f :w (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  fun f =>
    fun x =>
      let (x1, x2) := x in
      let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2
ty := Channel -> Nat -> (Channel * Channel) -> Nat
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  (fun f =>
     fun x =>
       let (x1, x2) := x in
       let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel -> Nat ->
                                                                 (Channel * Channel) ->
                                                                   Nat)
ty := Channel -> Nat -> (Channel * Channel) -> Nat
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  _ :0 (Channel -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat -> (Channel * Channel) -> Nat
ty := Type
post_ctx := {
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := unit
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := adversary
ty := Channel -> Nat -> (Channel * Channel) -> Nat
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel -> Nat
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := readClose
ty := Channel -> Nat
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :1 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := readClose
ty := Channel -> Nat
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :1 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (adversary) readClose
ty := (Channel * Channel) -> Nat
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Channel * Channel)
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch1
ty := Channel
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch1
ty := Channel
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch2
ty := Channel
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch2
ty := Channel
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (ch1, ch2)
ty := (Channel * Channel)
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ((adversary) readClose) (ch1, ch2)
ty := Nat
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := write
ty := (Nat * Channel) -> Channel
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Nat * Channel)
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (Nat * Channel)
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch3
ty := Channel
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch3
ty := Channel
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (n, ch3)
ty := (Nat * Channel)
post_ctx := {
  n :1 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (write) (n, ch3)
ty := Channel
post_ctx := {
  n :1 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch3 :0 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := close
ty := Channel -> unit
post_ctx := {
  ch3 :0 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := Channel
ty := Linear
post_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch3 :0 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch3
ty := Channel
post_ctx := {
  ch3 :1 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  ch3 :0 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := ch3
ty := Channel
post_ctx := {
  ch3 :1 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch3 :0 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := (close) ch3
ty := unit
post_ctx := {
  ch3 :1 (Channel)::1
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := let ch3 := (write) (n, ch3) in (close) ch3
ty := unit
post_ctx := {
  n :1 (Nat)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let n := ((adversary) readClose) (ch1, ch2) in
  let ch3 := (write) (n, ch3) in (close) ch3
ty := unit
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

check
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let n := ((adversary) readClose) (ch1, ch2) in
  let ch3 := (write) (n, ch3) in (close) ch3
ty := unit
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  (let n := ((adversary) readClose) (ch1, ch2) in
   let ch3 := (write) (n, ch3) in (close) ch3 : unit)
ty := unit
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := unit
ty := Type
post_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  main :0 (unit)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  := main
ty := unit
post_ctx := {
  main :1 (unit)::w
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  adversary :0 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  adversary :1 (Channel -> Nat -> (Channel * Channel) -> Nat)::w
  readClose :w (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  readClose :0 (Channel -> Nat)::w
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  readClose :w (Channel -> Nat)::w
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch3 :0 (Channel)::1
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  ch3 :1 (Channel)::1
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch2 :0 (Channel)::1
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  ch2 :1 (Channel)::1
  ch1 :1 (Channel)::1
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  ch1 :0 (Channel)::1
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let ch2 := ((open) 0 : Channel) in
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  ch1 :1 (Channel)::1
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  add :0 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let ch1 := ((open) 0 : Channel) in
  let ch2 := ((open) 0 : Channel) in
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  add :1 (Nat -> Nat -> Nat)::w
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let add :=
    (fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
  Nat -> Nat -> Nat) in
  let ch1 := ((open) 0 : Channel) in
  let ch2 := ((open) 0 : Channel) in
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  lnId :0 ((A : Linear) -> A -> A)::w
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}
t  :=
  let lnId := (fun A => fun x => x : (A : Linear) -> A -> A) in
  let add :=
    (fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
  Nat -> Nat -> Nat) in
  let ch1 := ((open) 0 : Channel) in
  let ch2 := ((open) 0 : Channel) in
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
  tyId :0 ((A : Type) -> A -> A)::w
}

infer
pre_ctx := {
}
t  :=
  let tyId := (fun A => fun x => x : (A : Type) -> A -> A) in
  let lnId := (fun A => fun x => x : (A : Linear) -> A -> A) in
  let add :=
    (fun x => fun y => iter (fun _ => Nat, y, fun _ => fun x => (x +1), x) : 
  Nat -> Nat -> Nat) in
  let ch1 := ((open) 0 : Channel) in
  let ch2 := ((open) 0 : Channel) in
  let ch3 := ((open) 1 : Channel) in
  let readClose :=
    (fun ch => let (n, ch) := (read) ch in let _ := ((close) ch : unit) in n : 
  Channel -> Nat) in
  let adversary :=
    (fun f =>
       fun x =>
         let (x1, x2) := x in
         let n1 := (f) x1 in let n2 := (f) x2 in ((add) n1) n2 : Channel ->
                                                                   Nat ->
                                                                   (Channel * Channel) ->
                                                                    Nat)
  in
  let main :=
    (let n := ((adversary) readClose) (ch1, ch2) in
     let ch3 := (write) (n, ch3) in (close) ch3 : unit)
  in main
ty := unit
post_ctx := {
}

complete
post_ctx := {
}
t  := (close) (write) (iter (fun _ => Nat,
                         let (n, ch) := (read) (open) 0 in n,
                         fun _ => fun x => (x +1),
                         let (n, ch) := (read) (open) 0 in n), (open) 1)
ty := 
unit
