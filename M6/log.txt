checking
t  := let Loc := (Nat : Type) in
               let Ptr := (fun A => (x : Loc * [x |-> A]) : Type -> Linear)
               in
               let UL := ((Unit | Loc) : Type) in
               let nil := ((x : UL * x === (left ())) : Type) in
               let cons :=
                 (fun l => (x : UL * x === (right l)) : Loc -> Type)
               in
               let LList :=
                 (fun n =>
                    iter (fun _ => Loc -> Linear, fun l => [l |-> nil],
                      fun n =>
                        fun LListn =>
                          fun l =>
                            (l' : Loc * ([l |-> (cons) l'] * (LListn) l')),
                      n) : Nat -> Loc -> Linear)
               in
               let List :=
                 (fun n => (l : Loc * ((LList) n) l) : (n : Nat) -> Linear)
               in
               let Nil :=
                 (((alloc) nil) ((left ()), (refl (left ()) UL)) : (List) 0)
               in let main := (((free) nil) Nil : Unit) in main

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Type
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  A :0 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := x
ty := (Nat : Type)
post_ctx := {
  x :1 ((Nat : Type))::w
  A :0 (Type)::w
}

check
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 ((Nat : Type))::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}

infer
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 ((Nat : Type))::w
  A :1 (Type)::w
}

check
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := A
ty := Type
post_ctx := {
  x :0 ((Nat : Type))::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  x :0 ((Nat : Type))::w
  A :0 (Type)::w
}
t  := [x |-> A]
ty := Linear
post_ctx := {
  x :1 ((Nat : Type))::w
  A :1 (Type)::w
}

infer
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : (Nat : Type) * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
  A :0 (Type)::w
}
t  := (x : (Nat : Type) * [x |-> A])
ty := Linear
post_ctx := {
  A :1 (Type)::w
}

check
pre_ctx := {
}
t  := fun A => (x : (Nat : Type) * [x |-> A])
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := (fun A => (x : (Nat : Type) * [x |-> A]) : Type -> Linear)
ty := Type -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Type)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 (Type)::w
}

infer
pre_ctx := {
}
t  := Type -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
}

infer
pre_ctx := {
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := (right l)
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
}
t  := x === (right l)
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
}

check
pre_ctx := {
}
t  := fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := (Nat : Type) -> Type
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)
ty := (Nat : Type) -> Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
}

infer
pre_ctx := {
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := Nat -> (Nat : Type) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  fun l =>
    [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (right l)
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := x === (right l)
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  [l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type)) l']
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := LListn
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  := (LListn) l'
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  ([l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
   (Nat : Type) -> Type)) l'] * (LListn) l')
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    (l' : (Nat : Type) * ([l |-> ((fun l =>
                                     (x : ((Unit | (Nat : Type)) : Type) * 
                                     x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}
t  :=
  fun LListn =>
    fun l =>
      (l' : (Nat : Type) * ([l |-> ((fun l =>
                                       (x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (right l)) : (Nat : Type) ->
                                                            Type)) l'] * (LListn) l'))
ty :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  fun n =>
    fun LListn =>
      fun l =>
        (l' : (Nat : Type) * ([l |-> ((fun l =>
                                         (x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (right l)) : (Nat : Type) ->
                                                              Type)) l'] * (LListn) l'))
ty :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
}

check
pre_ctx := {
}
t  :=
  fun n =>
    iter (fun _ => (Nat : Type) -> Linear,
      fun l =>
        [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
      fun n =>
        fun LListn =>
          fun l =>
            (l' : (Nat : Type) * ([l |-> ((fun l =>
                                             (x : ((Unit | (Nat : Type)) : Type) * 
                                             x === (right l)) : (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
      n)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun n =>
     iter (fun _ => (Nat : Type) -> Linear,
       fun l =>
         [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
       fun n =>
         fun LListn =>
           fun l =>
             (l' : (Nat : Type) * ([l |-> ((fun l =>
                                              (x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (right l)) : (Nat : Type) ->
                                                                   Type)) l'] * (LListn) l')),
       n) : Nat -> (Nat : Type) -> Linear)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := Nat -> (Nat : Type) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := (n : Nat) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> (Nat : Type) -> Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (right l)
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (right l)
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  [l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type)) l']
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := LListn
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (LListn) l'
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ([l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
   (Nat : Type) -> Type)) l'] * (LListn) l')
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    (l' : (Nat : Type) * ([l |-> ((fun l =>
                                     (x : ((Unit | (Nat : Type)) : Type) * 
                                     x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun LListn =>
    fun l =>
      (l' : (Nat : Type) * ([l |-> ((fun l =>
                                       (x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (right l)) : (Nat : Type) ->
                                                            Type)) l'] * (LListn) l'))
ty :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    fun LListn =>
      fun l =>
        (l' : (Nat : Type) * ([l |-> ((fun l =>
                                         (x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (right l)) : (Nat : Type) ->
                                                              Type)) l'] * (LListn) l'))
ty :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    iter (fun _ => (Nat : Type) -> Linear,
      fun l =>
        [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
      fun n =>
        fun LListn =>
          fun l =>
            (l' : (Nat : Type) * ([l |-> ((fun l =>
                                             (x : ((Unit | (Nat : Type)) : Type) * 
                                             x === (right l)) : (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
      n)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun n =>
     iter (fun _ => (Nat : Type) -> Linear,
       fun l =>
         [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
       fun n =>
         fun LListn =>
           fun l =>
             (l' : (Nat : Type) * ([l |-> ((fun l =>
                                              (x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (right l)) : (Nat : Type) ->
                                                                   Type)) l'] * (LListn) l')),
       n) : Nat -> (Nat : Type) -> Linear)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun n =>
      iter (fun _ => (Nat : Type) -> Linear,
        fun l =>
          [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
        fun n =>
          fun LListn =>
            fun l =>
              (l' : (Nat : Type) * ([l |-> ((fun l =>
                                               (x : ((Unit | (Nat : Type)) : Type) * 
                                               x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
        n) : Nat -> (Nat : Type) -> Linear)) n
ty := (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (((fun n =>
       iter (fun _ => (Nat : Type) -> Linear,
         fun l =>
           [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
         fun n =>
           fun LListn =>
             fun l =>
               (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                (x : ((Unit | (Nat : Type)) : Type) * 
                                                x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)) n) l
ty := Linear
post_ctx := {
  l :w ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
}
t  :=
  fun n =>
    (l : (Nat : Type) * (((fun n =>
                             iter (fun _ => (Nat : Type) -> Linear,
                               fun l =>
                                 [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (left ())) : Type)],
                               fun n =>
                                 fun LListn =>
                                   fun l =>
                                     (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                           (Nat : Type) ->
                                                             Type)) l'] * (LListn) l')),
                               n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun n =>
     (l : (Nat : Type) * (((fun n =>
                              iter (fun _ => (Nat : Type) -> Linear,
                                fun l =>
                                  [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                          x === (left ())) : Type)],
                                fun n =>
                                  fun LListn =>
                                    fun l =>
                                      (l' : (Nat : Type) * ([l |-> ((
                                                            fun l =>
                                                              (x : ((
                                                                    Unit | (Nat : Type)) : Type) * 
                                                              x === (right l)) : 
                                                            (Nat : Type) ->
                                                              Type)) l'] * (LListn) l')),
                                n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := (n : Nat) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := (n : Nat) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> (Nat : Type) -> Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (right l)
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (right l)
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  [l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type)) l']
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := LListn
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (LListn) l'
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ([l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
   (Nat : Type) -> Type)) l'] * (LListn) l')
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    (l' : (Nat : Type) * ([l |-> ((fun l =>
                                     (x : ((Unit | (Nat : Type)) : Type) * 
                                     x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun LListn =>
    fun l =>
      (l' : (Nat : Type) * ([l |-> ((fun l =>
                                       (x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (right l)) : (Nat : Type) ->
                                                            Type)) l'] * (LListn) l'))
ty :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    fun LListn =>
      fun l =>
        (l' : (Nat : Type) * ([l |-> ((fun l =>
                                         (x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (right l)) : (Nat : Type) ->
                                                              Type)) l'] * (LListn) l'))
ty :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    iter (fun _ => (Nat : Type) -> Linear,
      fun l =>
        [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
      fun n =>
        fun LListn =>
          fun l =>
            (l' : (Nat : Type) * ([l |-> ((fun l =>
                                             (x : ((Unit | (Nat : Type)) : Type) * 
                                             x === (right l)) : (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
      n)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun n =>
     iter (fun _ => (Nat : Type) -> Linear,
       fun l =>
         [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
       fun n =>
         fun LListn =>
           fun l =>
             (l' : (Nat : Type) * ([l |-> ((fun l =>
                                              (x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (right l)) : (Nat : Type) ->
                                                                   Type)) l'] * (LListn) l')),
       n) : Nat -> (Nat : Type) -> Linear)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun n =>
      iter (fun _ => (Nat : Type) -> Linear,
        fun l =>
          [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
        fun n =>
          fun LListn =>
            fun l =>
              (l' : (Nat : Type) * ([l |-> ((fun l =>
                                               (x : ((Unit | (Nat : Type)) : Type) * 
                                               x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
        n) : Nat -> (Nat : Type) -> Linear)) n
ty := (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (((fun n =>
       iter (fun _ => (Nat : Type) -> Linear,
         fun l =>
           [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
         fun n =>
           fun LListn =>
             fun l =>
               (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                (x : ((Unit | (Nat : Type)) : Type) * 
                                                x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)) n) l
ty := Linear
post_ctx := {
  l :w ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
}
t  :=
  fun n =>
    (l : (Nat : Type) * (((fun n =>
                             iter (fun _ => (Nat : Type) -> Linear,
                               fun l =>
                                 [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (left ())) : Type)],
                               fun n =>
                                 fun LListn =>
                                   fun l =>
                                     (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                           (Nat : Type) ->
                                                             Type)) l'] * (LListn) l')),
                               n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun n =>
     (l : (Nat : Type) * (((fun n =>
                              iter (fun _ => (Nat : Type) -> Linear,
                                fun l =>
                                  [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                          x === (left ())) : Type)],
                                fun n =>
                                  fun LListn =>
                                    fun l =>
                                      (l' : (Nat : Type) * ([l |-> ((
                                                            fun l =>
                                                              (x : ((
                                                                    Unit | (Nat : Type)) : Type) * 
                                                              x === (right l)) : 
                                                            (Nat : Type) ->
                                                              Type)) l'] * (LListn) l')),
                                n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

check
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  ((fun n =>
      (l : (Nat : Type) * (((fun n =>
                               iter (fun _ => (Nat : Type) -> Linear,
                                 fun l =>
                                   [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (left ())) : Type)],
                                 fun n =>
                                   fun LListn =>
                                     fun l =>
                                       (l' : (Nat : Type) * ([l |-> ((
                                                             fun l =>
                                                               (x : (
                                                               (Unit | (Nat : Type)) : Type) * 
                                                               x ===
                                                                 (right l)) : 
                                                             (Nat : Type) ->
                                                               Type)) l'] * (LListn) l')),
                                 n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)) 0
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := alloc
ty := (A : Type) -> A -> (x : Nat * [x |-> A])
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty :=
  ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type) ->
    (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)])
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
}

infer
pre_ctx := {
}
t  := (left ()) === (left ())
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := ()
ty := Unit
post_ctx := {
}

check
pre_ctx := {
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
}

infer
pre_ctx := {
}
t  := (refl (left ()) ((Unit | (Nat : Type)) : Type))
ty := (left ()) === (left ())
post_ctx := {
}

check
pre_ctx := {
}
t  := (refl (left ()) ((Unit | (Nat : Type)) : Type))
ty := (left ()) === (left ())
post_ctx := {
}

check
pre_ctx := {
}
t  := ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type)))
ty := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  ((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type)))
ty :=
  (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)])
post_ctx := {
}

check
pre_ctx := {
}
t  :=
  ((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type)))
ty :=
  ((fun n =>
      (l : (Nat : Type) * (((fun n =>
                               iter (fun _ => (Nat : Type) -> Linear,
                                 fun l =>
                                   [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (left ())) : Type)],
                                 fun n =>
                                   fun LListn =>
                                     fun l =>
                                       (l' : (Nat : Type) * ([l |-> ((
                                                             fun l =>
                                                               (x : (
                                                               (Unit | (Nat : Type)) : Type) * 
                                                               x ===
                                                                 (right l)) : 
                                                             (Nat : Type) ->
                                                               Type)) l'] * (LListn) l')),
                                 n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)) 0
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : ((fun n =>
                                                                   (l : (Nat : Type) * (((
                                                                   fun n =>
                                                                    iter (
                                                                    fun _ =>
                                                                    (Nat : Type) ->
                                                                    Linear,
                                                                    fun l =>
                                                                    [l |-> (
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (left ())) : Type)],
                                                                    fun n =>
                                                                    fun LListn =>
                                                                    fun l =>
                                                                    (l' : (Nat : Type) * 
                                                                    (
                                                                    [l |-> ((
                                                                    fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                                    (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
                                                                    n) : 
                                                                   Nat ->
                                                                    (Nat : Type) ->
                                                                    Linear)) n) l) : 
(n : Nat) -> Linear)) 0)
ty :=
  ((fun n =>
      (l : (Nat : Type) * (((fun n =>
                               iter (fun _ => (Nat : Type) -> Linear,
                                 fun l =>
                                   [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (left ())) : Type)],
                                 fun n =>
                                   fun LListn =>
                                     fun l =>
                                       (l' : (Nat : Type) * ([l |-> ((
                                                             fun l =>
                                                               (x : (
                                                               (Unit | (Nat : Type)) : Type) * 
                                                               x ===
                                                                 (right l)) : 
                                                             (Nat : Type) ->
                                                               Type)) l'] * (LListn) l')),
                                 n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)) 0
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
}
t  := (n : Nat) -> Linear
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> (Nat : Type) -> Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := 0
ty := Nat
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) 0
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x)::w
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  x :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  _ :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
ty := Type
post_ctx := {
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat -> Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Linear
ty := Type
post_ctx := {
  _ :0 (Nat)::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun _ => (Nat : Type) -> Linear
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (fun _ => (Nat : Type) -> Linear : Nat -> Type)
ty := Nat -> Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (n +1)
ty := Nat
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :1 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :w (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Linear
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := Nat
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  _ :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type) -> Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (right l)
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := x === (right l)
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := Type
post_ctx := {
  l :1 ((Nat : Type))::w
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l))
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)
ty := (Nat : Type) -> Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
(Nat : Type) -> Type)) l'
ty := Type
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  [l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type)) l']
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := LListn
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l'
ty := (Nat : Type)
post_ctx := {
  l' :1 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (LListn) l'
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l' :0 ((Nat : Type))::w
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ([l |-> ((fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
   (Nat : Type) -> Type)) l'] * (LListn) l')
ty := Linear
post_ctx := {
  l' :w ((Nat : Type))::w
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (l' : (Nat : Type) * ([l |-> ((fun l =>
                                   (x : ((Unit | (Nat : Type)) : Type) * 
                                   x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := Linear
post_ctx := {
  l :1 ((Nat : Type))::w
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  LListn :0 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun l =>
    (l' : (Nat : Type) * ([l |-> ((fun l =>
                                     (x : ((Unit | (Nat : Type)) : Type) * 
                                     x === (right l)) : (Nat : Type) -> Type)) l'] * (LListn) l'))
ty := ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  LListn :1 (((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n)::w
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun LListn =>
    fun l =>
      (l' : (Nat : Type) * ([l |-> ((fun l =>
                                       (x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (right l)) : (Nat : Type) ->
                                                            Type)) l'] * (LListn) l'))
ty :=
  ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) n ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (n +1)
post_ctx := {
  n :0 (Nat)::w
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    fun LListn =>
      fun l =>
        (l' : (Nat : Type) * ([l |-> ((fun l =>
                                         (x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (right l)) : (Nat : Type) ->
                                                              Type)) l'] * (LListn) l'))
ty :=
  (x : Nat) ->
    ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) x ->
      ((fun _ => (Nat : Type) -> Linear : Nat -> Type)) (x +1)
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  iter (fun _ => (Nat : Type) -> Linear,
    fun l =>
      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
    fun n =>
      fun LListn =>
        fun l =>
          (l' : (Nat : Type) * ([l |-> ((fun l =>
                                           (x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (right l)) : (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
    n)
ty := (Nat : Type) -> Linear
post_ctx := {
  n :1 (Nat)::w
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  fun n =>
    iter (fun _ => (Nat : Type) -> Linear,
      fun l =>
        [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
      fun n =>
        fun LListn =>
          fun l =>
            (l' : (Nat : Type) * ([l |-> ((fun l =>
                                             (x : ((Unit | (Nat : Type)) : Type) * 
                                             x === (right l)) : (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
      n)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (fun n =>
     iter (fun _ => (Nat : Type) -> Linear,
       fun l =>
         [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
       fun n =>
         fun LListn =>
           fun l =>
             (l' : (Nat : Type) * ([l |-> ((fun l =>
                                              (x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (right l)) : (Nat : Type) ->
                                                                   Type)) l'] * (LListn) l')),
       n) : Nat -> (Nat : Type) -> Linear)
ty := Nat -> (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := n
ty := Nat
post_ctx := {
  l :0 ((Nat : Type))::w
  n :1 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  ((fun n =>
      iter (fun _ => (Nat : Type) -> Linear,
        fun l =>
          [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
        fun n =>
          fun LListn =>
            fun l =>
              (l' : (Nat : Type) * ([l |-> ((fun l =>
                                               (x : ((Unit | (Nat : Type)) : Type) * 
                                               x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
        n) : Nat -> (Nat : Type) -> Linear)) n
ty := (Nat : Type) -> Linear
post_ctx := {
  l :0 ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

check
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  := l
ty := (Nat : Type)
post_ctx := {
  l :1 ((Nat : Type))::w
  n :0 (Nat)::w
}

infer
pre_ctx := {
  l :0 ((Nat : Type))::w
  n :0 (Nat)::w
}
t  :=
  (((fun n =>
       iter (fun _ => (Nat : Type) -> Linear,
         fun l =>
           [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
         fun n =>
           fun LListn =>
             fun l =>
               (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                (x : ((Unit | (Nat : Type)) : Type) * 
                                                x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)) n) l
ty := Linear
post_ctx := {
  l :w ((Nat : Type))::w
  n :w (Nat)::w
}

infer
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
  n :0 (Nat)::w
}
t  :=
  (l : (Nat : Type) * (((fun n =>
                           iter (fun _ => (Nat : Type) -> Linear,
                             fun l =>
                               [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                       x === (left ())) : Type)],
                             fun n =>
                               fun LListn =>
                                 fun l =>
                                   (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                         (Nat : Type) -> Type)) l'] * (LListn) l')),
                             n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := Linear
post_ctx := {
  n :w (Nat)::w
}

check
pre_ctx := {
}
t  :=
  fun n =>
    (l : (Nat : Type) * (((fun n =>
                             iter (fun _ => (Nat : Type) -> Linear,
                               fun l =>
                                 [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                         x === (left ())) : Type)],
                               fun n =>
                                 fun LListn =>
                                   fun l =>
                                     (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                           (Nat : Type) ->
                                                             Type)) l'] * (LListn) l')),
                               n) : Nat -> (Nat : Type) -> Linear)) n) l)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  (fun n =>
     (l : (Nat : Type) * (((fun n =>
                              iter (fun _ => (Nat : Type) -> Linear,
                                fun l =>
                                  [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                          x === (left ())) : Type)],
                                fun n =>
                                  fun LListn =>
                                    fun l =>
                                      (l' : (Nat : Type) * ([l |-> ((
                                                            fun l =>
                                                              (x : ((
                                                                    Unit | (Nat : Type)) : Type) * 
                                                              x === (right l)) : 
                                                            (Nat : Type) ->
                                                              Type)) l'] * (LListn) l')),
                                n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)
ty := (n : Nat) -> Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

check
pre_ctx := {
}
t  := 0
ty := Nat
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  ((fun n =>
      (l : (Nat : Type) * (((fun n =>
                               iter (fun _ => (Nat : Type) -> Linear,
                                 fun l =>
                                   [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (left ())) : Type)],
                                 fun n =>
                                   fun LListn =>
                                     fun l =>
                                       (l' : (Nat : Type) * ([l |-> ((
                                                             fun l =>
                                                               (x : (
                                                               (Unit | (Nat : Type)) : Type) * 
                                                               x ===
                                                                 (right l)) : 
                                                             (Nat : Type) ->
                                                               Type)) l'] * (LListn) l')),
                                 n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)) 0
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := free
ty := (A : Type) -> (x : Nat * [x |-> A]) -> Unit
post_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Type
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Nat : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

check
pre_ctx := {
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

check
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

check
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := (free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty :=
  (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]) ->
    Unit
post_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
}
t  :=
  (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)])
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
}
t  := Nat
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := x
ty := Nat
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Type
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Nat
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Nat : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (Unit | (Nat : Type))
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ((Unit | (Nat : Type)) : Type)
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := Unit
ty := Type
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := ()
ty := Unit
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := (left ())
ty := ((Unit | (Nat : Type)) : Type)
post_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}
t  := x === (left ())
ty := Type
post_ctx := {
  x :1 (((Unit | (Nat : Type)) : Type))::w
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := (x : ((Unit | (Nat : Type)) : Type) * x === (left ()))
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

check
pre_ctx := {
  x :0 (Nat)::w
}
t  := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
ty := Type
post_ctx := {
  x :0 (Nat)::w
}

infer
pre_ctx := {
  x :0 (Nat)::w
}
t  := [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)]
ty := Linear
post_ctx := {
  x :1 (Nat)::w
}

infer
pre_ctx := {
}
t  :=
  (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)])
ty := Linear
post_ctx := {
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := Nil
ty :=
  ((fun n =>
      (l : (Nat : Type) * (((fun n =>
                               iter (fun _ => (Nat : Type) -> Linear,
                                 fun l =>
                                   [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                           x === (left ())) : Type)],
                                 fun n =>
                                   fun LListn =>
                                     fun l =>
                                       (l' : (Nat : Type) * ([l |-> ((
                                                             fun l =>
                                                               (x : (
                                                               (Unit | (Nat : Type)) : Type) * 
                                                               x ===
                                                                 (right l)) : 
                                                             (Nat : Type) ->
                                                               Type)) l'] * (LListn) l')),
                                 n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
(n : Nat) -> Linear)) 0
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

check
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := Nil
ty :=
  (x : Nat * [x |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)])
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  :=
  ((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil
ty := Unit
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

check
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  :=
  ((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil
ty := Unit
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  :=
  (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
Unit)
ty := Unit
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
}
t  := Unit
ty := Type
post_ctx := {
}

infer
pre_ctx := {
  main :0 (Unit)::w
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  := main
ty := Unit
post_ctx := {
  main :1 (Unit)::w
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
  Nil :0
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}
t  :=
  let main :=
    (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
  Unit) in main
ty := Unit
post_ctx := {
  Nil :1
    (((fun n =>
         (l : (Nat : Type) * (((fun n =>
                                  iter (fun _ => (Nat : Type) -> Linear,
                                    fun l =>
                                      [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                              x === (left ())) : Type)],
                                    fun n =>
                                      fun LListn =>
                                        fun l =>
                                          (l' : (Nat : Type) * ([l |-> ((
                                                                fun l =>
                                                                  (x : (
                                                                  (Unit | (Nat : Type)) : Type) * 
                                                                  x ===
                                                                    (right l)) : 
                                                                (Nat : Type) ->
                                                                  Type)) l'] * (LListn) l')),
                                    n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear)) 0)::1
}

infer
pre_ctx := {
}
t  :=
  let Nil :=
    (((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
  ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : ((fun n =>
                                                                    (l : (Nat : Type) * (((
                                                                    fun n =>
                                                                    iter (
                                                                    fun _ =>
                                                                    (Nat : Type) ->
                                                                    Linear,
                                                                    fun l =>
                                                                    [l |-> (
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (left ())) : Type)],
                                                                    fun n =>
                                                                    fun LListn =>
                                                                    fun l =>
                                                                    (l' : (Nat : Type) * 
                                                                    (
                                                                    [l |-> ((
                                                                    fun l =>
                                                                    (x : (
                                                                    (
                                                                    Unit | (Nat : Type)) : Type) * 
                                                                    x ===
                                                                    (right l)) : 
                                                                    (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
                                                                    n) : 
                                                                    Nat ->
                                                                    (Nat : Type) ->
                                                                    Linear)) n) l) : 
  (n : Nat) -> Linear)) 0) in
  let main :=
    (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
  Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let List :=
    (fun n =>
       (l : (Nat : Type) * (((fun n =>
                                iter (fun _ => (Nat : Type) -> Linear,
                                  fun l =>
                                    [l |-> ((x : ((Unit | (Nat : Type)) : Type) * 
                                            x === (left ())) : Type)],
                                  fun n =>
                                    fun LListn =>
                                      fun l =>
                                        (l' : (Nat : Type) * ([l |-> ((
                                                              fun l =>
                                                                (x : (
                                                                (Unit | (Nat : Type)) : Type) * 
                                                                x ===
                                                                  (right l)) : 
                                                              (Nat : Type) ->
                                                                Type)) l'] * (LListn) l')),
                                  n) : Nat -> (Nat : Type) -> Linear)) n) l) : 
  (n : Nat) -> Linear) in
  let Nil :=
    (((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
  ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : (List) 0) in
  let main :=
    (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
  Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let LList :=
    (fun n =>
       iter (fun _ => (Nat : Type) -> Linear,
         fun l =>
           [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
         fun n =>
           fun LListn =>
             fun l =>
               (l' : (Nat : Type) * ([l |-> ((fun l =>
                                                (x : ((Unit | (Nat : Type)) : Type) * 
                                                x === (right l)) : (Nat : Type) ->
                                                                    Type)) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)
  in
  let List :=
    (fun n => (l : (Nat : Type) * ((LList) n) l) : (n : Nat) -> Linear)
  in
  let Nil :=
    (((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
  ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : (List) 0) in
  let main :=
    (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
  Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let cons :=
    (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type) in
  let LList :=
    (fun n =>
       iter (fun _ => (Nat : Type) -> Linear,
         fun l =>
           [l |-> ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)],
         fun n =>
           fun LListn =>
             fun l => (l' : (Nat : Type) * ([l |-> (cons) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)
  in
  let List :=
    (fun n => (l : (Nat : Type) * ((LList) n) l) : (n : Nat) -> Linear)
  in
  let Nil :=
    (((alloc) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) 
  ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : (List) 0) in
  let main :=
    (((free) ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)) Nil : 
  Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let nil := ((x : ((Unit | (Nat : Type)) : Type) * x === (left ())) : Type)
  in
  let cons :=
    (fun l => (x : ((Unit | (Nat : Type)) : Type) * x === (right l)) : 
  (Nat : Type) -> Type) in
  let LList :=
    (fun n =>
       iter (fun _ => (Nat : Type) -> Linear, fun l => [l |-> nil],
         fun n =>
           fun LListn =>
             fun l => (l' : (Nat : Type) * ([l |-> (cons) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)
  in
  let List :=
    (fun n => (l : (Nat : Type) * ((LList) n) l) : (n : Nat) -> Linear)
  in
  let Nil :=
    (((alloc) nil) ((left ()), (refl (left ()) ((Unit | (Nat : Type)) : Type))) : (List) 0)
  in let main := (((free) nil) Nil : Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let UL := ((Unit | (Nat : Type)) : Type) in
  let nil := ((x : UL * x === (left ())) : Type) in
  let cons := (fun l => (x : UL * x === (right l)) : (Nat : Type) -> Type) in
  let LList :=
    (fun n =>
       iter (fun _ => (Nat : Type) -> Linear, fun l => [l |-> nil],
         fun n =>
           fun LListn =>
             fun l => (l' : (Nat : Type) * ([l |-> (cons) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)
  in
  let List :=
    (fun n => (l : (Nat : Type) * ((LList) n) l) : (n : Nat) -> Linear)
  in
  let Nil := (((alloc) nil) ((left ()), (refl (left ()) UL)) : (List) 0) in
  let main := (((free) nil) Nil : Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let Ptr := (fun A => (x : (Nat : Type) * [x |-> A]) : Type -> Linear) in
  let UL := ((Unit | (Nat : Type)) : Type) in
  let nil := ((x : UL * x === (left ())) : Type) in
  let cons := (fun l => (x : UL * x === (right l)) : (Nat : Type) -> Type) in
  let LList :=
    (fun n =>
       iter (fun _ => (Nat : Type) -> Linear, fun l => [l |-> nil],
         fun n =>
           fun LListn =>
             fun l => (l' : (Nat : Type) * ([l |-> (cons) l'] * (LListn) l')),
         n) : Nat -> (Nat : Type) -> Linear)
  in
  let List :=
    (fun n => (l : (Nat : Type) * ((LList) n) l) : (n : Nat) -> Linear)
  in
  let Nil := (((alloc) nil) ((left ()), (refl (left ()) UL)) : (List) 0) in
  let main := (((free) nil) Nil : Unit) in main
ty := Unit
post_ctx := {
}

infer
pre_ctx := {
}
t  :=
  let Loc := (Nat : Type) in
  let Ptr := (fun A => (x : Loc * [x |-> A]) : Type -> Linear) in
  let UL := ((Unit | Loc) : Type) in
  let nil := ((x : UL * x === (left ())) : Type) in
  let cons := (fun l => (x : UL * x === (right l)) : Loc -> Type) in
  let LList :=
    (fun n =>
       iter (fun _ => Loc -> Linear, fun l => [l |-> nil],
         fun n =>
           fun LListn =>
             fun l => (l' : Loc * ([l |-> (cons) l'] * (LListn) l')),
         n) : Nat -> Loc -> Linear)
  in
  let List := (fun n => (l : Loc * ((LList) n) l) : (n : Nat) -> Linear) in
  let Nil := (((alloc) nil) ((left ()), (refl (left ()) UL)) : (List) 0) in
  let main := (((free) nil) Nil : Unit) in main
ty := Unit
post_ctx := {
}

complete
post_ctx := {
}
t  := ((free) (x : (Unit | Nat) * x === (left ()))) ((alloc) (x : (Unit | Nat) * 
                                                             x === (left ()))) 
((left ()), (refl (left ()) (Unit | Nat)))
ty := Unit
