check
ctx := 
t   := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (a :0 Type), forall (x :1 a), forall (y :w a), a

check
ctx := 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (x :1 a), forall (y :w a), a

check
ctx := [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :1 a] [a :0 Type] 
t   := fun (y :w a) => x
q   := 1
ty  := forall (y :w a), a

check
ctx := [x :0 a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :w a] [x :1 a] [a :0 Type] 
t   := x
q   := 1
ty  := a

check
ctx := 
t   := 
  let a :0 Type := forall (a :0 Type), forall (x :1 a), forall (y :w a), a in 
  let f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x in 
  let g :w forall (a :0 Type), forall (x :1 a), forall (y :w a), a := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x in f
q   := 1
ty  := forall (a :0 Type), forall (x :1 a), forall (y :w a), a

check
ctx := 
t   := Type
q   := 0
ty  := Type

check
ctx := 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

infer
ctx := [a :0 Type] 
t   := 
  let f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x in 
  let g :w forall (a :0 Type), forall (x :1 a), forall (y :w a), a := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x in f
q   := 1

check
ctx := [a :0 Type] 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (a :0 Type), forall (x :1 a), forall (y :w a), a

check
ctx := [a :0 Type] 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (x :1 a), forall (y :w a), a

check
ctx := [a :0 Type] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :1 a] [a :0 Type] [a :0 Type] 
t   := fun (y :w a) => x
q   := 1
ty  := forall (y :w a), a

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :w a] [x :1 a] [a :0 Type] [a :0 Type] 
t   := x
q   := 1
ty  := a

infer
ctx := [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := 
  let g :w forall (a :0 Type), forall (x :1 a), forall (y :w a), a := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x in f
q   := 1

check
ctx := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := fun (a :0 Type) => fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (a :0 Type), forall (x :1 a), forall (y :w a), a

check
ctx := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (a :0 Type), forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := Type
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := fun (x :1 a) => fun (y :w a) => x
q   := 1
ty  := forall (x :1 a), forall (y :w a), a

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (x :1 a), forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [x :1 a] [a :0 Type] [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := fun (y :w a) => x
q   := 1
ty  := forall (y :w a), a

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := forall (y :w a), a
q   := 0
ty  := Type

check
ctx := [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :0 a] [x :0 a] [a :0 Type] [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := a
q   := 0
ty  := Type

check
ctx := [y :w a] [x :1 a] [a :0 Type] [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := x
q   := 1
ty  := a

infer
ctx := [g :w forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
t   := f
q   := 1

ctx1 := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
ctx2 := [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
ctx  := [f :1 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
ctx' := [f :0 forall (a :0 Type), forall (x :1 a), forall (y :w a), a] [a :0 Type] 
q1   := w
InferContract(g)

ctx1 := [a :0 Type] 
ctx2 := [a :0 Type] 
ctx  := [a :0 Type] 
ctx' := [a :0 Type] 
q1   := 1
InferContract(f)

ctx1 := 
ctx2 := 
ctx  := 
ctx' := 
q1   := 0
CheckContract(a)

