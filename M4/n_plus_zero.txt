infer_i
ictx := {
}
t  :=
  (fun x =>
     ind ((fun x =>
             (((fun x =>
                  fun y =>
                    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                      fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                        forall (_ : Nat), Nat) x) 0 ===
               x) : forall (_ : Nat), Type,
       ((refl 0)) : ((fun x =>
                        (((fun x =>
                             fun y =>
                               ind ((fun _ => Nat) : forall (_ : Nat), Type,
                                 y, fun _ => fun x => (x +1), x)) : forall (_ :
                                                                    Nat),
                                                                    forall (_ :
                                                                    Nat), Nat) x) 0 ===
                          x) : forall (_ : Nat), Type) 0,
       (fun x =>
          fun pf =>
            ((((fun x =>
                  fun y =>
                    fun pf =>
                      ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                      forall (x : Nat),
                        forall (y : Nat), forall (_ : x === y), Type,
                        (fun x => (refl (x +1))) : forall (x : Nat),
                                                     ((((fun x =>
                                                           fun y =>
                                                             fun _ =>
                                                               (x +1) ===
                                                                 (y +1)) : 
                                                       forall (x : Nat),
                                                         forall (y : Nat),
                                                           forall (_ :
                                                             x === y), Type) x) x) (refl x),
                        x, y, pf)) : forall (x : Nat),
                                       forall (y : Nat),
                                         forall (_ : x === y),
                                           (x +1) === (y +1)) (((fun x =>
                                                                   fun y =>
                                                                    ind ((
                                                                    fun _ =>
                                                                    Nat) : 
                                                                    forall (_ :
                                                                    Nat),
                                                                    Type, y,
                                                                    fun _ =>
                                                                    fun x =>
                                                                    (x +1),
                                                                    x)) : 
                                                               forall (_ :
                                                                 Nat),
                                                                 forall (_ :
                                                                   Nat), Nat) x) 0) x) pf) : 
     forall (x : Nat),
       forall (_ :
         ((fun x =>
             (((fun x =>
                  fun y =>
                    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                      fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                        forall (_ : Nat), Nat) x) 0 ===
               x) : forall (_ : Nat), Type) x),
         ((fun x =>
             (((fun x =>
                  fun y =>
                    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                      fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                        forall (_ : Nat), Nat) x) 0 ===
               x) : forall (_ : Nat), Type) (x +1),
       x)) : forall (x : Nat),
               (((fun x =>
                    fun y =>
                      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                        fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                          forall (_ : Nat),
                                                            Nat) x) 0 ===
                 x

check_i
ictx := {
}
t  :=
  fun x =>
    ind ((fun x =>
            (((fun x =>
                 fun y =>
                   ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                     fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                       forall (_ : Nat), Nat) x) 0 ===
              x) : forall (_ : Nat), Type,
      ((refl 0)) : ((fun x =>
                       (((fun x =>
                            fun y =>
                              ind ((fun _ => Nat) : forall (_ : Nat), Type,
                                y, fun _ => fun x => (x +1), x)) : forall (_ :
                                                                    Nat),
                                                                    forall (_ :
                                                                    Nat), Nat) x) 0 ===
                         x) : forall (_ : Nat), Type) 0,
      (fun x =>
         fun pf =>
           ((((fun x =>
                 fun y =>
                   fun pf =>
                     ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                     forall (x : Nat),
                       forall (y : Nat), forall (_ : x === y), Type,
                       (fun x => (refl (x +1))) : forall (x : Nat),
                                                    ((((fun x =>
                                                          fun y =>
                                                            fun _ =>
                                                              (x +1) ===
                                                                (y +1)) : 
                                                      forall (x : Nat),
                                                        forall (y : Nat),
                                                          forall (_ :
                                                            x === y), Type) x) x) (refl x),
                       x, y, pf)) : forall (x : Nat),
                                      forall (y : Nat),
                                        forall (_ : x === y),
                                          (x +1) === (y +1)) (((fun x =>
                                                                  fun y =>
                                                                    ind ((
                                                                    fun _ =>
                                                                    Nat) : 
                                                                    forall (_ :
                                                                    Nat),
                                                                    Type, y,
                                                                    fun _ =>
                                                                    fun x =>
                                                                    (x +1),
                                                                    x)) : 
                                                              forall (_ :
                                                                Nat),
                                                                forall (_ :
                                                                  Nat), Nat) x) 0) x) pf) : 
    forall (x : Nat),
      forall (_ :
        ((fun x =>
            (((fun x =>
                 fun y =>
                   ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                     fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                       forall (_ : Nat), Nat) x) 0 ===
              x) : forall (_ : Nat), Type) x),
        ((fun x =>
            (((fun x =>
                 fun y =>
                   ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                     fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                       forall (_ : Nat), Nat) x) 0 ===
              x) : forall (_ : Nat), Type) (x +1),
      x)
ty :=
  forall (x : Nat),
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x

check_i
ictx := {
}
t  :=
  forall (x : Nat),
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := Type

infer_i
ictx := {
}
t  :=
  forall (x : Nat),
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x

check_i
ictx := {
}
t  := Nat
ty := Type

infer_i
ictx := {
}
t  := Nat

infer_i
ictx := {
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
}
t  :=
  ind ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type,
    ((refl 0)) : ((fun x =>
                     (((fun x =>
                          fun y =>
                            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                              fun _ => fun x => (x +1), x)) : forall (_ :
                                                                Nat),
                                                                forall (_ :
                                                                  Nat), Nat) x) 0 ===
                       x) : forall (_ : Nat), Type) 0,
    (fun x =>
       fun pf =>
         ((((fun x =>
               fun y =>
                 fun pf =>
                   ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                   forall (x : Nat),
                     forall (y : Nat), forall (_ : x === y), Type,
                     (fun x => (refl (x +1))) : forall (x : Nat),
                                                  ((((fun x =>
                                                        fun y =>
                                                          fun _ =>
                                                            (x +1) === (y +1)) : 
                                                    forall (x : Nat),
                                                      forall (y : Nat),
                                                        forall (_ : x === y),
                                                          Type) x) x) (refl x),
                     x, y, pf)) : forall (x : Nat),
                                    forall (y : Nat),
                                      forall (_ : x === y), (x +1) === (y +1)) 
           (((fun x =>
                fun y =>
                  ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                    fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                      forall (_ : Nat), Nat) x) 0) x) pf) : 
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1),
    x)
ty :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

infer_i
ictx := {
  x : Nat
}
t  :=
  ind ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type,
    ((refl 0)) : ((fun x =>
                     (((fun x =>
                          fun y =>
                            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                              fun _ => fun x => (x +1), x)) : forall (_ :
                                                                Nat),
                                                                forall (_ :
                                                                  Nat), Nat) x) 0 ===
                       x) : forall (_ : Nat), Type) 0,
    (fun x =>
       fun pf =>
         ((((fun x =>
               fun y =>
                 fun pf =>
                   ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                   forall (x : Nat),
                     forall (y : Nat), forall (_ : x === y), Type,
                     (fun x => (refl (x +1))) : forall (x : Nat),
                                                  ((((fun x =>
                                                        fun y =>
                                                          fun _ =>
                                                            (x +1) === (y +1)) : 
                                                    forall (x : Nat),
                                                      forall (y : Nat),
                                                        forall (_ : x === y),
                                                          Type) x) x) (refl x),
                     x, y, pf)) : forall (x : Nat),
                                    forall (y : Nat),
                                      forall (_ : x === y), (x +1) === (y +1)) 
           (((fun x =>
                fun y =>
                  ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                    fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                      forall (_ : Nat), Nat) x) 0) x) pf) : 
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1),
    x)

check_i
ictx := {
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
}
t  :=
  fun x =>
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
}
t  :=
  ((refl 0)) : ((fun x =>
                   (((fun x =>
                        fun y =>
                          ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                            fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                              forall (_ :
                                                                Nat), Nat) x) 0 ===
                     x) : forall (_ : Nat), Type) 0
ty :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  x : Nat
}
t  :=
  ((refl 0)) : ((fun x =>
                   (((fun x =>
                        fun y =>
                          ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                            fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                              forall (_ :
                                                                Nat), Nat) x) 0 ===
                     x) : forall (_ : Nat), Type) 0

check_i
ictx := {
  x : Nat
}
t  := (refl 0)
ty :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  x : Nat
}
t  := (refl 0)

infer_i
ictx := {
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
}
t  :=
  (fun x =>
     fun pf =>
       ((((fun x =>
             fun y =>
               fun pf =>
                 ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                 forall (x : Nat),
                   forall (y : Nat), forall (_ : x === y), Type,
                   (fun x => (refl (x +1))) : forall (x : Nat),
                                                ((((fun x =>
                                                      fun y =>
                                                        fun _ =>
                                                          (x +1) === (y +1)) : 
                                                  forall (x : Nat),
                                                    forall (y : Nat),
                                                      forall (_ : x === y),
                                                        Type) x) x) (refl x),
                   x, y, pf)) : forall (x : Nat),
                                  forall (y : Nat),
                                    forall (_ : x === y), (x +1) === (y +1)) 
         (((fun x =>
              fun y =>
                ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                  fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                    forall (_ : Nat), Nat) x) 0) x) pf) : 
forall (x : Nat),
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)
ty :=
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  x : Nat
}
t  :=
  (fun x =>
     fun pf =>
       ((((fun x =>
             fun y =>
               fun pf =>
                 ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                 forall (x : Nat),
                   forall (y : Nat), forall (_ : x === y), Type,
                   (fun x => (refl (x +1))) : forall (x : Nat),
                                                ((((fun x =>
                                                      fun y =>
                                                        fun _ =>
                                                          (x +1) === (y +1)) : 
                                                  forall (x : Nat),
                                                    forall (y : Nat),
                                                      forall (_ : x === y),
                                                        Type) x) x) (refl x),
                   x, y, pf)) : forall (x : Nat),
                                  forall (y : Nat),
                                    forall (_ : x === y), (x +1) === (y +1)) 
         (((fun x =>
              fun y =>
                ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                  fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                    forall (_ : Nat), Nat) x) 0) x) pf) : 
forall (x : Nat),
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
}
t  :=
  fun x =>
    fun pf =>
      ((((fun x =>
            fun y =>
              fun pf =>
                ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : 
                forall (x : Nat),
                  forall (y : Nat), forall (_ : x === y), Type,
                  (fun x => (refl (x +1))) : forall (x : Nat),
                                               ((((fun x =>
                                                     fun y =>
                                                       fun _ =>
                                                         (x +1) === (y +1)) : 
                                                 forall (x : Nat),
                                                   forall (y : Nat),
                                                     forall (_ : x === y),
                                                       Type) x) x) (refl x),
                  x, y, pf)) : forall (x : Nat),
                                 forall (y : Nat),
                                   forall (_ : x === y), (x +1) === (y +1)) 
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0) x) pf
ty :=
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ :
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) x),
      ((fun x =>
          (((fun x =>
               fun y =>
                 ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                   fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                     forall (_ : Nat), Nat) x) 0 ===
            x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  fun pf =>
    ((((fun x =>
          fun y =>
            fun pf =>
              ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                    Nat),
                                                                    forall (y :
                                                                    Nat),
                                                                    forall (_ :
                                                                    x === y),
                                                                    Type,
                (fun x => (refl (x +1))) : forall (x : Nat),
                                             ((((fun x =>
                                                   fun y =>
                                                     fun _ =>
                                                       (x +1) === (y +1)) : 
                                               forall (x : Nat),
                                                 forall (y : Nat),
                                                   forall (_ : x === y), Type) x) x) (refl x),
                x, y, pf)) : forall (x : Nat),
                               forall (y : Nat),
                                 forall (_ : x === y), (x +1) === (y +1)) 
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0) x) pf
ty :=
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  forall (_ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x),
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     (((fun x =>
          fun y =>
            ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
              fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                forall (_ : Nat), Nat) x) 0 ===
       x) : forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0 ===
      x
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((((fun x =>
        fun y =>
          fun pf =>
            ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                    Nat),
                                                                    forall (y :
                                                                    Nat),
                                                                    forall (_ :
                                                                    x === y),
                                                                    Type,
              (fun x => (refl (x +1))) : forall (x : Nat),
                                           ((((fun x =>
                                                 fun y =>
                                                   fun _ => (x +1) === (y +1)) : 
                                             forall (x : Nat),
                                               forall (y : Nat),
                                                 forall (_ : x === y), Type) x) x) (refl x),
              x, y, pf)) : forall (x : Nat),
                             forall (y : Nat),
                               forall (_ : x === y), (x +1) === (y +1)) 
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0) x) pf
ty :=
  ((fun x =>
      (((fun x =>
           fun y =>
             ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
               fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                 forall (_ : Nat), Nat) x) 0 ===
        x) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((((fun x =>
        fun y =>
          fun pf =>
            ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                    Nat),
                                                                    forall (y :
                                                                    Nat),
                                                                    forall (_ :
                                                                    x === y),
                                                                    Type,
              (fun x => (refl (x +1))) : forall (x : Nat),
                                           ((((fun x =>
                                                 fun y =>
                                                   fun _ => (x +1) === (y +1)) : 
                                             forall (x : Nat),
                                               forall (y : Nat),
                                                 forall (_ : x === y), Type) x) x) (refl x),
              x, y, pf)) : forall (x : Nat),
                             forall (y : Nat),
                               forall (_ : x === y), (x +1) === (y +1)) 
    (((fun x =>
         fun y =>
           ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
             fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                               forall (_ : Nat), Nat) x) 0) x) pf

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         fun pf =>
           ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                   Nat),
                                                                   forall (y :
                                                                    Nat),
                                                                    forall (_ :
                                                                    x === y),
                                                                    Type,
             (fun x => (refl (x +1))) : forall (x : Nat),
                                          ((((fun x =>
                                                fun y =>
                                                  fun _ => (x +1) === (y +1)) : 
                                            forall (x : Nat),
                                              forall (y : Nat),
                                                forall (_ : x === y), Type) x) x) (refl x),
             x, y, pf)) : forall (x : Nat),
                            forall (y : Nat),
                              forall (_ : x === y), (x +1) === (y +1)) 
   (((fun x =>
        fun y =>
          ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
            fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                              forall (_ : Nat), Nat) x) 0) x

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        fun pf =>
          ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                  Nat),
                                                                  forall (y :
                                                                    Nat),
                                                                    forall (_ :
                                                                    x === y),
                                                                    Type,
            (fun x => (refl (x +1))) : forall (x : Nat),
                                         ((((fun x =>
                                               fun y =>
                                                 fun _ => (x +1) === (y +1)) : 
                                           forall (x : Nat),
                                             forall (y : Nat),
                                               forall (_ : x === y), Type) x) x) (refl x),
            x, y, pf)) : forall (x : Nat),
                           forall (y : Nat),
                             forall (_ : x === y), (x +1) === (y +1)) 
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       fun pf =>
         ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                 Nat),
                                                                 forall (y :
                                                                   Nat),
                                                                   forall (_ :
                                                                    x === y),
                                                                    Type,
           (fun x => (refl (x +1))) : forall (x : Nat),
                                        ((((fun x =>
                                              fun y =>
                                                fun _ => (x +1) === (y +1)) : 
                                          forall (x : Nat),
                                            forall (y : Nat),
                                              forall (_ : x === y), Type) x) x) (refl x),
           x, y, pf)) : forall (x : Nat),
                          forall (y : Nat),
                            forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      fun pf =>
        ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x :
                                                                Nat),
                                                                forall (y :
                                                                  Nat),
                                                                  forall (_ :
                                                                    x === y),
                                                                    Type,
          (fun x => (refl (x +1))) : forall (x : Nat),
                                       ((((fun x =>
                                             fun y =>
                                               fun _ => (x +1) === (y +1)) : 
                                         forall (x : Nat),
                                           forall (y : Nat),
                                             forall (_ : x === y), Type) x) x) (refl x),
          x, y, pf)
ty :=
  forall (x : Nat), forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat), forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)
ty := Type

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat), forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    fun pf =>
      ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                              forall (y :
                                                                Nat),
                                                                forall (_ :
                                                                  x === y),
                                                                  Type,
        (fun x => (refl (x +1))) : forall (x : Nat),
                                     ((((fun x =>
                                           fun y =>
                                             fun _ => (x +1) === (y +1)) : 
                                       forall (x : Nat),
                                         forall (y : Nat),
                                           forall (_ : x === y), Type) x) x) (refl x),
        x, y, pf)
ty := forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)
ty := Type

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun pf =>
    ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                            forall (y : Nat),
                                                              forall (_ :
                                                                x === y),
                                                                Type,
      (fun x => (refl (x +1))) : forall (x : Nat),
                                   ((((fun x =>
                                         fun y => fun _ => (x +1) === (y +1)) : 
                                     forall (x : Nat),
                                       forall (y : Nat),
                                         forall (_ : x === y), Type) x) x) (refl x),
      x, y, pf)
ty := forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), (x +1) === (y +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), (x +1) === (y +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type,
    (fun x => (refl (x +1))) : forall (x : Nat),
                                 ((((fun x =>
                                       fun y => fun _ => (x +1) === (y +1)) : 
                                   forall (x : Nat),
                                     forall (y : Nat),
                                       forall (_ : x === y), Type) x) x) (refl x),
    x, y, pf)
ty := (x +1) === (y +1)

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type,
    (fun x => (refl (x +1))) : forall (x : Nat),
                                 ((((fun x =>
                                       fun y => fun _ => (x +1) === (y +1)) : 
                                   forall (x : Nat),
                                     forall (y : Nat),
                                       forall (_ : x === y), Type) x) x) (refl x),
    x, y, pf)

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                     forall (y : Nat),
                                                       forall (_ : x === y),
                                                         Type

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => fun y => fun _ => (x +1) === (y +1)
ty := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun y => fun _ => (x +1) === (y +1)
ty := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => (x +1) === (y +1)
ty := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x => (refl (x +1))) : forall (x : Nat),
                               ((((fun x =>
                                     fun y => fun _ => (x +1) === (y +1)) : 
                                 forall (x : Nat),
                                   forall (y : Nat),
                                     forall (_ : x === y), Type) x) x) (refl x)
ty :=
  forall (x : Nat),
    ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type) x) x) (refl x)

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x => (refl (x +1))) : forall (x : Nat),
                               ((((fun x =>
                                     fun y => fun _ => (x +1) === (y +1)) : 
                                 forall (x : Nat),
                                   forall (y : Nat),
                                     forall (_ : x === y), Type) x) x) (refl x)

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => (refl (x +1))
ty :=
  forall (x : Nat),
    ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type) x) x) (refl x)

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type) x) x) (refl x)
ty := Type

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                          forall (y : Nat),
                                                            forall (_ :
                                                              x === y), Type) x) x) (refl x)

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                        forall (y : Nat),
                                                          forall (_ :
                                                            x === y), Type) x) x) (refl x)

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                       forall (y : Nat),
                                                         forall (_ :
                                                           x === y), Type) x) x

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                      forall (y : Nat),
                                                        forall (_ : x === y),
                                                          Type) x

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                     forall (y : Nat),
                                                       forall (_ : x === y),
                                                         Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => fun y => fun _ => (x +1) === (y +1)
ty := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (x : Nat), forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun y => fun _ => (x +1) === (y +1)
ty := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (y : Nat), forall (_ : x === y), Type

check_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => (x +1) === (y +1)
ty := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : x === y), Type

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x === y

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1) === (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (y +1)

check_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  _ : x === y
  y : Nat
  x : Nat
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (refl x)
ty := x === x

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (refl x)

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (refl (x +1))
ty :=
  ((((fun x => fun y => fun _ => (x +1) === (y +1)) : forall (x : Nat),
                                                        forall (y : Nat),
                                                          forall (_ :
                                                            x === y), Type) x) x) (refl x)

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (refl (x +1))

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := Nat

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := pf
ty := x === y

infer_i
ictx := {
  pf : x === y
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := pf

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0
ty := Nat

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) x

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0
ty := Nat

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := 0

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := pf
ty :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) x) 0 ===
    x

infer_i
ictx := {
  pf :
    ((fun x =>
        (((fun x =>
             fun y =>
               ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                 fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                   forall (_ : Nat), Nat) x) 0 ===
          x) : forall (_ : Nat), Type) x
  x : Nat
  x : Nat
}
t  := pf

check_i
ictx := {
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
}
t  := x

complete
t  :=
  fun x =>
    ind (fun x => ind (fun _ => Nat, 0, fun _ => fun x => (x +1), x) === x,
      (refl 0),
      fun x =>
        fun pf =>
          ind (fun x => fun y => fun _ => (x +1) === (y +1),
            fun x => (refl (x +1)),
            ind (fun _ => Nat, 0, fun _ => fun x => (x +1), x), x, pf),
      x)
ty :=
  forall (x : Nat), ind (fun _ => Nat, 0, fun _ => fun x => (x +1), x) === x
