infer_i
ictx := {
}
t  :=
  let add := (fun x =>
                fun y =>
                  ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
                    fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                                      forall (_ : Nat), Nat in
  let one := 1 in ((add) one) one

infer_i
ictx := {
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
}
t  := Nat
ty := Type

infer_i
ictx := {
}
t  := Nat

infer_i
ictx := {
  _ : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
}
t  := Nat
ty := Type

infer_i
ictx := {
}
t  := Nat

infer_i
ictx := {
  _ : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
}
t  := Nat

infer_i
ictx := {
}
t  :=
  let one := 1 in
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) one) one

infer_i
ictx := {
}
t  := 1

check_i
ictx := {
}
t  := 0
ty := Nat

infer_i
ictx := {
}
t  := 0

check_i
ictx := {
}
t  := Nat
ty := Type

infer_i
ictx := {
}
t  := Nat

infer_i
ictx := {
}
t  :=
  (((fun x =>
       fun y =>
         ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
           fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                             forall (_ : Nat), Nat) 1) 1

infer_i
ictx := {
}
t  :=
  ((fun x =>
      fun y =>
        ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
          fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                            forall (_ : Nat), Nat) 1

infer_i
ictx := {
}
t  :=
  (fun x =>
     fun y =>
       ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
         fun _ => fun x => (x +1), x)) : forall (_ : Nat),
                                           forall (_ : Nat), Nat

check_i
ictx := {
}
t  :=
  fun x =>
    fun y =>
      ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
        fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
}
t  := forall (_ : Nat), forall (_ : Nat), Nat

check_i
ictx := {
}
t  := Nat
ty := Type

infer_i
ictx := {
}
t  := Nat

infer_i
ictx := {
  _ : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  _ : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
}
t  :=
  fun y =>
    ind ((fun _ => Nat) : forall (_ : Nat), Type, y,
      fun _ => fun x => (x +1), x)
ty := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := forall (_ : Nat), Nat

check_i
ictx := {
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  ind ((fun _ => Nat) : forall (_ : Nat), Type, y, fun _ => fun x => (x +1),
    x)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type
ty := forall (_ : Nat), Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := y
ty := ((fun _ => Nat) : forall (_ : Nat), Type) 0

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := y

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := fun _ => fun x => (x +1)
ty :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  :=
  forall (x : Nat),
    forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
      ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) x),
    ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) x

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : Nat
  y : Nat
  x : Nat
}
t  := x

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (x +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (x +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) x
  x : Nat
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun x => (x +1)
ty :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  :=
  forall (_ : ((fun _ => Nat) : forall (_ : Nat), Type) _),
    ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) _

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : Nat
  y : Nat
  x : Nat
}
t  := _

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (fun _ => Nat) : forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := fun _ => Nat
ty := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := forall (_ : Nat), Type

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Type

check_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat
ty := Type

infer_i
ictx := {
  _ : Nat
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := Nat

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (_ +1)
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (_ +1)

check_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := _
ty := Nat

infer_i
ictx := {
  _ : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := _

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (x +1)
ty := ((fun _ => Nat) : forall (_ : Nat), Type) (_ +1)

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := (x +1)

check_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  x : ((fun _ => Nat) : forall (_ : Nat), Type) _
  _ : Nat
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
  y : Nat
  x : Nat
}
t  := x
ty := Nat

infer_i
ictx := {
  y : Nat
  x : Nat
}
t  := x

check_i
ictx := {
}
t  := 1
ty := Nat

infer_i
ictx := {
}
t  := 1

check_i
ictx := {
}
t  := 0
ty := Nat

infer_i
ictx := {
}
t  := 0

check_i
ictx := {
}
t  := 1
ty := Nat

infer_i
ictx := {
}
t  := 1

check_i
ictx := {
}
t  := 0
ty := Nat

infer_i
ictx := {
}
t  := 0

complete
t  := 2
ty := Nat
