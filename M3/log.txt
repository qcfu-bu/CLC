infer
ctx := {
}
t   := let f :1 := (fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a) in let g :w := (fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a) in f
q   := w

infer
ctx := {
}
t   := (fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a)
q   := w

check
ctx := {
}
t   := fun _ => fun f => fun x => (f) x
q   := w
ty  := forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a

check
ctx := {
	_ :0 Type;
}
t   := fun f => fun x => (f) x
q   := 1
ty  := forall (x :1 forall (_ :1 _), _), forall (_ :w _), _

check
ctx := {
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := fun x => (f) x
q   := 1
ty  := forall (_ :w _), _

check
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := (f) x
q   := 1
ty  := _

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := (f) x
q   := 1

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := f
q   := 1

check
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := x
q   := 1
ty  := _

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
}
t   := x
q   := 1

infer
ctx := {
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := let g :w := (fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a) in ((fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a) 
f)
q   := 1

infer
ctx := {
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := (fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a)
q   := w

check
ctx := {
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := fun _ => fun f => fun x => (f) x
q   := w
ty  := forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a

check
ctx := {
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := fun f => fun x => (f) x
q   := 1
ty  := forall (x :1 forall (_ :1 _), _), forall (_ :w _), _

check
ctx := {
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := fun x => (f) x
q   := 1
ty  := forall (_ :w _), _

check
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := (f) x
q   := 1
ty  := _

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := (f) x
q   := 1

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := f
q   := 1

check
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := x
q   := 1
ty  := _

infer
ctx := {
	x :0 _;
	f :0 forall (_ :1 _), _;
	_ :0 Type;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := x
q   := 1

infer
ctx := {
	g :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
	f :0 forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a;
}
t   := ((fun _ => fun f => fun x => (f) x : forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a) 
f)
q   := 1

complete1
ctx := {
}
t   := fun _ => fun f => fun x => (f) x
q   := w
ty  := forall (a :0 Type), forall (x :1 forall (_ :1 a), a), forall (_ :w a), a

