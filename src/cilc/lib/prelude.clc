Inductive unit : U :=
| tt : unit.

Inductive base : U :=
| ll : base.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive nat : U :=
| O : nat
| S : nat -> nat.

Fixpoint addn (m n : nat) : nat :=
  match m with
  | O => n
  | S m => S (addn m n)
  end.

Inductive option (A : U) : U :=
| None : option A
| Some : A -> option A.

Inductive list (A : U) : U :=
| nil : list A
| cons : A -> list A -> list A.

Inductive vec (A : U) : nat -> U :=
| vnil : vec A O
| vcons : forall (n : nat), A -> vec A n -> vec A (S n).

Inductive ex (A : U) (P : A -> U) : U :=
| ex_intro : forall (x : A), P x -> ex A P.

Inductive sig (A : U) (P : A -> L) : L :=
| sig_intro : forall (x : A), P x -> sig A P.

Inductive tnsr (A B : L) : L :=
| tnsr_intro : A -> B -> tnsr A B.

Inductive box (A : U) : L :=
| box_intro : A -> box A.

Inductive ascii : U :=
| Ascii : 
  bool -> bool -> bool -> bool ->
  bool -> bool -> bool -> bool ->
  ascii.

Inductive string : U :=
| EmptyString : string
| String : ascii -> string -> string.

Fixpoint cat (s1 s2 : string) : string :=
  match s1 with
  | EmptyString => s2
  | String c s1 => String c (cat s1 s2)
  end.

Inductive le (n : nat) : nat -> U :=
| le_n : le n n
| le_S : forall (m : nat), le n m -> le n (S m).

Definition lt (m n : nat) : U := le (S m) n.

(* identity type *)
Inductive eq (A : U) (x : A) : A -> U :=
| refl : eq A x x.

Definition eq_trans
  (A : U)
  (x y z : A)
  (e1 : eq A x y)
  (e2 : eq A y z) :
  eq A x z
:=
  match e2 in eq _ _ y return eq A x y with
  | refl => e1
  end.

Definition eq_sym 
  (A : U) 
  (x y : A) 
  (e : eq A x y) :
  eq A y x
:=
  match e in eq _ _ y return eq A y x with
  | refl => refl
  end.

Definition u_ind 
  (A : U) 
  (x y : A)
  (P : A -> U) 
  (e : eq A x y)
  (f : P x) :
  P y
:= 
  match e in eq _ _ y return P y with
  | refl => f
  end.

Definition l_ind 
  (A : U) 
  (x y : A)
  (P : A -> L) 
  (e : eq A x y)
  (f : P x) :
  P y
:= 
  match e in eq _ _ y return P y with
  | refl => f
  end.

Axiom unsafeC : forall (A : L), A -> unit.
Axiom unsafeP : forall (A : L), A.

Definition Loc : U := nat.
Axiom PtsTo : Loc -> U -> L.

Definition Ptr (A : U) : L := sig Loc (fun l => PtsTo l A).
Axiom New  : forall (A : U), A -> Ptr A.
Axiom Free : forall (A : U), Ptr A -> unit.
Axiom Get  : forall (A : U) (l : Loc), PtsTo l A -> sig A (fun _ => PtsTo l A).
Axiom Set  : forall (A : U) (B : U), B -> forall (l : Loc), PtsTo l A -> PtsTo l B.