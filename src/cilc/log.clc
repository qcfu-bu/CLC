desugar ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive base : U :=
| ll : base.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Definition addn :=
  ((fix addn m n => match m with
                    | O => n
                    | (S m) => (S ((addn) m) n)
                    end) :
    (nat) -> (nat) -> nat).

Inductive option (A : U) : U :=
| None (A : U) : (option A#288)
| Some (A : U) : (A) -> (option A#289).

Inductive list (A : U) : U :=
| nil (A : U) : (list A#292)
| cons (A : U) : (A) -> ((list A)) -> (list A#293).

Inductive vec (A : U) : (nat) -> U :=
| vnil (A : U) : (vec A#298 O)
| vcons (A : U)
          : forall (n : nat), (A) -> ((vec A n)) -> (vec A#299 (S n#300)).

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#306 P#307).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#314 P#315).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#321 B#322).

Inductive box (A : U) : L :=
| box_intro (A : U) : (A) -> (box A#326).

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Inductive le (n : nat) : (nat) -> U :=
| le_n (n : nat) : (le n#348 n#348)
| le_S (n : nat) : forall (m : nat), ((le n m)) -> (le n#349 (S m#350)).

Definition lt := ((fun m n => (le (S m) n)) : (nat) -> (nat) -> U).

Inductive eq (A : U) (x : A) : (A) -> U :=
| refl (A : U) (x : A) : (eq A#360 x#361 x#361).

Definition eq_trans :=
  ((fun A x y z e1 e2 =>
      match e2 in (eq _ _ y) return (eq A x y) with
      | refl => e1
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (z : A), ((eq A x y)) -> ((eq A y z)) -> (eq A x z)).

Definition eq_sym :=
  ((fun A x y e =>
      match e in (eq _ _ y) return (eq A y x) with
      | refl => refl
      end) :
    forall (A : U),
      forall (x : A), forall (y : A), ((eq A x y)) -> (eq A y x)).

Definition u_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> U), ((eq A x y)) -> ((P) x) -> (P) y).

Definition l_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> L), ((eq A x y)) -> ((P) x) -> (P) y).

Axiom unsafeC : forall (A : L), (A) -> unit.

Axiom unsafeP : forall (A : L), A.

Definition Loc := ((nat) : U).

Axiom PtsTo : (Loc) -> (U) -> L.

Definition Ptr := ((fun A => (sig Loc fun l => ((PtsTo) l) A)) : (U) -> L).

Axiom New : forall (A : U), (A) -> (Ptr) A.

Axiom Free : forall (A : U), ((Ptr) A) -> unit.

Axiom Get :
  forall (A : U),
    forall (l : Loc), (((PtsTo) l) A) -> (sig A fun _ => ((PtsTo) l) A).

Axiom Set :
  forall (A : U),
    forall (B : U), (B) -> forall (l : Loc), (((PtsTo) l) A) -> ((PtsTo) l) B.

Inductive ArrVec (A : U) (l : Loc) : (nat) -> L :=
| Nil (A : U) (l : Loc) : (ArrVec A#457 l#458 O)
| Cons (A : U)
         (l : Loc)
           : forall (n : nat),
               (((PtsTo) ((addn) l) n) A) ->
                 ((ArrVec A l n)) -> (ArrVec A#459 l#460 (S n#461)).

Definition Array :=
  ((fun A n => (sig Loc fun l => (ArrVec A l n))) : (U) -> (nat) -> L).

Definition nth :=
  ((fix nth A l m n pf v =>
      (match pf in (le _ n) return
         ((ArrVec A l n)) ->
           (tnsr
             ((PtsTo) ((addn) l) m) A
               (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))
       with
       | le_n =>
         fun v =>
           (match v in (ArrVec _ _ n) return
              match n with
              | O => base
              | (S n0) =>
                ((eq ?22 m n0)) -o
                  (tnsr
                    ((PtsTo) ((addn) l) n0) A
                      (((PtsTo) ((addn) l) n0) A) -o (ArrVec A l n))
              end
            with
            | Nil => ll
            | (Cons n c v) => lin _ => (tnsr_intro c lin c => (Cons n c v))
            end) refl
       | (le_S _ pf) =>
         fun v =>
           (match v in (ArrVec _ _ n) return
              match n with
              | O => base
              | (S n0) =>
                (((lt) m) n0) -o
                  (tnsr
                    ((PtsTo) ((addn) l) m) A
                      (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))
              end
            with
            | Nil => ll
            | (Cons n c0 v0) =>
              lin pf =>
                match ((((((nth) A) l) m) n) pf) v0 with
                | (tnsr_intro c f) =>
                  (tnsr_intro c lin c => (Cons n c0 (f) c))
                end
            end) pf
       end) v) :
    forall (A : U),
      forall (l : nat),
        forall (m : nat),
          forall (n : nat),
            (((lt) m) n) ->
              ((ArrVec A l n)) ->
                (tnsr
                  ((PtsTo) ((addn) l) m) A
                    (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))).

Definition index :=
  ((fun A m n pf a =>
      match a with
      | (sig_intro l v) =>
        match ((((((nth) ?23) ?24) ?25) ?26) pf) v with
        | (tnsr_intro c f) =>
          match (((Get) ?27) ((addn) l) m) c with
          | (sig_intro x c) => (sig_intro x (sig_intro l (f) c))
          end
        end
      end) :
    forall (A : U),
      forall (m : nat),
        forall (n : nat),
          (((lt) m) n) -> (((Array) A) n) -> (sig A fun _ => ((Array) A) n)).

Definition Just0 := (((ex nat fun x => (eq ?28 x O))) : U).

Definition silly :=
  ((fun m n pf a =>
      match (((((index) ?29) ?30) ?31) pf) a with
      | (sig_intro x_pf a) =>
        match (((((index) ?32) ?33) ?34) pf) a with
        | (sig_intro y_pf a) =>
          match x_pf with
          | (ex_intro x pf1) =>
            match y_pf with
            | (ex_intro y pf2) =>
              let pf2 := ((((eq_sym) ?35) ?36) ?37) pf2 in
              let pf :=
                ((((((((eq_trans) ?38) ?39) ?40) ?41) pf1) pf2) :
                  (eq ?42 x y))
              in a
            end
          end
        end
      end) :
    forall (m : nat),
      forall (n : nat),
        (((lt) m) n) -> (((Array) Just0) n) -> ((Array) Just0) n).

Definition Main := tt.

elab ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive base : U :=
| ll : base.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Definition addn :=
  ((fix addn m n => match m with
                    | O => n
                    | (S m) => (S ((addn) m) n)
                    end) :
    (nat) -> (nat) -> nat).

Inductive option (A : U) : U :=
| None (A : U) : (option A#4622)
| Some (A : U) : (A) -> (option A#4623).

Inductive list (A : U) : U :=
| nil (A : U) : (list A#4626)
| cons (A : U) : (A) -> ((list A)) -> (list A#4627).

Inductive vec (A : U) : (nat) -> U :=
| vnil (A : U) : (vec A#4632 O)
| vcons (A : U)
          : forall (n : nat), (A) -> ((vec A n)) -> (vec A#4633 (S n#4634)).

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#4640 P#4641).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#4648 P#4649).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#4655 B#4656).

Inductive box (A : U) : L :=
| box_intro (A : U) : (A) -> (box A#4660).

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Inductive le (n : nat) : (nat) -> U :=
| le_n (n : nat) : (le n#4682 n#4682)
| le_S (n : nat) : forall (m : nat), ((le n m)) -> (le n#4683 (S m#4684)).

Definition lt := ((fun m n => (le (S m) n)) : (nat) -> (nat) -> U).

Inductive eq (A : U) (x : A) : (A) -> U :=
| refl (A : U) (x : A) : (eq A#4694 x#4695 x#4695).

Definition eq_trans :=
  ((fun A x y z e1 e2 =>
      match e2 in (eq _ _ y) return (eq A x y) with
      | refl => e1
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (z : A), ((eq A x y)) -> ((eq A y z)) -> (eq A x z)).

Definition eq_sym :=
  ((fun A x y e =>
      match e in (eq _ _ y) return (eq A y x) with
      | refl => refl
      end) :
    forall (A : U),
      forall (x : A), forall (y : A), ((eq A x y)) -> (eq A y x)).

Definition u_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> U), ((eq A x y)) -> ((P) x) -> (P) y).

Definition l_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> L), ((eq A x y)) -> ((P) x) -> (P) y).

Axiom unsafeC : forall (A : L), (A) -> unit.

Axiom unsafeP : forall (A : L), A.

Definition Loc := ((nat) : U).

Axiom PtsTo : (Loc) -> (U) -> L.

Definition Ptr := ((fun A => (sig Loc fun l => ((PtsTo) l) A)) : (U) -> L).

Axiom New : forall (A : U), (A) -> (Ptr) A.

Axiom Free : forall (A : U), ((Ptr) A) -> unit.

Axiom Get :
  forall (A : U),
    forall (l : Loc), (((PtsTo) l) A) -> (sig A fun _ => ((PtsTo) l) A).

Axiom Set :
  forall (A : U),
    forall (B : U), (B) -> forall (l : Loc), (((PtsTo) l) A) -> ((PtsTo) l) B.

Inductive ArrVec (A : U) (l : Loc) : (nat) -> L :=
| Nil (A : U) (l : Loc) : (ArrVec A#4791 l#4792 O)
| Cons (A : U)
         (l : Loc)
           : forall (n : nat),
               (((PtsTo) ((addn) l) n) A) ->
                 ((ArrVec A l n)) -> (ArrVec A#4793 l#4794 (S n#4795)).

Definition Array :=
  ((fun A n => (sig Loc fun l => (ArrVec A l n))) : (U) -> (nat) -> L).

Definition nth :=
  ((fix nth A l m n pf v =>
      (match pf in (le _ n) return
         ((ArrVec A l n)) ->
           (tnsr
             ((PtsTo) ((addn) l) m) A
               (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))
       with
       | le_n =>
         fun v =>
           (match v in (ArrVec _ _ n) return
              match n with
              | O => base
              | (S n0) =>
                ((eq nat m n0)) -o
                  (tnsr
                    ((PtsTo) ((addn) l) n0) A
                      (((PtsTo) ((addn) l) n0) A) -o (ArrVec A l n))
              end
            with
            | Nil => ll
            | (Cons n c v) => lin _ => (tnsr_intro c lin c => (Cons n c v))
            end) refl
       | (le_S _ pf) =>
         fun v =>
           (match v in (ArrVec _ _ n) return
              match n with
              | O => base
              | (S n0) =>
                (((lt) m) n0) -o
                  (tnsr
                    ((PtsTo) ((addn) l) m) A
                      (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))
              end
            with
            | Nil => ll
            | (Cons n c0 v0) =>
              lin pf =>
                match ((((((nth) A) l) m) n) pf) v0 with
                | (tnsr_intro c f) =>
                  (tnsr_intro c lin c => (Cons n c0 (f) c))
                end
            end) pf
       end) v) :
    forall (A : U),
      forall (l : nat),
        forall (m : nat),
          forall (n : nat),
            (((lt) m) n) ->
              ((ArrVec A l n)) ->
                (tnsr
                  ((PtsTo) ((addn) l) m) A
                    (((PtsTo) ((addn) l) m) A) -o (ArrVec A l n))).

Definition index :=
  ((fun A m n pf a =>
      match a with
      | (sig_intro l v) =>
        match ((((((nth) A) l) m) n) pf) v with
        | (tnsr_intro c f) =>
          match (((Get) A) ((addn) l) m) c with
          | (sig_intro x c) => (sig_intro x (sig_intro l (f) c))
          end
        end
      end) :
    forall (A : U),
      forall (m : nat),
        forall (n : nat),
          (((lt) m) n) -> (((Array) A) n) -> (sig A fun _ => ((Array) A) n)).

Definition Just0 := (((ex nat fun x => (eq nat x O))) : U).

Definition silly :=
  ((fun m n pf a =>
      match (((((index) Just0) m) n) pf) a with
      | (sig_intro x_pf a) =>
        match (((((index) Just0) m) n) pf) a with
        | (sig_intro y_pf a) =>
          match x_pf with
          | (ex_intro x pf1) =>
            match y_pf with
            | (ex_intro y pf2) =>
              let pf2 := ((((eq_sym) nat) y) O) pf2 in
              let pf :=
                ((((((((eq_trans) nat) x) O) y) pf1) pf2) : (eq nat x y))
              in a
            end
          end
        end
      end) :
    forall (m : nat),
      forall (n : nat),
        (((lt) m) n) -> (((Array) Just0) n) -> ((Array) Just0) n).

Definition Main := tt.

--------------------------------------------------------------------------------
tcheck ok