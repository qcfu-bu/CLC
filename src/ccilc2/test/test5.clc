Import stdout : stdout_t.

Inductive ref_msg : U :=
| GET  : ref_msg
| SET  : ref_msg
| FREE : ref_msg.

Fixpoint ref_t (A : U) : proto :=
  ?(msg : ref_msg), 
    match msg with
    | GET => !A, ref_t A
    | SET => ?A, ref_t A
    | FREE => $
    end.

Fixpoint ref_handler 
  (A : U) (m : A) : (channel ref_t A) -o unit 
:= 
  lin ch =>
  let [msg, ch] := recv ch in
  match msg as x return
    channel
      match x with
      | GET => !A, ref_t A
      | SET => ?A, ref_t A
      | FREE => $
      end -> unit
  with
  | GET => fun ch =>
    let ch := send ch m in
    ref_handler _ m ch
  | SET => fun ch =>
    let [m, ch] := recv ch in
    ref_handler A m ch
  | FREE => fun ch => close ch
  end ch.

Definition mk_ref 
  (A : U) (m : A) (x : main) : tnsr (channel- ref_t A) main 
:=
  fork (ref : channel ref_t A) := x in
  ref_handler A m ref.

Definition set_ref
  (A : U) (m : A) : channel- ref_t A -o channel- ref_t A
:=
  lin ref =>
  let ref := send ref SET in
  send ref m.

Definition get_ref 
  (A : U) : channel- ref_t A -o sig A (fun _ => (channel- ref_t A)) 
:=
  lin ref =>
  let ref := send ref GET in
  recv ref.

Definition free_ref (A : U) : channel- ref_t A -o unit :=
  lin ref =>
  let ref := send ref FREE in
  let () := close ref in
  ().

Definition Main :=
  let ⟨ref, _main_⟩ := mk_ref _ "hello\n" _main_ in
  let [msg1, ref] := get_ref _ ref in
  let ref := set_ref _ "world\n" ref in
  let [msg2, ref] := get_ref _ ref in
  let stdout := printline stdout msg1 in
  let stdout := printline stdout msg2 in
  let () := free_ref _ ref in
  let () := close_out stdout in
  _main_.