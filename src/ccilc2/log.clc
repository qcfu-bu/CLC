desugar ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U) (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#80 P#81).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#88 P#89).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#95 B#96).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Import stdin 1 as _stdin_.

Import stdout 2 as _stdout_.

Definition forker :=
  ((fun p => lin h m => fork (ch : channel p) := m in (h) ch) :
    forall (p : proto),
      ((channel p) -o unit) -o (main) -o (tnsr channel- p main)).

Definition sender :=
  ((lin ch =>
      match recv _stdin_ with
      | (sig_intro msg _stdin_) =>
        let ch := (send ch) msg in
        let ch := (send ch) msg in
        match close ch with
        | tt => match close _stdin_ with
                | tt => tt
                end
        end
      end) :
    (channel !(_ : string), !(_ : string), $) -o unit).

Definition Main :=
  match (((forker) ?0) sender) _main_ with
  | (tnsr_intro ch _main_) =>
    match recv ch with
    | (sig_intro msg1 ch) =>
      match recv ch with
      | (sig_intro msg2 ch) =>
        let _stdout_ := (send _stdout_) ((cat) msg1) "\n" in
        let _stdout_ := (send _stdout_) ((cat) msg2) "\n" in
        match close ch with
        | tt => match close _stdout_ with
                | tt => _main_
                end
        end
      end
    end
  end.

elab ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#881 P#882).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#889 P#890).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#896 B#897).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Import stdin 1 as _stdin_.

Import stdout 2 as _stdout_.

Definition forker :=
  ((fun p => lin h m => fork (ch : channel p) := m in (h) ch) :
    forall (p : proto),
      ((channel p) -o unit) -o (main) -o (tnsr channel- p main)).

Definition sender :=
  ((lin ch =>
      match recv _stdin_ with
      | (sig_intro msg _stdin_) =>
        let ch := (send ch) msg in
        let ch := (send ch) msg in
        match close ch with
        | tt => match close _stdin_ with
                | tt => tt
                end
        end
      end) :
    (channel !(_ : string), !(_ : string), $) -o unit).

Definition Main :=
  match (((forker) !(_ : string), !(_ : string), $) sender) _main_ with
  | (tnsr_intro ch _main_) =>
    match recv ch with
    | (sig_intro msg1 ch) =>
      match recv ch with
      | (sig_intro msg2 ch) =>
        let _stdout_ := (send _stdout_) ((cat) msg1) "\n" in
        let _stdout_ := (send _stdout_) ((cat) msg2) "\n" in
        match close ch with
        | tt => match close _stdout_ with
                | tt => _main_
                end
        end
      end
    end
  end.

--------------------------------------------------------------------------------
tcheck ok