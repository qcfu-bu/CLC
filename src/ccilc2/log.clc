desugar ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#161 P#162).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#169 P#170).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#176 B#177).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Definition stdin_rec :=
  ((fix stdin_rec _ =>
      !(b : bool),
        match b with
        | true => ?(_ : string), (stdin_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdin_t := (((stdin_rec) tt) : proto).

Definition readline :=
  ((fun ch => let ch := (send ch) true in recv ch) :
    (channel stdin_t) -> (sig string fun _ => channel stdin_t)).

Definition close_in :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdin_t) -> unit).

Definition stdout_rec :=
  ((fix stdout_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stdout_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdout_t := (((stdout_rec) tt) : proto).

Definition printline :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stdout_t) -> (string) -o channel stdout_t).

Definition close_out :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdout_t) -> unit).

Definition stderr_rec :=
  ((fix stderr_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stderr_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stderr_t := (((stderr_rec) tt) : proto).

Definition printerr :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stderr_t) -> (string) -o channel stderr_t).

Definition close_err :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stderr_t) -> unit).

Import out : stdout_t.

Definition exn :=
  ((fun A => !(b : bool), match b with
                          | true => !(_ : A), $
                          | false => $
                          end) :
    (U) -> proto).

Inductive Exn (A : U) : L :=
| Error (A : U) : (Exn A#256)
| Ok (A : U) : (A) -> (channel (exn) A) -> (Exn A#257).

Definition throw :=
  ((fun A ch =>
      let ch := (send ch) false in match close ch with
                                   | tt => Error
                                   end) :
    forall (A : U), (channel (exn) A) -> (Exn A)).

Definition div2_exn :=
  ((fix div2_exn n ch =>
      match n with
      | O => (Ok O ch)
      | (S n) =>
        match n with
        | O => ((throw) ?0) ch
        | (S n) =>
          match ((div2_exn) n) ch with
          | Error => Error
          | (Ok n ch) => (Ok (S n) ch)
          end
        end
      end) :
    (nat) -> (channel (exn) nat) -> (Exn nat)).

Definition try :=
  ((fun A =>
      lin m f_exn default =>
        match fork (ch : channel (exn) A) := m in
              match (f_exn) ch with
              | Error => tt
              | (Ok x ch) =>
                let ch := (send ch) true in let ch := (send ch) x in close ch
              end
        with
        | (tnsr_intro ch m) =>
          match recv ch with
          | (sig_intro b ch) =>
            (match b as x return
               (channel- match x with
                         | true => !(_ : A), $
                         | false => $
                         end) -o
                 (sig A fun _ => main)
             with
             | true =>
               lin ch =>
                 match recv ch with
                 | (sig_intro res ch) =>
                   match close ch with
                   | tt => (sig_intro res m)
                   end
                 end
             | false =>
               lin ch =>
                 match close ch with
                 | tt => (sig_intro default m)
                 end
             end) ch
          end
        end) :
    forall (A : U),
      (main) -o
        ((channel (exn) A) -> (Exn A)) -o (A) -o (sig A fun _ => main)).

Definition string_of_nat :=
  ((fix string_of_nat n =>
      match n with
      | O => "O"
      | (S n) => let n := (string_of_nat) n in ((cat) "S (") ((cat) n) ")"
      end) :
    (nat) -> string).

Definition Main :=
  match ((((try) ?1) _main_) (div2_exn) 15) O with
  | (sig_intro n _main_) =>
    let s := (string_of_nat) n in
    let out := ((printline) out) ((cat) s) "\n" in
    match (close_out) out with
    | tt => _main_
    end
  end.

elab ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#2111 P#2112).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#2119 P#2120).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#2126 B#2127).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Definition stdin_rec :=
  ((fix stdin_rec _ =>
      !(b : bool),
        match b with
        | true => ?(_ : string), (stdin_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdin_t := (((stdin_rec) tt) : proto).

Definition readline :=
  ((fun ch => let ch := (send ch) true in recv ch) :
    (channel stdin_t) -> (sig string fun _ => channel stdin_t)).

Definition close_in :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdin_t) -> unit).

Definition stdout_rec :=
  ((fix stdout_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stdout_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdout_t := (((stdout_rec) tt) : proto).

Definition printline :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stdout_t) -> (string) -o channel stdout_t).

Definition close_out :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdout_t) -> unit).

Definition stderr_rec :=
  ((fix stderr_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stderr_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stderr_t := (((stderr_rec) tt) : proto).

Definition printerr :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stderr_t) -> (string) -o channel stderr_t).

Definition close_err :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stderr_t) -> unit).

Import out : stdout_t.

Definition exn :=
  ((fun A => !(b : bool), match b with
                          | true => !(_ : A), $
                          | false => $
                          end) :
    (U) -> proto).

Inductive Exn (A : U) : L :=
| Error (A : U) : (Exn A#2206)
| Ok (A : U) : (A) -> (channel (exn) A) -> (Exn A#2207).

Definition throw :=
  ((fun A ch =>
      let ch := (send ch) false in match close ch with
                                   | tt => Error
                                   end) :
    forall (A : U), (channel (exn) A) -> (Exn A)).

Definition div2_exn :=
  ((fix div2_exn n ch =>
      match n with
      | O => (Ok O ch)
      | (S n) =>
        match n with
        | O => ((throw) nat) ch
        | (S n) =>
          match ((div2_exn) n) ch with
          | Error => Error
          | (Ok n ch) => (Ok (S n) ch)
          end
        end
      end) :
    (nat) -> (channel (exn) nat) -> (Exn nat)).

Definition try :=
  ((fun A =>
      lin m f_exn default =>
        match fork (ch : channel (exn) A) := m in
              match (f_exn) ch with
              | Error => tt
              | (Ok x ch) =>
                let ch := (send ch) true in let ch := (send ch) x in close ch
              end
        with
        | (tnsr_intro ch m) =>
          match recv ch with
          | (sig_intro b ch) =>
            (match b as x return
               (channel- match x with
                         | true => !(_ : A), $
                         | false => $
                         end) -o
                 (sig A fun _ => main)
             with
             | true =>
               lin ch =>
                 match recv ch with
                 | (sig_intro res ch) =>
                   match close ch with
                   | tt => (sig_intro res m)
                   end
                 end
             | false =>
               lin ch =>
                 match close ch with
                 | tt => (sig_intro default m)
                 end
             end) ch
          end
        end) :
    forall (A : U),
      (main) -o
        ((channel (exn) A) -> (Exn A)) -o (A) -o (sig A fun _ => main)).

Definition string_of_nat :=
  ((fix string_of_nat n =>
      match n with
      | O => "O"
      | (S n) => let n := (string_of_nat) n in ((cat) "S (") ((cat) n) ")"
      end) :
    (nat) -> string).

Definition Main :=
  match ((((try) nat) _main_) (div2_exn) 15) O with
  | (sig_intro n _main_) =>
    let s := (string_of_nat) n in
    let out := ((printline) out) ((cat) s) "\n" in
    match (close_out) out with
    | tt => _main_
    end
  end.

--------------------------------------------------------------------------------
tcheck ok