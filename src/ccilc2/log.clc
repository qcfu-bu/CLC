desugar ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Definition addn :=
  ((fix addn m n => match m with
                    | O => n
                    | (S m) => (S ((addn) m) n)
                    end) :
    (nat) -> (nat) -> nat).

Inductive option (A : U) : U :=
| None (A : U) : (option A#272)
| Some (A : U) : (A) -> (option A#273).

Inductive list (A : U) : U :=
| nil (A : U) : (list A#276)
| cons (A : U) : (A) -> ((list A)) -> (list A#277).

Inductive vec (A : U) : (nat) -> U :=
| vnil (A : U) : (vec A#282 O)
| vcons (A : U)
          : forall (n : nat), (A) -> ((vec A n)) -> (vec A#283 (S n#284)).

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#290 P#291).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#298 P#299).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#305 B#306).

Inductive box (A : U) : L :=
| box_intro (A : U) : (A) -> (box A#310).

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Inductive le (n : nat) : (nat) -> U :=
| le_n (n : nat) : (le n#332 n#332)
| le_S (n : nat) : forall (m : nat), ((le n m)) -> (le n#333 (S m#334)).

Definition lt := ((fun m n => (le (S m) n)) : (nat) -> (nat) -> U).

Inductive eq (A : U) (x : A) : (A) -> U :=
| refl (A : U) (x : A) : (eq A#344 x#345 x#345).

Definition eq_trans :=
  ((fun A x y z e1 e2 =>
      match e2 in (eq _ _ y) return (eq A x y) with
      | refl => e1
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (z : A), ((eq A x y)) -> ((eq A y z)) -> (eq A x z)).

Definition eq_sym :=
  ((fun A x y e =>
      match e in (eq _ _ y) return (eq A y x) with
      | refl => refl
      end) :
    forall (A : U),
      forall (x : A), forall (y : A), ((eq A x y)) -> (eq A y x)).

Definition u_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> U), ((eq A x y)) -> ((P) x) -> (P) y).

Definition l_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> L), ((eq A x y)) -> ((P) x) -> (P) y).

Definition stdin_rec :=
  ((fix stdin_rec _ =>
      !(b : bool),
        match b with
        | true => ?(_ : string), (stdin_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdin_t := (((stdin_rec) tt) : proto).

Definition readline :=
  ((fun ch => let ch := (send ch) true in recv ch) :
    (channel stdin_t) -> (sig string fun _ => channel stdin_t)).

Definition close_in :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdin_t) -> unit).

Definition stdout_rec :=
  ((fix stdout_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stdout_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdout_t := (((stdout_rec) tt) : proto).

Definition printline :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stdout_t) -> (string) -o channel stdout_t).

Definition close_out :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdout_t) -> unit).

Definition stderr_rec :=
  ((fix stderr_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stderr_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stderr_t := (((stderr_rec) tt) : proto).

Definition printerr :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stderr_t) -> (string) -o channel stderr_t).

Definition close_err :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stderr_t) -> unit).

Import stdout : stdout_t.

Inductive ref_msg : U :=
| GET : ref_msg
| SET : ref_msg
| FREE : ref_msg.

Definition ref_t :=
  ((fix ref_t A =>
      ?(msg : ref_msg),
        match msg with
        | GET => !(_ : A), (ref_t) A
        | SET => ?(_ : A), (ref_t) A
        | FREE => $
        end) :
    (U) -> proto).

Definition ref_handler :=
  ((fix ref_handler A m =>
      lin ch =>
        match recv ch with
        | (sig_intro msg ch) =>
          (match msg as x return
             (channel match x with
                      | GET => !(_ : A), (ref_t) A
                      | SET => ?(_ : A), (ref_t) A
                      | FREE => $
                      end) ->
               unit
           with
           | GET =>
             fun ch => let ch := (send ch) m in (((ref_handler) A) m) ch
           | SET =>
             fun ch =>
               match recv ch with
               | (sig_intro m ch) => (((ref_handler) A) m) ch
               end
           | FREE => fun ch => close ch
           end) ch
        end) :
    forall (A : U), (A) -> (channel (ref_t) A) -o unit).

Definition mk_ref :=
  ((fun A m x =>
      fork (ref : channel (ref_t) A) := x in (((ref_handler) A) m) ref) :
    forall (A : U), (A) -> (main) -> (tnsr channel- (ref_t) A main)).

Definition set_ref :=
  ((fun A m => lin ref => let ref := (send ref) SET in (send ref) m) :
    forall (A : U), (A) -> (channel- (ref_t) A) -o channel- (ref_t) A).

Definition get_ref :=
  ((fun A => lin ref => let ref := (send ref) GET in recv ref) :
    forall (A : U),
      (channel- (ref_t) A) -o (sig A fun _ => channel- (ref_t) A)).

Definition free_ref :=
  ((fun A =>
      lin ref =>
        let ref := (send ref) FREE in match close ref with
                                      | tt => tt
                                      end) :
    forall (A : U), (channel- (ref_t) A) -o unit).

Definition Main :=
  match (((mk_ref) ?5) "hello\n") _main_ with
  | (tnsr_intro ref _main_) =>
    match ((get_ref) ?6) ref with
    | (sig_intro msg1 ref) =>
      let ref := (((set_ref) ?7) "world\n") ref in
      match ((get_ref) ?8) ref with
      | (sig_intro msg2 ref) =>
        let stdout := ((printline) stdout) msg1 in
        let stdout := ((printline) stdout) msg2 in
        match ((free_ref) ?9) ref with
        | tt => match (close_out) stdout with
                | tt => _main_
                end
        end
      end
    end
  end.

elab ok
--------------------------------------------------------------------------------
Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Definition addn :=
  ((fix addn m n => match m with
                    | O => n
                    | (S m) => (S ((addn) m) n)
                    end) :
    (nat) -> (nat) -> nat).

Inductive option (A : U) : U :=
| None (A : U) : (option A#4739)
| Some (A : U) : (A) -> (option A#4740).

Inductive list (A : U) : U :=
| nil (A : U) : (list A#4743)
| cons (A : U) : (A) -> ((list A)) -> (list A#4744).

Inductive vec (A : U) : (nat) -> U :=
| vnil (A : U) : (vec A#4749 O)
| vcons (A : U)
          : forall (n : nat), (A) -> ((vec A n)) -> (vec A#4750 (S n#4751)).

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U)
             (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#4757 P#4758).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#4765 P#4766).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#4772 B#4773).

Inductive box (A : U) : L :=
| box_intro (A : U) : (A) -> (box A#4777).

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Inductive le (n : nat) : (nat) -> U :=
| le_n (n : nat) : (le n#4799 n#4799)
| le_S (n : nat) : forall (m : nat), ((le n m)) -> (le n#4800 (S m#4801)).

Definition lt := ((fun m n => (le (S m) n)) : (nat) -> (nat) -> U).

Inductive eq (A : U) (x : A) : (A) -> U :=
| refl (A : U) (x : A) : (eq A#4811 x#4812 x#4812).

Definition eq_trans :=
  ((fun A x y z e1 e2 =>
      match e2 in (eq _ _ y) return (eq A x y) with
      | refl => e1
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (z : A), ((eq A x y)) -> ((eq A y z)) -> (eq A x z)).

Definition eq_sym :=
  ((fun A x y e =>
      match e in (eq _ _ y) return (eq A y x) with
      | refl => refl
      end) :
    forall (A : U),
      forall (x : A), forall (y : A), ((eq A x y)) -> (eq A y x)).

Definition u_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> U), ((eq A x y)) -> ((P) x) -> (P) y).

Definition l_ind :=
  ((fun A x y P e f =>
      match e in (eq _ _ y) return (P) y with
      | refl => f
      end) :
    forall (A : U),
      forall (x : A),
        forall (y : A),
          forall (P : (A) -> L), ((eq A x y)) -> ((P) x) -> (P) y).

Definition stdin_rec :=
  ((fix stdin_rec _ =>
      !(b : bool),
        match b with
        | true => ?(_ : string), (stdin_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdin_t := (((stdin_rec) tt) : proto).

Definition readline :=
  ((fun ch => let ch := (send ch) true in recv ch) :
    (channel stdin_t) -> (sig string fun _ => channel stdin_t)).

Definition close_in :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdin_t) -> unit).

Definition stdout_rec :=
  ((fix stdout_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stdout_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stdout_t := (((stdout_rec) tt) : proto).

Definition printline :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stdout_t) -> (string) -o channel stdout_t).

Definition close_out :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stdout_t) -> unit).

Definition stderr_rec :=
  ((fix stderr_rec _ =>
      !(b : bool),
        match b with
        | true => !(_ : string), (stderr_rec) tt
        | false => $
        end) :
    (unit) -> proto).

Definition stderr_t := (((stderr_rec) tt) : proto).

Definition printerr :=
  ((fun ch => lin s => let ch := (send ch) true in (send ch) s) :
    (channel stderr_t) -> (string) -o channel stderr_t).

Definition close_err :=
  ((fun ch => let ch := (send ch) false in close ch) :
    (channel stderr_t) -> unit).

Import stdout : stdout_t.

Inductive ref_msg : U :=
| GET : ref_msg
| SET : ref_msg
| FREE : ref_msg.

Definition ref_t :=
  ((fix ref_t A =>
      ?(msg : ref_msg),
        match msg with
        | GET => !(_ : A), (ref_t) A
        | SET => ?(_ : A), (ref_t) A
        | FREE => $
        end) :
    (U) -> proto).

Definition ref_handler :=
  ((fix ref_handler A m =>
      lin ch =>
        match recv ch with
        | (sig_intro msg ch) =>
          (match msg as x return
             (channel match x with
                      | GET => !(_ : A), (ref_t) A
                      | SET => ?(_ : A), (ref_t) A
                      | FREE => $
                      end) ->
               unit
           with
           | GET =>
             fun ch => let ch := (send ch) m in (((ref_handler) A) m) ch
           | SET =>
             fun ch =>
               match recv ch with
               | (sig_intro m ch) => (((ref_handler) A) m) ch
               end
           | FREE => fun ch => close ch
           end) ch
        end) :
    forall (A : U), (A) -> (channel (ref_t) A) -o unit).

Definition mk_ref :=
  ((fun A m x =>
      fork (ref : channel (ref_t) A) := x in (((ref_handler) A) m) ref) :
    forall (A : U), (A) -> (main) -> (tnsr channel- (ref_t) A main)).

Definition set_ref :=
  ((fun A m => lin ref => let ref := (send ref) SET in (send ref) m) :
    forall (A : U), (A) -> (channel- (ref_t) A) -o channel- (ref_t) A).

Definition get_ref :=
  ((fun A => lin ref => let ref := (send ref) GET in recv ref) :
    forall (A : U),
      (channel- (ref_t) A) -o (sig A fun _ => channel- (ref_t) A)).

Definition free_ref :=
  ((fun A =>
      lin ref =>
        let ref := (send ref) FREE in match close ref with
                                      | tt => tt
                                      end) :
    forall (A : U), (channel- (ref_t) A) -o unit).

Definition Main :=
  match (((mk_ref) string) "hello\n") _main_ with
  | (tnsr_intro ref _main_) =>
    match ((get_ref) string) ref with
    | (sig_intro msg1 ref) =>
      let ref := (((set_ref) string) "world\n") ref in
      match ((get_ref) string) ref with
      | (sig_intro msg2 ref) =>
        let stdout := ((printline) stdout) msg1 in
        let stdout := ((printline) stdout) msg2 in
        match ((free_ref) string) ref with
        | tt => match (close_out) stdout with
                | tt => _main_
                end
        end
      end
    end
  end.

--------------------------------------------------------------------------------
tcheck ok