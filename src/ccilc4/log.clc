[(DFun ("exn_p", (Pi (U, [(None, (Type U))], Proto)),
    [(Cl
        ([(PVar (Some "A"))],
         (Some (Act (false, [((Some "b"), (Id "bool"))],
                  (If ((Id "b"), (Act (false, [(None, (Id "A"))], End)), End
                     ))
                  )))))
      ]
    ));
  (DData ("Exn", (PTl ([((Some "A"), (Type U))], (Tl ([], (Type L))))),
     [(DCons ("Error",
         (PTl ([((Some "A"), (Type U))],
            (Tl ([], (App [(Id "Exn"); (Id "A")])))))
         ));
       (DCons ("Ok",
          (PTl ([((Some "A"), (Type U))],
             (Tl (
                [(None, (Id "A"));
                  (None, (Ch (true, (App [(Id "exn_p"); (Id "A")]))))],
                (App [(Id "Exn"); (Id "A")])))
             ))
          ))
       ]
     ));
  (DFun ("exn", (Pi (U, [(None, (Type U))], (Type U))),
     [(Cl
         ([(PVar (Some "A"))],
          (Some (Pi (U,
                   [(None, (Ch (true, (App [(Id "exn_p"); (Id "A")]))))],
                   (App [(Id "Exn"); (Id "A")]))))))
       ]
     ));
  (DFun ("ret",
     (Pi (U, [((Some "A"), (Type U))],
        (Pi (U, [(None, (Id "A"))], (App [(Id "exn"); (Id "A")]))))),
     [(Cl
         ([(PVar None); (PVar (Some "m")); (PVar (Some "ch"))],
          (Some (App [(Id "Ok"); (Id "m"); (Id "ch")]))))
       ]
     ));
  (DFun ("throw",
     (Pi (U, [((Some "A"), (Type U))], (App [(Id "exn"); (Id "A")]))),
     [(Cl
         ([(PVar None); (PVar (Some "ch"))],
          (Some (Let ((PVar (Some "ch")),
                   (App [(Send (Id "ch")); (Id "false")]),
                   (Let ((PCons ("tt", [])), (Close (Id "ch")), (Id "Error")
                      ))
                   )))))
       ]
     ));
  (DFun ("bind",
     (Pi (U, [((Some "A"), (Type U))],
        (Pi (U, [(None, (App [(Id "exn"); (Id "A")]))],
           (Pi (U,
              [(None,
                (Pi (U, [(None, (Id "A"))], (App [(Id "exn"); (Id "A")]))))],
              (App [(Id "exn"); (Id "A")])))
           ))
        )),
     [(Cl
         ([(PVar None); (PVar (Some "e")); (PVar (Some "f"));
            (PVar (Some "ch"))],
          (Some (Match ([(App [(Id "e"); (Id "ch")])],
                   [(Cl ([(PCons ("Error", []))], (Some (Id "Error"))));
                     (Cl
                        ([(PCons ("Ok",
                             [(PVar (Some "m")); (PVar (Some "ch"))]))
                           ],
                         (Some (App [(Id "f"); (Id "m"); (Id "ch")]))))
                     ]
                   )))))
       ]
     ));
  (DFun ("div2_exn_p",
     (Pi (U, [(None, (Id "nat"))], (App [(Id "exn"); (Id "nat")]))),
     [(Cl
         ([(PCons ("zero", []))],
          (Some (App [(Id "ret"); (Id "_"); (App [(Id "zero")])]))));
       (Cl
          ([(PCons ("succ", [(PCons ("zero", []))]))],
           (Some (App [(Id "throw"); (Id "_")]))));
       (Cl
          ([(PCons ("succ", [(PCons ("succ", [(PVar (Some "n"))]))]))],
           (Some (App
                    [(Id "bind"); (Id "_");
                      (App [(Id "div2_exn_p"); (Id "n")]);
                      (Fun (None, None,
                         [(Cl
                             ([(PVar (Some "n"))],
                              (Some (App
                                       [(Id "ret"); (Id "_");
                                         (App [(Id "succ"); (Id "n")])]))))
                           ]
                         ))
                      ]))))
       ]
     ));
  (DFun ("try_exn",
     (Pi (U, [((Some "A"), (Type U))],
        (Pi (L, [(None, Main)],
           (Pi (L, [(None, (App [(Id "exn"); (Id "A")]))],
              (Pi (L, [(None, (Id "A"))],
                 (App
                    [(Id "sig"); (Id "A");
                      (Fun (None, None, [(Cl ([(PVar None)], (Some Main)))]))
                      ])
                 ))
              ))
           ))
        )),
     [(Cl
         ([(PVar (Some "A")); (PVar (Some "m")); (PVar (Some "f_exn_p"));
            (PVar (Some "default"))],
          (Some (Let (
                   (PCons ("tnsr_intro",
                      [(PVar (Some "ch")); (PVar (Some "m"))])),
                   (Fork ("ch", (Ch (true, (App [(Id "exn_p"); (Id "A")]))),
                      (Id "m"),
                      (Match ([(App [(Id "f_exn_p"); (Id "ch")])],
                         [(Cl ([(PCons ("Error", []))], (Some (Id "tt"))));
                           (Cl
                              ([(PCons ("Ok",
                                   [(PVar (Some "x")); (PVar (Some "ch"))]))
                                 ],
                               (Some (Let ((PVar (Some "ch")),
                                        (App [(Send (Id "ch")); (Id "true")]),
                                        (Let ((PVar (Some "ch")),
                                           (App [(Send (Id "ch")); (Id "x")]),
                                           (Close (Id "ch"))))
                                        )))))
                           ]
                         ))
                      )),
                   (Match ([(Recv (Id "ch"))],
                      [(Cl
                          ([(PCons ("sig_intro",
                               [(PCons ("true", [])); (PVar (Some "ch"))]))
                             ],
                           (Some (Let (
                                    (PCons ("sig_intro",
                                       [(PVar (Some "res"));
                                         (PVar (Some "ch"))]
                                       )),
                                    (Recv (Id "ch")),
                                    (Let ((PCons ("tt", [])),
                                       (Close (Id "ch")),
                                       (App
                                          [(Id "sig_intro"); (Id "res");
                                            (Id "m")])
                                       ))
                                    )))));
                        (Cl
                           ([(PCons ("sig_intro",
                                [(PCons ("false", [])); (PVar (Some "ch"))]))
                              ],
                            (Some (Let ((PCons ("tt", [])),
                                     (Close (Id "ch")),
                                     (App
                                        [(Id "sig_intro"); (Id "default");
                                          (Id "m")])
                                     )))))
                        ]
                      ))
                   )))))
       ]
     ));
  (DFun ("string_of_nat", (Pi (U, [(None, (Id "nat"))], (Id "string"))),
     [(Cl
         ([(PCons ("zero", []))],
          (Some (App
                   [(Id "String");
                     (App
                        [(Id "Ascii"); (App [(Id "false")]);
                          (App [(Id "true")]); (App [(Id "true")]);
                          (App [(Id "true")]); (App [(Id "true")]);
                          (App [(Id "false")]); (App [(Id "true")]);
                          (App [(Id "false")])]);
                     (App
                        [(Id "String");
                          (App
                             [(Id "Ascii"); (App [(Id "false")]);
                               (App [(Id "true")]); (App [(Id "true")]);
                               (App [(Id "false")]); (App [(Id "false")]);
                               (App [(Id "true")]); (App [(Id "false")]);
                               (App [(Id "true")])]);
                          (App
                             [(Id "String");
                               (App
                                  [(Id "Ascii"); (App [(Id "false")]);
                                    (App [(Id "true")]); (App [(Id "true")]);
                                    (App [(Id "true")]);
                                    (App [(Id "false")]);
                                    (App [(Id "false")]);
                                    (App [(Id "true")]); (App [(Id "false")])
                                    ]);
                               (App
                                  [(Id "String");
                                    (App
                                       [(Id "Ascii"); (App [(Id "false")]);
                                         (App [(Id "true")]);
                                         (App [(Id "true")]);
                                         (App [(Id "false")]);
                                         (App [(Id "true")]);
                                         (App [(Id "true")]);
                                         (App [(Id "true")]);
                                         (App [(Id "true")])]);
                                    (App [(Id "EmptyString")])])
                               ])
                          ])
                     ]))));
       (Cl
          ([(PCons ("succ", [(PVar (Some "n"))]))],
           (Some (App
                    [(Id "cat");
                      (App
                         [(Id "cat");
                           (App
                              [(Id "String");
                                (App
                                   [(Id "Ascii"); (App [(Id "false")]);
                                     (App [(Id "true")]);
                                     (App [(Id "true")]);
                                     (App [(Id "true")]);
                                     (App [(Id "false")]);
                                     (App [(Id "false")]);
                                     (App [(Id "true")]); (App [(Id "true")])
                                     ]);
                                (App
                                   [(Id "String");
                                     (App
                                        [(Id "Ascii"); (App [(Id "false")]);
                                          (App [(Id "true")]);
                                          (App [(Id "true")]);
                                          (App [(Id "true")]);
                                          (App [(Id "false")]);
                                          (App [(Id "true")]);
                                          (App [(Id "false")]);
                                          (App [(Id "true")])]);
                                     (App
                                        [(Id "String");
                                          (App
                                             [(Id "Ascii");
                                               (App [(Id "false")]);
                                               (App [(Id "true")]);
                                               (App [(Id "true")]);
                                               (App [(Id "false")]);
                                               (App [(Id "false")]);
                                               (App [(Id "false")]);
                                               (App [(Id "true")]);
                                               (App [(Id "true")])]);
                                          (App
                                             [(Id "String");
                                               (App
                                                  [(Id "Ascii");
                                                    (App [(Id "false")]);
                                                    (App [(Id "true")]);
                                                    (App [(Id "true")]);
                                                    (App [(Id "false")]);
                                                    (App [(Id "false")]);
                                                    (App [(Id "false")]);
                                                    (App [(Id "true")]);
                                                    (App [(Id "true")])]);
                                               (App
                                                  [(Id "String");
                                                    (App
                                                       [(Id "Ascii");
                                                         (App [(Id "false")]);
                                                         (App [(Id "false")]);
                                                         (App [(Id "true")]);
                                                         (App [(Id "false")]);
                                                         (App [(Id "false")]);
                                                         (App [(Id "false")]);
                                                         (App [(Id "false")]);
                                                         (App [(Id "false")])
                                                         ]);
                                                    (App
                                                       [(Id "String");
                                                         (App
                                                            [(Id "Ascii");
                                                              (App
                                                                 [(Id "false")
                                                                   ]);
                                                              (App
                                                                 [(Id "false")
                                                                   ]);
                                                              (App
                                                                 [(Id "true")
                                                                   ]);
                                                              (App
                                                                 [(Id "false")
                                                                   ]);
                                                              (App
                                                                 [(Id "true")
                                                                   ]);
                                                              (App
                                                                 [(Id "false")
                                                                   ]);
                                                              (App
                                                                 [(Id "false")
                                                                   ]);
                                                              (App
                                                                 [(Id "false")
                                                                   ])
                                                              ]);
                                                         (App
                                                            [(Id
                                                                "EmptyString")
                                                              ])
                                                         ])
                                                    ])
                                               ])
                                          ])
                                     ])
                                ]);
                           (App [(Id "string_of_nat"); (Id "n")])]);
                      (App
                         [(Id "String");
                           (App
                              [(Id "Ascii"); (App [(Id "false")]);
                                (App [(Id "false")]); (App [(Id "true")]);
                                (App [(Id "false")]); (App [(Id "true")]);
                                (App [(Id "false")]); (App [(Id "false")]);
                                (App [(Id "true")])]);
                           (App [(Id "EmptyString")])])
                      ]))))
       ]
     ));
  (DOpen ("@stdout", "out"));
  (DTm (None, None,
     (Let ((PCons ("sig_intro", [(PVar (Some "n")); (PVar (Some "main"))])),
        (App
           [(Id "try_exn"); (Id "_"); (Id "main");
             (App
                [(Id "div2_exn_p");
                  (App
                     [(Id "succ");
                       (App
                          [(Id "succ");
                            (App
                               [(Id "succ");
                                 (App
                                    [(Id "succ");
                                      (App
                                         [(Id "succ");
                                           (App
                                              [(Id "succ");
                                                (App
                                                   [(Id "succ");
                                                     (App
                                                        [(Id "succ");
                                                          (App
                                                             [(Id "succ");
                                                               (App
                                                                  [(Id "succ");
                                                                    (
                                                                    App
                                                                    [(Id
                                                                    "succ");
                                                                    (App
                                                                    [(Id
                                                                    "succ");
                                                                    (App
                                                                    [(Id
                                                                    "succ");
                                                                    (App
                                                                    [(Id
                                                                    "succ");
                                                                    (App
                                                                    [(Id
                                                                    "zero")])
                                                                    ])])])])])
                                                               ])
                                                          ])
                                                     ])
                                                ])
                                           ])
                                      ])
                                 ])
                            ])
                       ])
                  ]);
             (App [(Id "zero")])]),
        (Let ((PVar (Some "s")), (App [(Id "string_of_nat"); (Id "n")]),
           (Let ((PVar (Some "out")),
              (App
                 [(Id "printline"); (Id "out");
                   (App
                      [(Id "cat"); (Id "s");
                        (App
                           [(Id "String");
                             (App
                                [(Id "Ascii"); (App [(Id "false")]);
                                  (App [(Id "false")]); (App [(Id "false")]);
                                  (App [(Id "false")]); (App [(Id "true")]);
                                  (App [(Id "false")]); (App [(Id "true")]);
                                  (App [(Id "false")])]);
                             (App [(Id "EmptyString")])])
                        ])
                   ]),
              (Let ((PCons ("tt", [])), (App [(Id "close_out"); (Id "out")]),
                 (Id "main")))
              ))
           ))
        ))
     ))
  ]
parse success---------------------------------------

data unit_d1 : U
  | tt_c1 : unit_d1

data bool_d2 : U
  | true_c2 : bool_d2
  | false_c3 : bool_d2

data nat_d3 : U
  | zero_c4 : nat_d3
  | succ_c5 : nat_d3 -> nat_d3

def (addn_3 := addn_195) : nat_d3 -> nat_d3 -> nat_d3
  | zero_c4 x_199 => x_199
  | (succ_c5 x_200) y_201 => (succ_c5 ((addn_195) x_200 y_201))

data option_d4 (A_202 : U) : U
  | none_c6 (A_203 : U) : (option_d4 A_203)
  | some_c7 (A_204 : U) : A_204 -> (option_d4 A_204)

data list_d5 (A_206 : U) : U
  | nil_c8 (A_207 : U) : (list_d5 A_207)
  | cons_c9 (A_208 : U) : A_208 -> (list_d5 A_208) -> (list_d5 A_208)

data vec_d6 (A_212 : U) : nat_d3 -> U
  | vnil_c10 (A_214 : U) : (vec_d6 A_214 zero_c4)
  | vcons_c11 (A_215 : U) :
    ∀ (n_216 : nat_d3) ->
      A_215 -> (vec_d6 A_215 n_216) -> (vec_d6 A_215 (succ_c5 n_216))

data ex_d7 (A_221 : U) (P_222 : A_221 -> U) : U
  | ex_intro_c12 (A_224 : U) (P_225 : A_224 -> U) :
    ∀ (x_227 : A_224) -> ((P_225) x_227) -> (ex_d7 A_224 P_225)

data sig_d8 (A_229 : U) (P_230 : A_229 -> L) : L
  | sig_intro_c13 (A_232 : U) (P_233 : A_232 -> L) :
    ∀ (x_235 : A_232) -> ((P_233) x_235) -> (sig_d8 A_232 P_233)

data tnsr_d9 (A_237 : L) (B_238 : L) : L
  | tnsr_intro_c14 (A_239 : L) (B_240 : L) :
    A_239 -> B_240 -> (tnsr_d9 A_239 B_240)

data box_d10 (A_244 : U) : L
  | box_intro_c15 (A_245 : U) : A_245 -> (box_d10 A_245)

data ascii_d11 : U
  | Ascii_c16 :
    bool_d2 ->
      bool_d2 ->
        bool_d2 ->
          bool_d2 -> bool_d2 -> bool_d2 -> bool_d2 -> bool_d2 -> ascii_d11

data string_d12 : U
  | EmptyString_c17 : string_d12
  | String_c18 : ascii_d11 -> string_d12 -> string_d12

def (cat_60 := cat_286) : string_d12 -> string_d12 -> string_d12
  | EmptyString_c17 s_290 => s_290
  | (String_c18 c_291 s1_292) s2_293 =>
    (String_c18 c_291 ((cat_286) s1_292 s2_293))

data le_d13 (n_294 : nat_d3) : nat_d3 -> U
  | le_n_c19 (n_296 : nat_d3) : (le_d13 n_296 n_296)
  | le_succ_c20 (n_297 : nat_d3) :
    ∀ (m_298 : nat_d3) ->
      (le_d13 n_297 m_298) -> (le_d13 n_297 (succ_c5 m_298))

def (lt_73 := lt_300) : nat_d3 -> nat_d3 -> U
  | m_304 n_305 => (le_d13 (succ_c5 m_304) n_305)

data eq_d14 (A_306 : U) (x_307 : A_306) : A_306 -> U
  | refl_c21 (A_309 : U) (x_310 : A_309) : (eq_d14 A_309 x_310 x_310)

def (stdin_rec_83 := stdin_rec_311) : unit_d1 -> proto
  | tt_c1 =>
    !(b_313 : bool_d2) ⋅
      (match b_313 return ??1 with
        | true_c2 => ?string_d12 ⋅ ((stdin_rec_311) tt_c1)
        | false_c3 => end)

def (stdout_rec_87 := stdout_rec_315) : unit_d1 -> proto
  | tt_c1 =>
    !(b_317 : bool_d2) ⋅
      (match b_317 return ??2 with
        | true_c2 => !string_d12 ⋅ ((stdout_rec_315) tt_c1)
        | false_c3 => end)

def (stderr_rec_91 := stderr_rec_319) : unit_d1 -> proto
  | tt_c1 =>
    !(b_321 : bool_d2) ⋅
      (match b_321 return ??3 with
        | true_c2 => !string_d12 ⋅ ((stderr_rec_319) tt_c1)
        | false_c3 => end)

def stdin_t_95 := ((stdin_rec_83) tt_c1)

def stdout_t_96 := ((stdout_rec_87) tt_c1)

def stderr_t_97 := ((stderr_rec_91) tt_c1)

def (readline_98 := readline_323) :
  ch<stdin_t_95> -> (sig_d8 string_d12 (fun
                                         | _329 => ch<stdin_t_95>))
  | ch_330 => recv ((send ch_330) true_c2)

def (close_in_103 := close_in_331) : ch<stdin_t_95> -> unit_d1
  | ch_333 => close ((send ch_333) false_c3)

def (printline_106 := printline_334) :
  ch<stdout_t_96> -> string_d12 -o ch<stdout_t_96>
  | ch_338 s_339 => ((send ((send ch_338) true_c2)) s_339)

def (close_out_111 := close_out_340) : ch<stdout_t_96> -> unit_d1
  | ch_342 => close ((send ch_342) false_c3)

def (printerr_114 := printerr_343) :
  ch<stderr_t_97> -> string_d12 -o ch<stderr_t_97>
  | ch_347 s_348 => ((send ((send ch_347) true_c2)) s_348)

def (close_err_119 := close_err_349) : ch<stderr_t_97> -> unit_d1
  | ch_351 => close ((send ch_351) false_c3)

def (exn_p_122 := exn_p_352) : U -> proto
  | A_354 => !(b_355 : bool_d2) ⋅ if b_355 then !A_354 ⋅ end
else
  end

data Exn_d15 (A_357 : U) : L
  | Error_c22 (A_358 : U) : (Exn_d15 A_358)
  | Ok_c23 (A_359 : U) : A_359 -> ch<((exn_p_122) A_359)> -> (Exn_d15 A_359)

def (exn_132 := exn_363) : U -> U
  | A_365 => ch<((exn_p_122) A_365)> -> (Exn_d15 A_365)

def (ret_136 := ret_367) : ∀ (A_368 : U) -> A_368 -> ((exn_132) A_368)
  | _371 m_372 ch_373 => (Ok_c23 m_372 ch_373)

def (throw_142 := throw_374) : ∀ (A_375 : U) -> ((exn_132) A_375)
  | _376 ch_377 =>
    let ch_378 := ((send ch_377) false_c3) in
    (match close ch_378 return ??4 with
      | tt_c1 => Error_c22)

def (bind_147 := bind_379) :
  ∀ (A_380 : U) ->
    ((exn_132) A_380) -> A_380 -> ((exn_132) A_380) -> ((exn_132) A_380)
  | _387 e_388 f_389 ch_390 =>
    (match ((e_388) ch_390) return ??5 with
      | Error_c22 => Error_c22
      | (Ok_c23 m_391 ch_392) => ((f_389) m_391 ch_392))

def (div2_exn_p_158 := div2_exn_p_393) : nat_d3 -> ((exn_132) nat_d3)
  | zero_c4 => ((ret_136) ??6 zero_c4)
  | (succ_c5 zero_c4) => ((throw_142) ??7)
  | (succ_c5 (succ_c5 n_395)) =>
    ((bind_147)
      ??8 ((div2_exn_p_393) n_395)
      (fun
        | n_398 => ((ret_136) ??9 (succ_c5 n_398))))

def (try_exn_163 := try_exn_399) :
  ∀ (A_400 : U) ->
    @main -o
      ((exn_132) A_400) -o A_400 -o (sig_d8 A_400 (fun
                                                    | _417 => @main))
  | A_418 m_419 f_exn_p_420 default_421 =>
    (match
       fork (ch_422 : ch<((exn_p_122) A_418)>) <- m_419 in
       (match ((f_exn_p_420) ch_422) return ??10 with
         | Error_c22 => tt_c1
         | (Ok_c23 x_423 ch_424) =>
           let ch_425 := ((send ch_424) true_c2) in
           let ch_426 := ((send ch_425) x_423) in close ch_426)
     return ??15 with
      | (tnsr_intro_c14 ch_427 m_428) =>
        (match recv ch_427 return ??14 with
          | (sig_intro_c13 true_c2 ch_429) =>
            (match recv ch_429 return ??12 with
              | (sig_intro_c13 res_430 ch_431) =>
                (match close ch_431 return ??11 with
                  | tt_c1 => (sig_intro_c13 res_430 m_428)))
          | (sig_intro_c13 false_c3 ch_432) =>
            (match close ch_432 return ??13 with
              | tt_c1 => (sig_intro_c13 default_421 m_428))))

def (string_of_nat_185 := string_of_nat_433) : nat_d3 -> string_d12
  | zero_c4 => "zero"
  | (succ_c5 n_435) =>
    ((cat_60) ((cat_60) "succ (" ((string_of_nat_433) n_435)) ")")

open @stdout as out_188

def _189 :=
  (match ((try_exn_163) ??16 main_1 ((div2_exn_p_158) 14) zero_c4) return
     ??18
   with
    | (sig_intro_c13 n_436 main_437) =>
      let s_438 := ((string_of_nat_185) n_436) in
      let out_439 := ((printline_106) out_188 ((cat_60) s_438 "\n")) in
      (match ((close_out_111) out_439) return ??17 with
        | tt_c1 => main_437))


trans01 success-------------------------------------

data unit_d1 : U
  | tt_c1 : unit_d1

data bool_d2 : U
  | true_c2 : bool_d2
  | false_c3 : bool_d2

data nat_d3 : U
  | zero_c4 : nat_d3
  | succ_c5 : nat_d3 -> nat_d3

def (addn_3 := addn_18420) : nat_d3 -> nat_d3 -> nat_d3
  | zero_c4 x_18424 => x_18424
  | (succ_c5 x_18425) y_18426 => (succ_c5 ((addn_18420) x_18425 y_18426))

data option_d4 (A_18427 : U) : U
  | none_c6 (A_18428 : U) : (option_d4 A_18428)
  | some_c7 (A_18429 : U) : A_18429 -> (option_d4 A_18429)

data list_d5 (A_18431 : U) : U
  | nil_c8 (A_18432 : U) : (list_d5 A_18432)
  | cons_c9 (A_18433 : U) : A_18433 -> (list_d5 A_18433) -> (list_d5 A_18433)

data vec_d6 (A_18437 : U) : nat_d3 -> U
  | vnil_c10 (A_18439 : U) : (vec_d6 A_18439 zero_c4)
  | vcons_c11 (A_18440 : U) :
    ∀ (n_18441 : nat_d3) ->
      A_18440 ->
        (vec_d6 A_18440 n_18441) -> (vec_d6 A_18440 (succ_c5 n_18441))

data ex_d7 (A_18446 : U) (P_18447 : A_18446 -> U) : U
  | ex_intro_c12 (A_18449 : U) (P_18450 : A_18449 -> U) :
    ∀ (x_18452 : A_18449) -> ((P_18450) x_18452) -> (ex_d7 A_18449 P_18450)

data sig_d8 (A_18454 : U) (P_18455 : A_18454 -> L) : L
  | sig_intro_c13 (A_18457 : U) (P_18458 : A_18457 -> L) :
    ∀ (x_18460 : A_18457) ->
      ((P_18458) x_18460) -> (sig_d8 A_18457 P_18458)

data tnsr_d9 (A_18462 : L) (B_18463 : L) : L
  | tnsr_intro_c14 (A_18464 : L) (B_18465 : L) :
    A_18464 -> B_18465 -> (tnsr_d9 A_18464 B_18465)

data box_d10 (A_18469 : U) : L
  | box_intro_c15 (A_18470 : U) : A_18470 -> (box_d10 A_18470)

data ascii_d11 : U
  | Ascii_c16 :
    bool_d2 ->
      bool_d2 ->
        bool_d2 ->
          bool_d2 -> bool_d2 -> bool_d2 -> bool_d2 -> bool_d2 -> ascii_d11

data string_d12 : U
  | EmptyString_c17 : string_d12
  | String_c18 : ascii_d11 -> string_d12 -> string_d12

def (cat_60 := cat_18511) : string_d12 -> string_d12 -> string_d12
  | EmptyString_c17 s_18515 => s_18515
  | (String_c18 c_18516 s1_18517) s2_18518 =>
    (String_c18 c_18516 ((cat_18511) s1_18517 s2_18518))

data le_d13 (n_18519 : nat_d3) : nat_d3 -> U
  | le_n_c19 (n_18521 : nat_d3) : (le_d13 n_18521 n_18521)
  | le_succ_c20 (n_18522 : nat_d3) :
    ∀ (m_18523 : nat_d3) ->
      (le_d13 n_18522 m_18523) -> (le_d13 n_18522 (succ_c5 m_18523))

def (lt_73 := lt_18525) : nat_d3 -> nat_d3 -> U
  | m_18529 n_18530 => (le_d13 (succ_c5 m_18529) n_18530)

data eq_d14 (A_18531 : U) (x_18532 : A_18531) : A_18531 -> U
  | refl_c21 (A_18534 : U) (x_18535 : A_18534) :
    (eq_d14 A_18534 x_18535 x_18535)

def (stdin_rec_83 := stdin_rec_18536) : unit_d1 -> proto
  | tt_c1 =>
    !(b_18538 : bool_d2) ⋅
      (match b_18538 return proto with
        | true_c2 => ?string_d12 ⋅ ((stdin_rec_18536) tt_c1)
        | false_c3 => end)

def (stdout_rec_87 := stdout_rec_18540) : unit_d1 -> proto
  | tt_c1 =>
    !(b_18542 : bool_d2) ⋅
      (match b_18542 return proto with
        | true_c2 => !string_d12 ⋅ ((stdout_rec_18540) tt_c1)
        | false_c3 => end)

def (stderr_rec_91 := stderr_rec_18544) : unit_d1 -> proto
  | tt_c1 =>
    !(b_18546 : bool_d2) ⋅
      (match b_18546 return proto with
        | true_c2 => !string_d12 ⋅ ((stderr_rec_18544) tt_c1)
        | false_c3 => end)

def stdin_t_95 := ((stdin_rec_83) tt_c1)

def stdout_t_96 := ((stdout_rec_87) tt_c1)

def stderr_t_97 := ((stderr_rec_91) tt_c1)

def (readline_98 := readline_18548) :
  ch<stdin_t_95> -> (sig_d8 string_d12 (fun
                                         | _18554 => ch<stdin_t_95>))
  | ch_18555 => recv ((send ch_18555) true_c2)

def (close_in_103 := close_in_18556) : ch<stdin_t_95> -> unit_d1
  | ch_18558 => close ((send ch_18558) false_c3)

def (printline_106 := printline_18559) :
  ch<stdout_t_96> -> string_d12 -o ch<stdout_t_96>
  | ch_18563 s_18564 => ((send ((send ch_18563) true_c2)) s_18564)

def (close_out_111 := close_out_18565) : ch<stdout_t_96> -> unit_d1
  | ch_18567 => close ((send ch_18567) false_c3)

def (printerr_114 := printerr_18568) :
  ch<stderr_t_97> -> string_d12 -o ch<stderr_t_97>
  | ch_18572 s_18573 => ((send ((send ch_18572) true_c2)) s_18573)

def (close_err_119 := close_err_18574) : ch<stderr_t_97> -> unit_d1
  | ch_18576 => close ((send ch_18576) false_c3)

def (exn_p_122 := exn_p_18577) : U -> proto
  | A_18579 => !(b_18580 : bool_d2) ⋅ if b_18580 then !A_18579 ⋅ end
else
  end

data Exn_d15 (A_18582 : U) : L
  | Error_c22 (A_18583 : U) : (Exn_d15 A_18583)
  | Ok_c23 (A_18584 : U) :
    A_18584 -> ch<((exn_p_122) A_18584)> -> (Exn_d15 A_18584)

def (exn_132 := exn_18588) : U -> U
  | A_18590 => ch<((exn_p_122) A_18590)> -> (Exn_d15 A_18590)

def (ret_136 := ret_18592) :
  ∀ (A_18593 : U) -> A_18593 -> ((exn_132) A_18593)
  | _18596 m_18597 ch_18598 => (Ok_c23 m_18597 ch_18598)

def (throw_142 := throw_18599) : ∀ (A_18600 : U) -> ((exn_132) A_18600)
  | _18601 ch_18602 =>
    let ch_18603 := ((send ch_18602) false_c3) in
    (match close ch_18603 return (Exn_d15 _18601) with
      | tt_c1 => Error_c22)

def (bind_147 := bind_18604) :
  ∀ (A_18605 : U) ->
    ((exn_132) A_18605) ->
      A_18605 -> ((exn_132) A_18605) -> ((exn_132) A_18605)
  | _18612 e_18613 f_18614 ch_18615 =>
    (match ((e_18613) ch_18615) return (Exn_d15 _18612) with
      | Error_c22 => Error_c22
      | (Ok_c23 m_18616 ch_18617) => ((f_18614) m_18616 ch_18617))

def (div2_exn_p_158 := div2_exn_p_18618) : nat_d3 -> ((exn_132) nat_d3)
  | zero_c4 => ((ret_136) nat_d3 zero_c4)
  | (succ_c5 zero_c4) => ((throw_142) nat_d3)
  | (succ_c5 (succ_c5 n_18620)) =>
    ((bind_147)
      nat_d3 ((div2_exn_p_18618) n_18620)
      (fun
        | n_18623 => ((ret_136) nat_d3 (succ_c5 n_18623))))

def (try_exn_163 := try_exn_18624) :
  ∀ (A_18625 : U) ->
    @main -o
      ((exn_132) A_18625) -o
        A_18625 -o (sig_d8 A_18625 (fun
                                     | _18642 => @main))
  | A_18643 m_18644 f_exn_p_18645 default_18646 =>
    (match
       fork (ch_18647 : ch<((exn_p_122) A_18643)>) <- m_18644 in
       (match ((f_exn_p_18645) ch_18647) return unit_d1 with
         | Error_c22 => tt_c1
         | (Ok_c23 x_18648 ch_18649) =>
           let ch_18650 := ((send ch_18649) true_c2) in
           let ch_18651 := ((send ch_18650) x_18648) in close ch_18651)
     return (sig_d8 A_18643 (fun
                              | _18654 => @main))
     with
      | (tnsr_intro_c14 ch_18655 m_18656) =>
        (match recv ch_18655 return (sig_d8 A_18643 (fun
                                                      | _18659 => @main)) with
          | (sig_intro_c13 true_c2 ch_18660) =>
            (match recv ch_18660 return
               (sig_d8 A_18643 (fun
                                 | _18663 => @main))
             with
              | (sig_intro_c13 res_18664 ch_18665) =>
                (match close ch_18665 return
                   (sig_d8 A_18643 (fun
                                     | _18668 => @main))
                 with
                  | tt_c1 => (sig_intro_c13 res_18664 m_18656)))
          | (sig_intro_c13 false_c3 ch_18669) =>
            (match close ch_18669 return
               (sig_d8 A_18643 (fun
                                 | _18672 => @main))
             with
              | tt_c1 => (sig_intro_c13 default_18646 m_18656))))

def (string_of_nat_185 := string_of_nat_18673) : nat_d3 -> string_d12
  | zero_c4 => "zero"
  | (succ_c5 n_18675) =>
    ((cat_60) ((cat_60) "succ (" ((string_of_nat_18673) n_18675)) ")")

open @stdout as out_188

def _189 :=
  (match ((try_exn_163) nat_d3 main_1 ((div2_exn_p_158) 14) zero_c4) return
     @main
   with
    | (sig_intro_c13 n_18676 main_18677) =>
      let s_18678 := ((string_of_nat_185) n_18676) in
      let out_18679 := ((printline_106) out_188 ((cat_60) s_18678 "\n")) in
      (match ((close_out_111) out_18679) return @main with
        | tt_c1 => main_18677))


trans1e success-------------------------------------

def addn_3 :=
  fix addn_22429 _22430 =>
    (case _22430 of
      | zero_c4 => lam _22431 => _22431
      | (succ_c5 _22432) =>
        lam _22433 => (succ_c5 ((addn_22429) _22432 _22433)))

def cat_60 :=
  fix cat_22434 _22435 =>
    (case _22435 of
      | EmptyString_c17 => lam _22436 => _22436
      | (String_c18 _22437 _22438) =>
        lam _22439 => (String_c18 _22437 ((cat_22434) _22438 _22439)))

def lt_73 := fix lt_22440 _22441 _22442 => (le_d13 (succ_c5 _22441) _22442)

def stdin_rec_83 :=
  fix stdin_rec_22443 _22444 =>
    (case _22444 of
      | tt_c1 =>
        !(b_22445 : bool_d2) ⋅
          ((lin _22448 =>
              (case _22448 of
                | true_c2 => ?string_d12 ⋅ ((stdin_rec_22443) tt_c1)
                | false_c3 => end))
            b_22445))

def stdout_rec_87 :=
  fix stdout_rec_22450 _22451 =>
    (case _22451 of
      | tt_c1 =>
        !(b_22452 : bool_d2) ⋅
          ((lin _22455 =>
              (case _22455 of
                | true_c2 => !string_d12 ⋅ ((stdout_rec_22450) tt_c1)
                | false_c3 => end))
            b_22452))

def stderr_rec_91 :=
  fix stderr_rec_22457 _22458 =>
    (case _22458 of
      | tt_c1 =>
        !(b_22459 : bool_d2) ⋅
          ((lin _22462 =>
              (case _22462 of
                | true_c2 => !string_d12 ⋅ ((stderr_rec_22457) tt_c1)
                | false_c3 => end))
            b_22459))

def stdin_t_95 := ((stdin_rec_83) tt_c1)

def stdout_t_96 := ((stdout_rec_87) tt_c1)

def stderr_t_97 := ((stderr_rec_91) tt_c1)

def readline_98 := fix readline_22464 _22465 => recv ((send _22465) true_c2)

def close_in_103 :=
  fix close_in_22466 _22467 => close ((send _22467) false_c3)

def printline_106 :=
  fix printline_22468 _22469 =>
    lin _22470 => ((send ((send _22469) true_c2)) _22470)

def close_out_111 :=
  fix close_out_22471 _22472 => close ((send _22472) false_c3)

def printerr_114 :=
  fix printerr_22473 _22474 =>
    lin _22475 => ((send ((send _22474) true_c2)) _22475)

def close_err_119 :=
  fix close_err_22476 _22477 => close ((send _22477) false_c3)

def exn_p_122 :=
  fix exn_p_22478 _22479 =>
    !(b_22480 : bool_d2) ⋅
      (case b_22480 of
        | true_c2 => !_22479 ⋅ end
        | false_c3 => end)

def exn_132 :=
  fix exn_22482 _22483 => ch<((exn_p_122) _22483)> -> (Exn_d15 _22483)

def ret_136 := fix ret_22485 A_22486 _22487 _22488 => (Ok_c23 _22487 _22488)

def throw_142 :=
  fix throw_22489 A_22490 _22491 =>
    let ch_22492 := ((send _22491) false_c3) in
    ((lin _22493 => (case _22493 of
                      | tt_c1 => Error_c22)) close ch_22492)

def bind_147 :=
  fix bind_22494 A_22495 _22496 _22497 _22498 =>
    ((lin _22499 =>
        (case _22499 of
          | Error_c22 => Error_c22
          | (Ok_c23 _22500 _22501) => ((_22497) _22500 _22501)))
      ((_22496) _22498))

def div2_exn_p_158 :=
  fix div2_exn_p_22502 _22503 =>
    (case _22503 of
      | zero_c4 => ((ret_136) nat_d3 zero_c4)
      | (succ_c5 _22504) =>
        (case _22504 of
          | zero_c4 => ((throw_142) nat_d3)
          | (succ_c5 _22505) =>
            ((bind_147)
              nat_d3 ((div2_exn_p_22502) _22505)
              fix _22506 _22507 => ((ret_136) nat_d3 (succ_c5 _22507)))))

def try_exn_163 :=
  fix try_exn_22508 A_22509 =>
    lin _22510 _22511 _22512 =>
      ((lin _22513 =>
          (case _22513 of
            | (tnsr_intro_c14 _22514 _22515) =>
              ((lin _22516 =>
                  (case _22516 of
                    | (sig_intro_c13 x_22517 _22518) =>
                      (case x_22517 of
                        | true_c2 =>
                          ((lin _22519 =>
                              (case _22519 of
                                | (sig_intro_c13 x_22520 _22521) =>
                                  ((lin _22522 =>
                                      (case _22522 of
                                        | tt_c1 =>
                                          (sig_intro_c13 x_22520 _22515)))
                                    close _22521)))
                            recv _22518)
                        | false_c3 =>
                          ((lin _22523 =>
                              (case _22523 of
                                | tt_c1 => (sig_intro_c13 _22512 _22515)))
                            close _22518))))
                recv _22514)))
        fork (ch_22524 : ch<((exn_p_122) A_22509)>) <- _22510 in
        ((lin _22525 =>
            (case _22525 of
              | Error_c22 => tt_c1
              | (Ok_c23 _22526 _22527) =>
                let ch_22528 := ((send _22527) true_c2) in
                let ch_22529 := ((send ch_22528) _22526) in close ch_22529))
          ((_22511) ch_22524)))

def string_of_nat_185 :=
  fix string_of_nat_22530 _22531 =>
    (case _22531 of
      | zero_c4 =>
        (String_c18
          (Ascii_c16 false_c3 true_c2 true_c2 true_c2 true_c2 false_c3
          true_c2 false_c3)
        (String_c18
          (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3 true_c2
          false_c3 true_c2)
        (String_c18
          (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3 false_c3
          true_c2 false_c3)
        (String_c18
          (Ascii_c16 false_c3 true_c2 true_c2 false_c3 true_c2 true_c2
          true_c2 true_c2)
        EmptyString_c17))))
      | (succ_c5 _22532) =>
        ((cat_60)
          ((cat_60)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3 false_c3
              true_c2 true_c2)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3 true_c2
              false_c3 true_c2)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3 false_c3
              true_c2 true_c2)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3 false_c3
              true_c2 true_c2)
            (String_c18
              (Ascii_c16 false_c3 false_c3 true_c2 false_c3 false_c3 false_c3
              false_c3 false_c3)
            (String_c18
              (Ascii_c16 false_c3 false_c3 true_c2 false_c3 true_c2 false_c3
              false_c3 false_c3)
            EmptyString_c17)))))) ((string_of_nat_22530) _22532))
          (String_c18
            (Ascii_c16 false_c3 false_c3 true_c2 false_c3 true_c2 false_c3
            false_c3 true_c2)
          EmptyString_c17)))

open @stdout as out_188

def _189 :=
  ((lin _22533 =>
      (case _22533 of
        | (sig_intro_c13 x_22534 _22535) =>
          let s_22536 := ((string_of_nat_185) x_22534) in
          let out_22537 :=
            ((printline_106)
              out_188
              ((cat_60)
                s_22536
                (String_c18
                  (Ascii_c16 false_c3 false_c3 false_c3 false_c3 true_c2
                  false_c3 true_c2 false_c3)
                EmptyString_c17)))
          in
          ((lin _22538 => (case _22538 of
                            | tt_c1 => _22535))
            ((close_out_111) out_22537))))
    ((try_exn_163)
      nat_d3 main_1
      ((div2_exn_p_158)
        (succ_c5
          (succ_c5
            (succ_c5
              (succ_c5
                (succ_c5
                  (succ_c5
                    (succ_c5
                      (succ_c5
                        (succ_c5
                          (succ_c5
                            (succ_c5 (succ_c5 (succ_c5 (succ_c5 zero_c4)))))))))))))))
      zero_c4))


trans12 success-------------------------------------

[(addn_3,
  (VFix (addn_22539,
     lam _23993 =>
       (case _23993 of
         | zero_c4 => lam _23994 => _23994
         | (succ_c5 _23995) =>
           lam _23996 => (succ_c5 ((addn_22539) _23995 _23996)))
     )));
  (cat_60,
   (VFix (cat_22540,
      lam _23997 =>
        (case _23997 of
          | EmptyString_c17 => lam _23998 => _23998
          | (String_c18 _23999 _24000) =>
            lam _24001 => (String_c18 _23999 ((cat_22540) _24000 _24001)))
      )));
  (lt_73,
   (VFix (lt_22541, lam _24002 _24003 => (le_d13 (succ_c5 _24002) _24003))));
  (stdin_rec_83,
   (VFix (stdin_rec_22542,
      lam _24004 =>
        (case _24004 of
          | tt_c1 =>
            !(b_24005 : bool_d2) ⋅
              ((lin _24008 =>
                  (case _24008 of
                    | true_c2 => ?string_d12 ⋅ ((stdin_rec_22542) tt_c1)
                    | false_c3 => end))
                b_24005))
      )));
  (stdout_rec_87,
   (VFix (stdout_rec_22543,
      lam _24010 =>
        (case _24010 of
          | tt_c1 =>
            !(b_24011 : bool_d2) ⋅
              ((lin _24014 =>
                  (case _24014 of
                    | true_c2 => !string_d12 ⋅ ((stdout_rec_22543) tt_c1)
                    | false_c3 => end))
                b_24011))
      )));
  (stderr_rec_91,
   (VFix (stderr_rec_22544,
      lam _24016 =>
        (case _24016 of
          | tt_c1 =>
            !(b_24017 : bool_d2) ⋅
              ((lin _24020 =>
                  (case _24020 of
                    | true_c2 => !string_d12 ⋅ ((stderr_rec_22544) tt_c1)
                    | false_c3 => end))
                b_24017))
      )));
  (stdin_t_95, VBox); (stdout_t_96, VBox); (stderr_t_97, VBox);
  (readline_98,
   (VFix (readline_22548, lam _24022 => recv ((send _24022) true_c2))));
  (close_in_103,
   (VFix (close_in_22549, lam _24023 => close ((send _24023) false_c3))));
  (printline_106,
   (VFix (printline_22550,
      lam _24024 => lin _24025 => ((send ((send _24024) true_c2)) _24025))));
  (close_out_111,
   (VFix (close_out_22551, lam _24026 => close ((send _24026) false_c3))));
  (printerr_114,
   (VFix (printerr_22552,
      lam _24027 => lin _24028 => ((send ((send _24027) true_c2)) _24028))));
  (close_err_119,
   (VFix (close_err_22553, lam _24029 => close ((send _24029) false_c3))));
  (exn_p_122,
   (VFix (exn_p_22554,
      lam _24030 =>
        !(b_24031 : bool_d2) ⋅
          (case b_24031 of
            | true_c2 => !_24030 ⋅ end
            | false_c3 => end)
      )));
  (exn_132,
   (VFix (exn_22555,
      lam _24033 => ch<((exn_p_122) _24033)> -> (Exn_d15 _24033))));
  (ret_136,
   (VFix (ret_22556, lam A_24035 _24036 _24037 => (Ok_c23 _24036 _24037))));
  (throw_142,
   (VFix (throw_22557,
      lam A_24038 _24039 =>
        let ch_24040 := ((send _24039) false_c3) in
        ((lin _24041 => (case _24041 of
                          | tt_c1 => Error_c22))
          close ch_24040)
      )));
  (bind_147,
   (VFix (bind_22558,
      lam A_24042 _24043 _24044 _24045 =>
        ((lin _24046 =>
            (case _24046 of
              | Error_c22 => Error_c22
              | (Ok_c23 _24047 _24048) => ((_24044) _24047 _24048)))
          ((_24043) _24045))
      )));
  (div2_exn_p_158,
   (VFix (div2_exn_p_22559,
      lam _24049 =>
        (case _24049 of
          | zero_c4 => ((ret_136) nat_d3 zero_c4)
          | (succ_c5 _24050) =>
            (case _24050 of
              | zero_c4 => ((throw_142) nat_d3)
              | (succ_c5 _24051) =>
                ((bind_147)
                  nat_d3 ((div2_exn_p_22559) _24051)
                  fix _24052 _24053 => ((ret_136) nat_d3 (succ_c5 _24053)))))
      )));
  (try_exn_163,
   (VFix (try_exn_22560,
      lam A_24054 =>
        lin _24055 _24056 _24057 =>
          ((lin _24058 =>
              (case _24058 of
                | (tnsr_intro_c14 _24059 _24060) =>
                  ((lin _24061 =>
                      (case _24061 of
                        | (sig_intro_c13 x_24062 _24063) =>
                          (case x_24062 of
                            | true_c2 =>
                              ((lin _24064 =>
                                  (case _24064 of
                                    | (sig_intro_c13 x_24065 _24066) =>
                                      ((lin _24067 =>
                                          (case _24067 of
                                            | tt_c1 =>
                                              (sig_intro_c13 x_24065 _24060)))
                                        close _24066)))
                                recv _24063)
                            | false_c3 =>
                              ((lin _24068 =>
                                  (case _24068 of
                                    | tt_c1 => (sig_intro_c13 _24057 _24060)))
                                close _24063))))
                    recv _24059)))
            fork (ch_24069 : ch<((exn_p_122) A_24054)>) <- _24055 in
            ((lin _24070 =>
                (case _24070 of
                  | Error_c22 => tt_c1
                  | (Ok_c23 _24071 _24072) =>
                    let ch_24073 := ((send _24072) true_c2) in
                    let ch_24074 := ((send ch_24073) _24071) in
                    close ch_24074))
              ((_24056) ch_24069)))
      )));
  (string_of_nat_185,
   (VFix (string_of_nat_22561,
      lam _24075 =>
        (case _24075 of
          | zero_c4 =>
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 true_c2 true_c2 false_c3
              true_c2 false_c3)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3 true_c2
              false_c3 true_c2)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3 false_c3
              true_c2 false_c3)
            (String_c18
              (Ascii_c16 false_c3 true_c2 true_c2 false_c3 true_c2 true_c2
              true_c2 true_c2)
            EmptyString_c17))))
          | (succ_c5 _24076) =>
            ((cat_60)
              ((cat_60)
                (String_c18
                  (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3
                  false_c3 true_c2 true_c2)
                (String_c18
                  (Ascii_c16 false_c3 true_c2 true_c2 true_c2 false_c3
                  true_c2 false_c3 true_c2)
                (String_c18
                  (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3
                  false_c3 true_c2 true_c2)
                (String_c18
                  (Ascii_c16 false_c3 true_c2 true_c2 false_c3 false_c3
                  false_c3 true_c2 true_c2)
                (String_c18
                  (Ascii_c16 false_c3 false_c3 true_c2 false_c3 false_c3
                  false_c3 false_c3 false_c3)
                (String_c18
                  (Ascii_c16 false_c3 false_c3 true_c2 false_c3 true_c2
                  false_c3 false_c3 false_c3)
                EmptyString_c17)))))) ((string_of_nat_22561) _24076))
              (String_c18
                (Ascii_c16 false_c3 false_c3 true_c2 false_c3 true_c2
                false_c3 false_c3 true_c2)
              EmptyString_c17)))
      )));
  (_189, VBox)]
eval2 success---------------------------------------

