open @stdout as stdout

data unit : U
  | tt : unit

data nat : U
  | zero : nat
  | succ : nat -> nat

data vec (A : U) : nat -> U
  | nil : vec A zero
  | cons : ∀ {n : nat} -> A -> vec A n -> vec A (succ n)

def addn : nat -> nat -> nat
  | zero x => x
  | (succ x) y => succ (addn x y)

def length : ∀ {A : U} {n : nat} -> vec A n -> nat
  | nil => zero
  | (cons _ tl) => succ (length tl)

def one := succ zero

def foo := cons one (cons one (cons one nil))

def main := length foo