open @stdout as stdout

data bot : U

def base := ?(x : A) >> end

data nat : U
  | zero : nat
  | succ : nat -> nat

data vec (A : U) : nat -> U
  | nil : vec A zero
  | cons : ∀ (n : nat) -> A -> vec A n -> vec A (succ n)

def foo : ∀ (A : U) (x : nat) -> vec A (succ x) -> vec A x
  | _ _ (cons hd tl) x =>
    fork (x : ch) in
      match send ch with
      | intros x => x
    and
      match hd, tl with
      | (cons x y), nil => x
      | nil, zero => x

def main :=
  let ch := send stdout msg in
  let _ := close ch in
  tt