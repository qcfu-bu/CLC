data unit : U
  | tt : unit

data bool : U
  | true  : bool
  | false : bool

data nat : U
  | zero : nat
  | succ : nat -> nat

def addn : nat -> nat -> nat
  | zero x => x
  | (succ x) y => succ (addn x y)

data option (A : U) : U
  | none : option A
  | some : A -> option A

data list (A : U) : U
  | nil  : list A
  | cons : A -> list A -> list A

-- data vec (A : U) : nat -> U
--   | vnil : vec A zero
--   | vcons : ∀ {n : nat} -> A -> vec A n -> vec A (succ n)

data ex (A : U) (P : A -> U) : U
  | ex_intro : ∀ (x : A) -> P x -> ex A P

data sig (A : U) (P : A -> L) : L
  | sig_intro : ∀ (x : A) -> P x -> sig A P

data tnsr (A B : L) : L
  | tnsr_intro : A -> B -> tnsr A B

data box (A : U) : L
  | box_intro : A -> box A

data ascii : U
  | Ascii :
    bool -> bool -> bool -> bool ->
    bool -> bool -> bool -> bool ->
    ascii

data string : U
  | EmptyString : string
  | String : ascii -> string -> string

def stdin_rec : unit -> proto
  | tt =>
    !(b : bool) ⋅
      match b with
      | true => ?string ⋅ stdin_rec tt
      | false => end

def stdout_rec : unit -> proto
  | tt =>
    !(b : bool) ⋅
      match b with
      | true => !string ⋅ stdout_rec tt
      | false => end

def stderr_rec : unit -> proto
  | tt =>
    !(b : bool) ⋅
      match b with
      | true => !string ⋅ stderr_rec tt
      | false => end

def stdin_t := stdin_rec tt
def stdout_t := stdout_rec tt
def stderr_t := stderr_rec tt