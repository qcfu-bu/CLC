Import stdout 2 as _stdout_.

Inductive ref_msg : U :=
| GET : ref_msg
| SET : ref_msg
| FREE : ref_msg.

Fixpoint ref_t (n : nat) (A : U) : proto :=
  match n with
  | O => $
  | S n => 
    ?(msg : ref_msg), 
      match msg with
      | GET => !A, ref_t n A
      | SET => ?A, ref_t n A
      | FREE => $
      end
  end.

Fixpoint ref_handler 
  (A : U) (n : nat) (m : A) : (channel ref_t n A) -o unit 
:= 
  lin ch =>
  match n as x return
    channel ref_t x A -> unit
  with
  | O => fun ch => close ch
  | S n => fun ch =>
    let [msg, ch] := recv ch in
    match msg as x return
      channel
        match x with
        | GET => !A, ref_t n A
        | SET => ?A, ref_t n A
        | FREE => $
        end -> unit
    with
    | GET => fun ch =>
      let ch := send ch m in
      ref_handler A n m ch
    | SET => fun ch =>
      let [m, ch] := recv ch in
      ref_handler A n m ch
    | FREE => fun ch => close ch
    end ch
  end ch.

Definition Main :=
  let ⟨ref, _main_⟩ :=
    fork (ref : channel ref_t 10 string) := _main_ in
    ref_handler string 10 "hello\n" ref
  in
  let ref := send ref GET in
  let [msg1, ref] := recv ref in
  let ref := send ref SET in
  let ref := send ref "world\n" in
  let ref := send ref GET in
  let [msg2, ref] := recv ref in
  let _stdout_ := send _stdout_ msg1 in
  let _stdout_ := send _stdout_ msg2 in
  let ref := send ref FREE in
  let () := close _stdout_ in
  let () := close ref in
  _main_.