Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : A -> U) : U :=
| ex_intro : forall (x : A), P x -> ex A P.

Inductive sig (A : U) (P : A -> L) : L :=
| sig_intro : forall (x : A), P x -> sig A P.

Inductive tnsr (A B : L) : L :=
| tnsr_intro : A -> B -> tnsr A B.

Inductive nat : U :=
| O : nat
| S : nat -> nat.

Inductive ascii : U :=
| Ascii : 
  bool -> bool -> bool -> bool ->
  bool -> bool -> bool -> bool ->
  ascii.

Inductive string : U :=
| EmptyString : string
| String : ascii -> string -> string.

Import stdout O as _stdout_.

Definition sender (ch : channel ?nat, $) : unit := 
  let ch := send ch (S (S O)) in
  close ch.

Definition Main := 
  let tnsr_intro ch _main_ := 
    fork (ch : channel ?nat, $) := _main_ in
    sender ch
  in
  let sig msg ch := recv ch in
  let _stdout_ := send _stdout_ msg in
  let tt := close ch in
  let tt := close _stdout_ in
  _main_.