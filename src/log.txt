Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U) (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A P).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U) (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A P).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A B).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | (EmptyString ) => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Import stdout (S (S O)) as _stdout_.

Inductive ref_msg : U :=
| GET : ref_msg
| SET : ref_msg
| FREE : ref_msg.

Definition ref_t :=
  ((fix ref_t n A =>
      match n with
      | (O ) => $
      | (S n) =>
        ?(msg : ref_msg),
          match msg with
          | (GET ) => !(_ : A), ((ref_t) n) A
          | (SET ) => ?(_ : A), ((ref_t) n) A
          | (FREE ) => $
          end
      end) :
    (nat) -> (U) -> proto).

Definition ref_handler :=
  ((fix ref_handler A n m =>
      lin ch  =>
        (match nas x return (channel ((ref_t) x) A) -> unit with
         | (O ) => fun ch  => close ch
         | (S n) =>
           fun ch  =>
             match recv ch with
             | (sig_intro msg ch) =>
               (match msgas x return
                  (channel match x with
                           | (GET ) => !(_ : A), ((ref_t) n) A
                           | (SET ) => ?(_ : A), ((ref_t) n) A
                           end) ->
                    unit
                with
                | (GET ) =>
                  fun ch  =>
                    let ch := (send ch) m in ((((ref_handler) A) n) m) ch
                | (SET ) =>
                  fun ch  =>
                    match recv ch with
                    | (sig_intro m ch) => ((((ref_handler) A) n) m) ch
                    end
                | (FREE ) => fun ch  => close ch
                end) ch
             end
         end) ch) :
    forall (A : U), forall (n : nat), (A) -> (channel ((ref_t) n) A) -o unit).

Main :=
  match fork (ref :
          channel ((ref_t)
                     (S
                       (S
                         (S
                           (S
                             (S
                               (S
                                 (S
                                   (S
                                     (S
                                       (S
                                         (S
                                           (S
                                             (S
                                               (S
                                                 (S
                                                   (S
                                                     (S
                                                       (S
                                                         (S
                                                           (S
                                                             (S
                                                               (S
                                                                 (S
                                                                   (S
                                                                    (S
                                                                    (S
                                                                    (S
                                                                    (S
                                                                    (S (S O)))))))))))))))))))))))))))))))
                    string) :=
          _main_
        in
        ((((ref_handler) string)
            (S
              (S
                (S
                  (S
                    (S
                      (S
                        (S
                          (S
                            (S
                              (S
                                (S
                                  (S
                                    (S
                                      (S
                                        (S
                                          (S
                                            (S
                                              (S
                                                (S
                                                  (S
                                                    (S
                                                      (S
                                                        (S
                                                          (S
                                                            (S
                                                              (S
                                                                (S
                                                                  (S
                                                                    (S (S O)))))))))))))))))))))))))))))))
           (String
             (Ascii false true true false true false false false)
               (String
                 (Ascii false true true false false true false true)
                   (String
                     (Ascii false true true false true true false false)
                       (String
                         (Ascii false true true false true true false false)
                           (String
                             (Ascii
                               false true true false true true true true)
                               (String
                                 (Ascii
                                   false
                                     false false false true false true false)
                                   EmptyString)))))))
          ref
  with
  | (tnsr_intro ref _main_) =>
    let ref := (send ref) GET in
    match recv ref with
    | (sig_intro msg1 ref) =>
      let ref := (send ref) SET in
      let ref :=
        (send ref)
          (String
            (Ascii false true true true false true true true)
              (String
                (Ascii false true true false true true true true)
                  (String
                    (Ascii false true true true false false true false)
                      (String
                        (Ascii false true true false true true false false)
                          (String
                            (Ascii
                              false true true false false true false false)
                              (String
                                (Ascii
                                  false
                                    false false false true false true false)
                                  EmptyString))))))
      in
      let ref := (send ref) GET in
      match recv ref with
      | (sig_intro msg2 ref) =>
        let _stdout_ := (send _stdout_) msg1 in
        let _stdout_ := (send _stdout_) msg2 in
        let ref := (send ref) FREE in
        match close _stdout_ with
        | (tt ) => match close ref with
                   | (tt ) => _main_
                   end
        end
      end
    end
  end.

coverage
