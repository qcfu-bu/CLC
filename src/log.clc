Inductive unit : U :=
| tt : unit.

Inductive bool : U :=
| true : bool
| false : bool.

Inductive ex (A : U) (P : (A) -> U) : U :=
| ex_intro (A : U) (P : (A) -> U) : forall (x : A), ((P) x) -> (ex A#68 P#69).

Inductive sig (A : U) (P : (A) -> L) : L :=
| sig_intro (A : U)
              (P : (A) -> L) : forall (x : A), ((P) x) -> (sig A#76 P#77).

Inductive tnsr (A : L) (B : L) : L :=
| tnsr_intro (A : L) (B : L) : (A) -> (B) -> (tnsr A#83 B#84).

Inductive nat : U :=
| O : nat
| S : (nat) -> nat.

Inductive ascii : U :=
| Ascii : (bool) ->
            (bool) ->
              (bool) ->
                (bool) -> (bool) -> (bool) -> (bool) -> (bool) -> ascii.

Inductive string : U :=
| EmptyString : string
| String : (ascii) -> (string) -> string.

Definition cat :=
  ((fix cat s1 s2 =>
      match s1 with
      | EmptyString => s2
      | (String c s1) => (String c ((cat) s1) s2)
      end) :
    (string) -> (string) -> string).

Definition handler :=
  ((lin ch =>
      match recv ch with
      | (tnsr_intro msg ch) =>
        let ch := (send ch) msg in match close ch with
                                   | tt => tt
                                   end
      end) :
    (channel ?(_ : main), !(_ : main), $) -o unit).

Definition Main :=
  match fork (ch : channel ?(_ : main), !(_ : main), $) := _main_ in
        (handler) ch
  with
  | (tnsr_intro ch _main_) =>
    let ch := (send ch) _main_ in
    match recv ch with
    | (tnsr_intro _main_ ch) => match close ch with
                                | tt => _main_
                                end
    end
  end.