        test alias test/runtest (exit 2)
(cd _build/default/test && ./test.exe)
infer_i
ictx := {
}
t  :=
  axiom g : forall (_ : Linear), Type in
  axiom g_constr : forall (a : Linear), (a -o (g) a) in
  axiom f : forall (a : Type), forall (_ : forall (_ : a), Linear), Linear in
  (G+ axiom f_constr : forall (a : Type),
                         forall (m : forall (_ : a), Linear),
                           forall (x : a), ((m) x -o ((f) a) m) in
      f_constr)

check_i
ictx := {
}
t  := forall (_ : Linear), Type
ty := Type

infer_i
ictx := {
}
t  := forall (_ : Linear), Type

check_i
ictx := {
}
t  := Linear
ty := Type

infer_i
ictx := {
}
t  := Linear

infer_i
ictx := {
  _ : Linear
}
t  := Type

infer_i
ictx := {
  g : forall (_ : Linear), Type
}
t  :=
  axiom g_constr : forall (a : Linear), (a -o (g) a) in
  axiom f : forall (a : Type), forall (_ : forall (_ : a), Linear), Linear in
  (G+ axiom f_constr : forall (a : Type),
                         forall (m : forall (_ : a), Linear),
                           forall (x : a), ((m) x -o ((f) a) m) in
      f_constr)

check_i
ictx := {
  g : forall (_ : Linear), Type
}
t  := forall (a : Linear), (a -o (g) a)
ty := Type

infer_i
ictx := {
  g : forall (_ : Linear), Type
}
t  := forall (a : Linear), (a -o (g) a)

check_i
ictx := {
  g : forall (_ : Linear), Type
}
t  := Linear
ty := Type

infer_i
ictx := {
  g : forall (_ : Linear), Type
}
t  := Linear

infer_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := (a -o (g) a)

check_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := a
ty := Linear

infer_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := a

check_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := (g) a
ty := Linear

infer_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := (g) a

infer_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := g

check_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := a
ty := Linear

infer_i
ictx := {
  a : Linear
  g : forall (_ : Linear), Type
}
t  := a

Fatal error: exception Failure("
check_i
 t  := Type
 ty := Linear")